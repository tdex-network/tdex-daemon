syntax = "proto3";

package tdex_daemon.v1;

import "tdex-daemon/v1/types.proto";
import "tdex/v1/types.proto";

/**
 * Service for operators to configure and manage a TDEX daemon
 */
service OperatorService {
  // Returns info about the internal wallet of the daemon.
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {}

  // Returns some new derived address(es) from the fee account.
  // This is only used to deposit some LBTC to subsidize blockchain fees.
  rpc GetFeeAddress(GetFeeAddressRequest) returns (GetFeeAddressResponse) {}

  // Returns the list of all derived addresses for the fee account.
  rpc ListFeeAddresses(ListFeeAddressesRequest)
    returns (ListFeeAddressesResponse) {}

  // Returns info about the balance of LBTC held in the fee account.
  rpc GetFeeBalance(GetFeeBalanceRequest) returns (GetFeeBalanceResponse) {}

  // Allows to provide transaction(s) outpoints of deposits made to fund the fee account.
  // The transaction(s) must be already included in blockchain.
  rpc ClaimFeeDeposits(ClaimFeeDepositsRequest) returns (ClaimFeeDepositsResponse) {}

  // Allows to withdraw funds from the fee account to a given address.
  rpc WithdrawFee(WithdrawFeeRequest) returns (WithdrawFeeResponse) {}

  // Creates a new market account in the daemon's wallet.
  rpc NewMarket(NewMarketRequest) returns (NewMarketResponse) {}

  rpc GetMarketInfo(GetMarketInfoRequest) returns (GetMarketInfoResponse) {}

  // Returns some new derived address(es) for the given market.
  rpc GetMarketAddress(GetMarketAddressRequest)
    returns (GetMarketAddressResponse) {}

  // Returns the list of all derived addresses for the given market.
  rpc ListMarketAddresses(ListMarketAddressesRequest)
    returns (ListMarketAddressesResponse) {}

  // Returns info about the balance of the given market.
  rpc GetMarketBalance(GetMarketBalanceRequest) returns (GetMarketBalanceResponse) {}

  // Allows to provide transaction(s) outpoints of deposits made to fund a market.
  // The transaction(s) provided must be already included in blockchain.
  rpc ClaimMarketDeposits(ClaimMarketDepositsRequest) returns (ClaimMarketDepositsResponse) {}

  // Makes the given market tradable.
  rpc OpenMarket(OpenMarketRequest) returns (OpenMarketResponse) {}

  // Makes the given market NOT tradabale.
  rpc CloseMarket(CloseMarketRequest) returns (CloseMarketResponse) {}

  // Deletes a market.
  rpc DropMarket(DropMarketRequest) returns(DropMarketResponse) {}

  // Displays a report of the colected fees for the given market.
  rpc GetMarketCollectedSwapFees(GetMarketCollectedSwapFeesRequest)
    returns (GetMarketCollectedSwapFeesResponse) {}

  // Allows to withdraw funds from the given market to a given address.
  rpc WithdrawMarket(WithdrawMarketRequest) returns (WithdrawMarketResponse) {}

  // Changes the Liquidity Provider percentage fee for the given market.
  rpc UpdateMarketPercentageFee(UpdateMarketPercentageFeeRequest)
    returns (UpdateMarketPercentageFeeResponse) {}

  // Changes the Liquidity provider fixed fees for the given market.
  rpc UpdateMarketFixedFee(UpdateMarketFixedFeeRequest)
    returns (UpdateMarketFixedFeeResponse) {}

  // Updates the price for the given market.
  rpc UpdateMarketPrice(UpdateMarketPriceRequest)
    returns (UpdateMarketPriceResponse) {}

  // Updates the current market making strategy, either using an automated
  // market making formula or a pluggable price feed.
  rpc UpdateMarketStrategy(UpdateMarketStrategyRequest)
      returns (UpdateMarketStrategyResponse) {}

  // Returns some new derived address(es) for the fee fragmenter account.
  rpc GetFeeFragmenterAddress(GetFeeFragmenterAddressRequest)
    returns(GetFeeFragmenterAddressResponse) {}

  // Returns the list of all derived addresses for the fee fragmenter account.
  rpc ListFeeFragmenterAddresses(ListFeeFragmenterAddressesRequest)
    returns(ListFeeFragmenterAddressesResponse) {}

  // Returns info about the balance of the fee fragmenter account.
  rpc GetFeeFragmenterBalance(GetFeeFragmenterBalanceRequest)
    returns(GetFeeFragmenterBalanceResponse) {}

  // Splits the funds sent to the fee fragmenter account into multiple
  // fragments that then becomes deposits of the Fee account.
  rpc FeeFragmenterSplitFunds(FeeFragmenterSplitFundsRequest)
    returns (stream FeeFragmenterSplitFundsResponse) {}

  // Allows to withdraw funds from the fee fragmenter account to a given address.
  rpc WithdrawFeeFragmenter(WithdrawFeeFragmenterRequest)
    returns (WithdrawFeeFragmenterResponse) {}

  // Returns some new derived address(es) for the market fragmenter account.
  rpc GetMarketFragmenterAddress(GetMarketFragmenterAddressRequest)
    returns(GetMarketFragmenterAddressResponse) {}

  // Returns the list of all derived addresses for the market fragmenter account.
  rpc ListMarketFragmenterAddresses(ListMarketFragmenterAddressesRequest)
    returns(ListMarketFragmenterAddressesResponse) {}

  // Returns info about the balance of the market fragmenter account.
  rpc GetMarketFragmenterBalance(GetMarketFragmenterBalanceRequest)
    returns(GetMarketFragmenterBalanceResponse) {}

  // Splits the funds sent to the market fragmenter account into multiple
  // fragments that then becomes deposits of the given market.
  rpc MarketFragmenterSplitFunds(MarketFragmenterSplitFundsRequest)
    returns (stream MarketFragmenterSplitFundsResponse) {}

  // Allows to withdraw funds from the market fragmenter account to a given address.
  rpc WithdrawMarketFragmenter(WithdrawMarketFragmenterRequest)
    returns (WithdrawMarketFragmenterResponse) {}

  // Get extended details for each market either open, closed or to be funded.
  rpc ListMarkets(ListMarketsRequest) returns (ListMarketsResponse) {}

  // Returs all the trades processed by the daemon (ongoing, completed and
  // failed/rejected) or all those filtered by market.
  rpc ListTrades(ListTradesRequest) returns (ListTradesResponse) {}

  // Causes the daemon to re-sync the whole utxo set.
  rpc ReloadUtxos(ReloadUtxosRequest) returns(ReloadUtxosResponse) {}

  // Returns all the utxos, whether unspents, spents or locked.
  rpc ListUtxos(ListUtxosRequest) returns(ListUtxosResponse){}

  // Adds a webhook registered for some kind of event.
  rpc AddWebhook(AddWebhookRequest) returns(AddWebhookResponse){}

  // Removes some previously added webhook.
  rpc RemoveWebhook(RemoveWebhookRequest) returns(RemoveWebhookResponse){}

  // Returns registered webhooks
  rpc ListWebhooks(ListWebhooksRequest) returns(ListWebhooksResponse){}

  // Returns the list of all claimed deposits for the given account.
  rpc ListDeposits(ListDepositsRequest) returns(ListDepositsResponse){}

  // Returns the list of all withdrawals made for the given account.
  rpc ListWithdrawals(ListWithdrawalsRequest) returns(ListWithdrawalsResponse){}

  // Returns info about volume and collected fees for specific time range
  rpc GetMarketReport(GetMarketReportRequest) returns(GetMarketReportResponse){}
}

message GetInfoRequest{}
message GetInfoResponse{
  // The root path of the wallet of the daemon.
  string root_path = 1;
  // The SLIP-77 master blinding key from which every keypair is derived.
  string master_blinding_key = 2;
  // The list of info related to every account.
  repeated AccountInfo account_info = 3;
  // Network daemon running on
  string network = 4;
  // Daemon build information
  BuildInfo build_data = 5;
  // Fixed base asset
  string fixed_base_asset = 6;
  // Fixed quote asset
  string fixed_quote_asset = 7;
}

message BuildInfo {
  // Version
  string version = 1;
  // Commit
  string commit = 2;
  // Date
  string date = 3;
}

message GetFeeAddressRequest {
  // The number of addresses to generate.
  int64 num_of_addresses = 1 [jstype = JS_NUMBER];
}
message GetFeeAddressResponse {
  // The list of new confidential addresses and related private blinding keys.
  repeated AddressWithBlindingKey address_with_blinding_key = 1;
}

message ListFeeAddressesRequest {}
message ListFeeAddressesResponse {
  // The list of derived confidential addresses and related private blinding
  // keys.
  repeated AddressWithBlindingKey address_with_blinding_key = 1;
}

message GetFeeBalanceRequest {}
message GetFeeBalanceResponse {
  // The balance of all unlocked unspents.
  uint64 available_balance = 1;
  // The balance of all unspents included those locked.
  uint64 total_balance = 2;
}

message ClaimFeeDepositsRequest {
  // The list of outpoints sent to the fee account address(es).
  // They all must be confirmed, ie. included in blockchain.
  repeated Outpoint outpoints = 1;
}
message ClaimFeeDepositsResponse {}

message WithdrawFeeRequest {
  // The amount of L-BTC to widthdraw expressed in Satoshi.
  uint64 amount = 1;
  // The number of millisatoshis per byte that should be paid for network fees.
  uint64 millisats_per_byte = 2;
  // The address to send the funds to.
  string address = 3;
  // The asset to withdraw. To leave blank for LBTC. This is aimed for
  // those cases where the operator deposits funds with assets diffent from LBTC
  // into the Fee account and than needs to withdraw'em.
  string asset = 4;
}
message WithdrawFeeResponse {
  // The transaction hash in mempool/blockchain.
  string txid = 1;
}

message NewMarketRequest {
  // The asset pair for which creating a new account in the daemon's wallet.
  tdex.v1.Market market = 1;
}
message NewMarketResponse {}

message GetMarketInfoRequest {
  tdex.v1.Market market = 1;
}
message GetMarketInfoResponse {
  MarketInfo info = 1;
}

message GetMarketAddressRequest {
  // The market for which deriving new addresses.
  tdex.v1.Market market = 1;
  // The number of addresses to generate.
  int64 num_of_addresses = 2 [jstype = JS_NUMBER];
}
message GetMarketAddressResponse {
  // The list of new confidential addresses and related private blinding keys.
  repeated AddressWithBlindingKey address_with_blinding_key = 1;
}

message ListMarketAddressesRequest {
  // The Market for which listing all derived addresses.
  tdex.v1.Market market = 1;
}
message ListMarketAddressesResponse {
  // The list of derived confidential addresses and related private blinding
  // keys.
  repeated AddressWithBlindingKey address_with_blinding_key = 1;
}

message GetMarketBalanceRequest {
  // The market for which calculating the balance.
  tdex.v1.Market market = 1;
}
message GetMarketBalanceResponse {
  // The balance of all unlocked unspents.
  tdex.v1.Balance available_balance = 1;
  // The balance of all unspents included those locked.
  tdex.v1.Balance total_balance = 2;
}

message ClaimMarketDepositsRequest {
  // The market for which claiming the deposits.
  tdex.v1.Market market = 1;
  // The list of outpoints sent to the market address(es).
  // They all must be confirmed, ie. included in blockchain.
  repeated Outpoint outpoints = 2;
}
message ClaimMarketDepositsResponse {}

message OpenMarketRequest {
  // The market to be made tradable.
  tdex.v1.Market market = 1;
}
message OpenMarketResponse {}

message CloseMarketRequest {
  // The market to be made not tradable.
  tdex.v1.Market market = 1;
}
message CloseMarketResponse {}

message ListMarketsRequest {}
message ListMarketsResponse {
  // The list of info about all the created markets.
  repeated MarketInfo markets = 1;
}

message DropMarketRequest {
  tdex.v1.Market market = 1;
}
message DropMarketResponse{}

message GetMarketCollectedSwapFeesRequest {
  // The marker for which returning the report of collected fees.
  tdex.v1.Market market = 1;
  // The page for a paginated reply.
  Page page = 2;
}
message GetMarketCollectedSwapFeesResponse {
  // The list of info about the collected fees per each trade.
  repeated FeeInfo collected_fees = 1;
  // The map of total fees collected per asset.
  map<string, int64> total_collected_fees_per_asset = 2;
}

message WithdrawMarketRequest {
  // The market from which funds should be withdrawn.
  tdex.v1.Market market = 1;
  // The amount of base and quote asset to be withdrawn.
  tdex.v1.Balance balance_to_withdraw = 2;
  // The number of millisatoshis per byte that should be paid for network fees.
  int64 millisats_per_byte = 3;
  // The address to send the funds to.
  string address = 4;
}
message WithdrawMarketResponse {
  // The transaction hash in mempool/blockchain.
  string txid = 1;
}

message UpdateMarketPercentageFeeRequest {
  // The market for which updating the percentage fee.
  tdex.v1.Market market = 1;
  // The new percentage fee expresses in basis point.
  int64 basis_point = 2 [jstype = JS_NUMBER];
}
message UpdateMarketPercentageFeeResponse {
  // The market with updated fees.
  tdex.v1.MarketWithFee market_with_fee = 1;
}

message UpdateMarketFixedFeeRequest {
  // The market for which updating the fixed fee.
  tdex.v1.Market market = 1;
  // The new fixed fee for base and quote asset.
  tdex.v1.Fixed fixed = 2;
}
message UpdateMarketFixedFeeResponse {
  // The market with updated fees.
  tdex.v1.MarketWithFee market_with_fee = 1;
}

message UpdateMarketPriceRequest {
  // The arket for which updating the price.
  tdex.v1.Market market = 1;
  // The new price for base and quote asset.
  tdex.v1.Price price = 2;
}
message UpdateMarketPriceResponse {}

message UpdateMarketStrategyRequest {
  // The market for which changing the strategy.
  tdex.v1.Market market = 1;
  // The new making strategy to use.
  StrategyType strategy_type = 2;
  // The JSON string representing additional metadata about the new strategy.
  string metadata = 3;
}
message UpdateMarketStrategyResponse {}

message GetFeeFragmenterAddressRequest {
  int64 num_of_addresses = 1 [jstype = JS_NUMBER];
}
message GetFeeFragmenterAddressResponse {
  repeated AddressWithBlindingKey address_with_blinding_key = 1;
}

message ListFeeFragmenterAddressesRequest {}
message ListFeeFragmenterAddressesResponse {
  repeated AddressWithBlindingKey address_with_blinding_key = 1;
}

message GetFeeFragmenterBalanceRequest {}
message GetFeeFragmenterBalanceResponse {
  // The balance info (total, confirmed, unconfirmed) of the account grouped by
  // asset.
  map<string, BalanceInfo> balance = 1;
}

message FeeFragmenterSplitFundsRequest {
  // The max number of fragments the fragmenter can generate when splitting
  // its funds.
  uint32 max_fragments = 1;
  uint64 millisats_per_byte = 2;
}
message FeeFragmenterSplitFundsResponse {
  // A sequence of string messages returned during the process.
  string message = 1;
}

message WithdrawFeeFragmenterRequest {
  // The address to send the funds to.
  string address = 1;
  // The number of millisatoshis per byte that should be paid for network fees.
  uint64 millisats_per_byte = 2;
}
message WithdrawFeeFragmenterResponse {
  string txid = 1;
}

message GetMarketFragmenterAddressRequest{
  int64 num_of_addresses = 1 [jstype = JS_NUMBER];
}
message GetMarketFragmenterAddressResponse {
  repeated AddressWithBlindingKey address_with_blinding_key = 1;
}

message ListMarketFragmenterAddressesRequest{}
message ListMarketFragmenterAddressesResponse {
  repeated AddressWithBlindingKey address_with_blinding_key = 1;
}

message GetMarketFragmenterBalanceRequest {}
message GetMarketFragmenterBalanceResponse {
  // The balance info (total, confirmed, unconfirmed) of the account grouped by
  // asset.
  map<string, BalanceInfo> balance = 1;
}

message MarketFragmenterSplitFundsRequest {
  // The market to which to deposit the fragmented funds owned by the market
  // fragmenter.
  tdex.v1.Market market = 1;
  uint64 millisats_per_byte = 2;
}
message MarketFragmenterSplitFundsResponse {
  // A sequence of string messages returned during the process.
  string message = 1;
}

message WithdrawMarketFragmenterRequest {
  // The address to send the funds to.
  string address = 1;
  // The number of millisatoshis per byte that should be paid for network fees.
  uint64 millisats_per_byte = 2;
}
message WithdrawMarketFragmenterResponse {
  string txid = 1;
}

message ListTradesRequest {
  // Optional: request all trades related to a specific market.
  tdex.v1.Market market = 1;
  // The page for a paginated reply.
  Page page = 2;
}
message ListTradesResponse {
  // The list of info about all trades or all trades for a market depending on
  // the request.
  repeated TradeInfo trades = 1;
}

message ReloadUtxosRequest {}
message ReloadUtxosResponse {}

message ListUtxosRequest {
  // Optional: request all utxos owned by a specific wallet account.
  uint64 account_index = 1 [jstype = JS_NUMBER];
  // The page for a paginated reply.
  Page page = 2;
}
message ListUtxosResponse{
  // The list of all unspent utxos.
  repeated UtxoInfo unspents = 1;
  // The list of all spent utxos.
  repeated UtxoInfo spents = 2;
  // The list of all currently locked utxos.
  repeated UtxoInfo locks = 3;
}

message AddWebhookRequest {
  // The endpoint of the external service to reach.
  string endpoint = 1;
  // The action for which the webhook should be registered.
  ActionType action = 2;
  // The secret to use for signign a JWT token for an authenticated request
  // to the external service.
  string secret = 3;
}
message AddWebhookResponse {
  // The id of the new webhook.
  string id = 1;
}

message RemoveWebhookRequest {
  // The id of the webhook to remove.
  string id = 1;
}
message RemoveWebhookResponse {}

message ListWebhooksRequest {
  // The action for which filtering the list of webhooks.
  ActionType action = 1;
}
message ListWebhooksResponse {
  // The list of info about the webhooks regitered for an action.
  repeated WebhookInfo webhook_info = 1;
}

message ListDepositsRequest{
  // The index of the wallet account for which listing the deposits.
  int64 account_index = 1 [jstype = JS_NUMBER];
  // The page for a paginated reply.
  Page page = 2;
}
message ListDepositsResponse{
  // The index of the wallet account.
  int64 account_index = 1 [jstype = JS_NUMBER];
  // The list of info about the deposits.
  repeated Deposit deposits = 2;
}

message ListWithdrawalsRequest{
  // The index of the wallet account for which listing the withdrawals.
  int64 account_index = 1 [jstype = JS_NUMBER];
  // The page for a paginated reply.
  Page page = 2;
}
message ListWithdrawalsResponse{
  // The index of the wallet account.
  int64 account_index = 1 [jstype = JS_NUMBER];
  // The list of info about the withdrawals.
  repeated Withdrawal withdrawals = 2;
}

message GetMarketReportRequest {
  // The market for which returning the report of collected fees.
  tdex.v1.Market market = 1;
  // time_range fetch market report from time range
  TimeRange time_range = 2;
  // used to group volume by time_frame for the specified time_range
  TimeFrame time_frame = 3;
}
message GetMarketReportResponse {
  // MarketReport holds info about volume and collected fees
  MarketReport report = 1;
}