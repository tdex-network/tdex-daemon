syntax = "proto3";

package tdex_daemon.v2;

import "tdex-daemon/v2/types.proto";
import "google/api/annotations.proto";
/**
 * Service for operators to manage the internal wallet of the daemon
 */
service WalletService {
  // GenSeed is the first method that should be used to instantiate a new tdexd
  // instance. This method allows a caller to generate a new HD Wallet.
  // Once the seed is obtained and verified by the user, the InitWallet
  // method should be used to commit the newly generated seed, and create the
  // wallet.
  rpc GenSeed(GenSeedRequest) returns (GenSeedResponse) {
    option (google.api.http) = {
      get: "/v2/wallet/seed"
    };
  };

  // InitWallet is used when tdexd is starting up for the first time to fully
  // initialize the daemon and its internal wallet. 
  // The wallet in the tdexd context is a database file on the disk that can be
  // found in the configured data directory. 
  // At the very least a mnemonic and a wallet password must be provided to this 
  // RPC. The latter will be used to encrypt sensitive material on disk.
  // Once initialized the wallet is locked and since the password is never stored
  // on the disk, it's required to pass it into the Unlock RPC request to be able
  // to manage the daemon for operations like depositing funds or opening a market.
  rpc InitWallet(InitWalletRequest) returns (stream InitWalletResponse) {
    option (google.api.http) = {
      post: "/v2/wallet/init"
      body: "*"
    };
  };

  // UnlockWallet is used at startup of tdexd to provide a password to unlock
  // the wallet.
  rpc UnlockWallet(UnlockWalletRequest) returns (UnlockWalletResponse) {
    option (google.api.http) = {
      post: "/v2/wallet/unlock"
      body: "*"
    };
  };

  // LockWallet can be used to lock tdexd and disable any operation but those
  // provided by this service.
  rpc LockWallet(LockWalletRequest) returns (LockWalletResponse) {
    option (google.api.http) = {
      post: "/v2/wallet/lock"
      body: "*"
    };
  };

  // ChangePassword changes the password of the encrypted wallet. This RPC
  // requires the internal wallet to be locked. It doesn't change the wallet state
  // in any case, therefore, like after calling InitWallet, it is required to 
  // unlock the walket with UnlockWallet RPC after this operation succeeds.
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post: "/v2/wallet/password"
      body: "*"
    };
  };

  // GetStatus is useful for external applications interacting with tdexd to know
  // whether its ready, meaning that also the wallet, operator trade services
  // are able to serve requests.
  // Restarting tdexd or initiliazing it by restoring an existing wallet can be
  // time-expensive operations causing tdexd to not be ready until they haven't
  // finished.
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {
    option (google.api.http) = {
      get: "/v2/wallet/status"
    };
  };
  
  // GetInfo returns info about the configuration and the internal wallet of tdexd.
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v2/wallet/info"
    };
  };
}


message GenSeedRequest {}
message GenSeedResponse {
  repeated string seed_mnemonic = 1;
}

message InitWalletRequest {
  // wallet_password is the passphrase that should be used to encrypt the
  // wallet. This MUST be at least 8 chars in length. After creation, this
  // password is required to unlock/lock the daemon.
  string password = 1;

  // seed_mnemonic is a 24-word mnemonic that encodes a prior seed obtained by the
  // user. This MUST be a generated by the GenSeed method
  repeated string seed_mnemonic = 2;
  // the flag to let the daemon restore existing funds for the wallet.
  bool restore = 3;
}
message InitWalletResponse {
  string message = 1;
}

message UnlockWalletRequest {
  // The unlocking password.
  string password = 1;
}
message UnlockWalletResponse {}

message LockWalletRequest {
  // The unlocking password.
  string password = 1;
}
message LockWalletResponse {}

message ChangePasswordRequest {
  // Current unlocking password.
  string current_password = 1;

  // New unlocking password.
  string new_password = 2;
}
message ChangePasswordResponse {}

message GetStatusRequest {}
message GetStatusResponse {
  // whether the daemon is initialized with an HD wallet.
  bool initialized = 1;
  // whether the daemon's wallet is unlocked.
  bool unlocked = 2;
  // whether the daemon's wallet utxo set is up-to-date'.
  bool synced = 3;
}

message GetInfoRequest{}
message GetInfoResponse{
  // The root path of the wallet of the daemon.
  string root_path = 1;
  // The list of info related to every account.
  repeated AccountInfo account_info = 2;
  // Network daemon running on
  string network = 3;
  // Daemon build information
  BuildInfo build_data = 4;
}

message BuildInfo {
  // Version
  string version = 1;
  // Commit
  string commit = 2;
  // Date
  string date = 3;
}