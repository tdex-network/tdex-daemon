syntax = "proto3";

package tdex_daemon.v2;

import "tdex-daemon/v2/types.proto";
import "tdex/v2/types.proto";
import "google/api/annotations.proto";

// FeederService is the service to manage price feeds
service FeederService {
  // AddPriceFeed creates a new price feed for the given market.
  rpc AddPriceFeed(AddPriceFeedRequest) returns (AddPriceFeedResponse) {
    option (google.api.http) = {
      post: "/v2/feeder"
      body: "*"
    };
  };
  // StartPriceFeed starts the price feed with the given id.
  rpc StartPriceFeed(StartPriceFeedRequest) returns (StartPriceFeedResponse) {
    option (google.api.http) = {
      post: "/v2/feeder/start"
      body: "*"
    };
  };
  // StopPriceFeed stops the price feed with the given id.
  rpc StopPriceFeed(StopPriceFeedRequest) returns (StopPriceFeedResponse) {
    option (google.api.http) = {
      post: "/v2/feeder/stop"
      body: "*"
    };
  };
  // UpdatePriceFeed allows to change source and/or ticker of the given price feed.
  rpc UpdatePriceFeed(UpdatePriceFeedRequest) returns (UpdatePriceFeedResponse) {
    option (google.api.http) = {
      post: "/v2/feeder/update"
      body: "*"
    };
  };
  // RemovePriceFeed removes the price feed with the given id.
  rpc RemovePriceFeed(RemovePriceFeedRequest) returns (RemovePriceFeedResponse) {
    option (google.api.http) = {
      post: "/v2/feeder/drop"
      body: "*"
    };
  };
  // GetPriceFeed returns the price feed for the given market.
  rpc GetPriceFeed(GetPriceFeedRequest) returns (GetPriceFeedResponse) {
    option (google.api.http) = {
      get: "/v2/feeder/{id}"
    };
  };
  // ListPriceFeeds returns the list of price feeds of all markets.
  rpc ListPriceFeeds(ListPriceFeedsRequest) returns (ListPriceFeedsResponse) {
    option (google.api.http) = {
      get: "/v2/feeders"
    };
  };
  // ListSupportedPriceSources returns the list of supported price sources.
  rpc ListSupportedPriceSources(ListSupportedPriceSourcesRequest)
    returns (ListSupportedPriceSourcesResponse) {
      option (google.api.http) = {
        get: "/v2/feeder/sources"
      };
    };
}

message AddPriceFeedRequest {
  // market for which the price feed is created
  tdex.v2.Market market = 1;
  // source is the name of the price source to use, e.g. kraken, bitfinex, coinbase etc.
  string source = 2;
  // ticker is the ticker of the market, e.g. "XBT/USDT", "XBT/EUR" etc.
  string ticker = 3;
}
message AddPriceFeedResponse {
  // id is the id of the price feed.
  string id = 1;
}

message StartPriceFeedRequest {
  // id is the id of the price feed.
  string id = 1;
}
message StartPriceFeedResponse {}

message StopPriceFeedRequest {
  // id is the id of the price feed.
  string id = 1;
}
message StopPriceFeedResponse {}

message UpdatePriceFeedRequest {
  // id is the id of the price feed.
  string id = 1;
  // source is the name of the price source to use.
  string source = 2;
  // ticker is the ticker of the asset to use as price source.
  string ticker = 3;
}
message UpdatePriceFeedResponse {}


message RemovePriceFeedRequest {
  // id is the id of the price feed.
  string id = 1;
}
message RemovePriceFeedResponse {}

message ListSupportedPriceSourcesRequest {}

message ListSupportedPriceSourcesResponse {
  // sources is the list of supported price sources.
  repeated string sources = 1;
}

message GetPriceFeedRequest {
  // id of the price field to get info about.
  string id = 1;
}

message GetPriceFeedResponse {
  // feed is the price feed for the given market.
  PriceFeed feed = 1;
}

message ListPriceFeedsRequest {}

message ListPriceFeedsResponse {
  // feeds is the list of price feeds.
  repeated PriceFeed feeds = 1;
}