// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: walletunlocker.proto

package walletunlocker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletUnlockerClient is the client API for WalletUnlocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletUnlockerClient interface {
	//
	//GenSeed is the first method that should be used to instantiate a new tdexd
	//instance. This method allows a caller to generate a new HD Wallet.
	//Once the seed is obtained and verified by the user, the InitWallet
	//method should be used to commit the newly generated seed, and create the
	//wallet.
	GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedReply, error)
	//
	//InitWallet is used when tdexd is starting up for the first time to fully
	//initialize the daemon and its internal wallet.
	//The wallet in the tdexd context is a database file on the disk that can be
	//found in the configured data directory.
	//At the very least a mnemonic and a wallet password must be provided to this
	//RPC. The latter will be used to encrypt sensitive material on disk.
	//Once initialized the wallet is locked and since the password is never stored
	//on the disk, it's required to pass it into the Unlock RPC request to be able
	//to manage the daemon for operations like depositing funds or opening a market.
	InitWallet(ctx context.Context, in *InitWalletRequest, opts ...grpc.CallOption) (WalletUnlocker_InitWalletClient, error)
	//
	//UnlockWallet is used at startup of tdexd to provide a password to unlock
	//the wallet database. Once unlocked, the only way to lock the wallet again is
	//shutting it down.
	UnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletReply, error)
	//
	//ChangePassword changes the password of the encrypted wallet. This RPC
	//requires the internal wallet to be locked. It doesn't change the wallet state
	//in any case, therefore, like after calling InitWallet, it is required to
	//unlock the walket with UnlockWallet RPC after this operation succeeds.
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error)
	//
	//IsReady is useful for external applications interacting with tdexd to know
	//whether its ready, meaning that also the wallet, operator trade services
	//are able to serve requests.
	//Restarting tdexd or initiliazing it by restoring an existing wallet can be
	//time-expensive operations causing tdexd to not be ready until they haven't
	//finished.
	IsReady(ctx context.Context, in *IsReadyRequest, opts ...grpc.CallOption) (*IsReadyReply, error)
}

type walletUnlockerClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletUnlockerClient(cc grpc.ClientConnInterface) WalletUnlockerClient {
	return &walletUnlockerClient{cc}
}

func (c *walletUnlockerClient) GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedReply, error) {
	out := new(GenSeedReply)
	err := c.cc.Invoke(ctx, "/WalletUnlocker/GenSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletUnlockerClient) InitWallet(ctx context.Context, in *InitWalletRequest, opts ...grpc.CallOption) (WalletUnlocker_InitWalletClient, error) {
	stream, err := c.cc.NewStream(ctx, &WalletUnlocker_ServiceDesc.Streams[0], "/WalletUnlocker/InitWallet", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletUnlockerInitWalletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletUnlocker_InitWalletClient interface {
	Recv() (*InitWalletReply, error)
	grpc.ClientStream
}

type walletUnlockerInitWalletClient struct {
	grpc.ClientStream
}

func (x *walletUnlockerInitWalletClient) Recv() (*InitWalletReply, error) {
	m := new(InitWalletReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletUnlockerClient) UnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletReply, error) {
	out := new(UnlockWalletReply)
	err := c.cc.Invoke(ctx, "/WalletUnlocker/UnlockWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletUnlockerClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error) {
	out := new(ChangePasswordReply)
	err := c.cc.Invoke(ctx, "/WalletUnlocker/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletUnlockerClient) IsReady(ctx context.Context, in *IsReadyRequest, opts ...grpc.CallOption) (*IsReadyReply, error) {
	out := new(IsReadyReply)
	err := c.cc.Invoke(ctx, "/WalletUnlocker/IsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletUnlockerServer is the server API for WalletUnlocker service.
// All implementations must embed UnimplementedWalletUnlockerServer
// for forward compatibility
type WalletUnlockerServer interface {
	//
	//GenSeed is the first method that should be used to instantiate a new tdexd
	//instance. This method allows a caller to generate a new HD Wallet.
	//Once the seed is obtained and verified by the user, the InitWallet
	//method should be used to commit the newly generated seed, and create the
	//wallet.
	GenSeed(context.Context, *GenSeedRequest) (*GenSeedReply, error)
	//
	//InitWallet is used when tdexd is starting up for the first time to fully
	//initialize the daemon and its internal wallet.
	//The wallet in the tdexd context is a database file on the disk that can be
	//found in the configured data directory.
	//At the very least a mnemonic and a wallet password must be provided to this
	//RPC. The latter will be used to encrypt sensitive material on disk.
	//Once initialized the wallet is locked and since the password is never stored
	//on the disk, it's required to pass it into the Unlock RPC request to be able
	//to manage the daemon for operations like depositing funds or opening a market.
	InitWallet(*InitWalletRequest, WalletUnlocker_InitWalletServer) error
	//
	//UnlockWallet is used at startup of tdexd to provide a password to unlock
	//the wallet database. Once unlocked, the only way to lock the wallet again is
	//shutting it down.
	UnlockWallet(context.Context, *UnlockWalletRequest) (*UnlockWalletReply, error)
	//
	//ChangePassword changes the password of the encrypted wallet. This RPC
	//requires the internal wallet to be locked. It doesn't change the wallet state
	//in any case, therefore, like after calling InitWallet, it is required to
	//unlock the walket with UnlockWallet RPC after this operation succeeds.
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error)
	//
	//IsReady is useful for external applications interacting with tdexd to know
	//whether its ready, meaning that also the wallet, operator trade services
	//are able to serve requests.
	//Restarting tdexd or initiliazing it by restoring an existing wallet can be
	//time-expensive operations causing tdexd to not be ready until they haven't
	//finished.
	IsReady(context.Context, *IsReadyRequest) (*IsReadyReply, error)
	mustEmbedUnimplementedWalletUnlockerServer()
}

// UnimplementedWalletUnlockerServer must be embedded to have forward compatible implementations.
type UnimplementedWalletUnlockerServer struct {
}

func (UnimplementedWalletUnlockerServer) GenSeed(context.Context, *GenSeedRequest) (*GenSeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSeed not implemented")
}
func (UnimplementedWalletUnlockerServer) InitWallet(*InitWalletRequest, WalletUnlocker_InitWalletServer) error {
	return status.Errorf(codes.Unimplemented, "method InitWallet not implemented")
}
func (UnimplementedWalletUnlockerServer) UnlockWallet(context.Context, *UnlockWalletRequest) (*UnlockWalletReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockWallet not implemented")
}
func (UnimplementedWalletUnlockerServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedWalletUnlockerServer) IsReady(context.Context, *IsReadyRequest) (*IsReadyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (UnimplementedWalletUnlockerServer) mustEmbedUnimplementedWalletUnlockerServer() {}

// UnsafeWalletUnlockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletUnlockerServer will
// result in compilation errors.
type UnsafeWalletUnlockerServer interface {
	mustEmbedUnimplementedWalletUnlockerServer()
}

func RegisterWalletUnlockerServer(s grpc.ServiceRegistrar, srv WalletUnlockerServer) {
	s.RegisterService(&WalletUnlocker_ServiceDesc, srv)
}

func _WalletUnlocker_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletUnlockerServer).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletUnlocker/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletUnlockerServer).GenSeed(ctx, req.(*GenSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletUnlocker_InitWallet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitWalletRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletUnlockerServer).InitWallet(m, &walletUnlockerInitWalletServer{stream})
}

type WalletUnlocker_InitWalletServer interface {
	Send(*InitWalletReply) error
	grpc.ServerStream
}

type walletUnlockerInitWalletServer struct {
	grpc.ServerStream
}

func (x *walletUnlockerInitWalletServer) Send(m *InitWalletReply) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletUnlocker_UnlockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletUnlockerServer).UnlockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletUnlocker/UnlockWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletUnlockerServer).UnlockWallet(ctx, req.(*UnlockWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletUnlocker_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletUnlockerServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletUnlocker/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletUnlockerServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletUnlocker_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletUnlockerServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletUnlocker/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletUnlockerServer).IsReady(ctx, req.(*IsReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletUnlocker_ServiceDesc is the grpc.ServiceDesc for WalletUnlocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletUnlocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WalletUnlocker",
	HandlerType: (*WalletUnlockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenSeed",
			Handler:    _WalletUnlocker_GenSeed_Handler,
		},
		{
			MethodName: "UnlockWallet",
			Handler:    _WalletUnlocker_UnlockWallet_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _WalletUnlocker_ChangePassword_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _WalletUnlocker_IsReady_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitWallet",
			Handler:       _WalletUnlocker_InitWallet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "walletunlocker.proto",
}
