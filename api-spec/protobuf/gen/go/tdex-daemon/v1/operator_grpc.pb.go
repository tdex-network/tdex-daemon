// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tdex-daemon/v1/operator.proto

package tdex_daemonv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperatorServiceClient is the client API for OperatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorServiceClient interface {
	// Returns info about the internal wallet of the daemon.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Returns some new derived address(es) from the fee account.
	// This is only used to deposit some LBTC to subsidize blockchain fees.
	GetFeeAddress(ctx context.Context, in *GetFeeAddressRequest, opts ...grpc.CallOption) (*GetFeeAddressResponse, error)
	// Returns the list of all derived addresses for the fee account.
	ListFeeAddresses(ctx context.Context, in *ListFeeAddressesRequest, opts ...grpc.CallOption) (*ListFeeAddressesResponse, error)
	// Returns info about the balance of LBTC held in the fee account.
	GetFeeBalance(ctx context.Context, in *GetFeeBalanceRequest, opts ...grpc.CallOption) (*GetFeeBalanceResponse, error)
	// Allows to provide transaction(s) outpoints of deposits made to fund the fee account.
	// The transaction(s) must be already included in blockchain.
	ClaimFeeDeposits(ctx context.Context, in *ClaimFeeDepositsRequest, opts ...grpc.CallOption) (*ClaimFeeDepositsResponse, error)
	// Allows to withdraw funds from the fee account to a given address.
	WithdrawFee(ctx context.Context, in *WithdrawFeeRequest, opts ...grpc.CallOption) (*WithdrawFeeResponse, error)
	// Creates a new market account in the daemon's wallet.
	NewMarket(ctx context.Context, in *NewMarketRequest, opts ...grpc.CallOption) (*NewMarketResponse, error)
	GetMarketInfo(ctx context.Context, in *GetMarketInfoRequest, opts ...grpc.CallOption) (*GetMarketInfoResponse, error)
	// Returns some new derived address(es) for the given market.
	GetMarketAddress(ctx context.Context, in *GetMarketAddressRequest, opts ...grpc.CallOption) (*GetMarketAddressResponse, error)
	// Returns the list of all derived addresses for the given market.
	ListMarketAddresses(ctx context.Context, in *ListMarketAddressesRequest, opts ...grpc.CallOption) (*ListMarketAddressesResponse, error)
	// Returns info about the balance of the given market.
	GetMarketBalance(ctx context.Context, in *GetMarketBalanceRequest, opts ...grpc.CallOption) (*GetMarketBalanceResponse, error)
	// Allows to provide transaction(s) outpoints of deposits made to fund a market.
	// The transaction(s) provided must be already included in blockchain.
	ClaimMarketDeposits(ctx context.Context, in *ClaimMarketDepositsRequest, opts ...grpc.CallOption) (*ClaimMarketDepositsResponse, error)
	// Makes the given market tradable.
	OpenMarket(ctx context.Context, in *OpenMarketRequest, opts ...grpc.CallOption) (*OpenMarketResponse, error)
	// Makes the given market NOT tradabale.
	CloseMarket(ctx context.Context, in *CloseMarketRequest, opts ...grpc.CallOption) (*CloseMarketResponse, error)
	// Deletes a market.
	DropMarket(ctx context.Context, in *DropMarketRequest, opts ...grpc.CallOption) (*DropMarketResponse, error)
	// Displays a report of the colected fees for the given market.
	GetMarketCollectedSwapFees(ctx context.Context, in *GetMarketCollectedSwapFeesRequest, opts ...grpc.CallOption) (*GetMarketCollectedSwapFeesResponse, error)
	// Allows to withdraw funds from the given market to a given address.
	WithdrawMarket(ctx context.Context, in *WithdrawMarketRequest, opts ...grpc.CallOption) (*WithdrawMarketResponse, error)
	// Changes the Liquidity Provider percentage fee for the given market.
	UpdateMarketPercentageFee(ctx context.Context, in *UpdateMarketPercentageFeeRequest, opts ...grpc.CallOption) (*UpdateMarketPercentageFeeResponse, error)
	// Changes the Liquidity provider fixed fees for the given market.
	UpdateMarketFixedFee(ctx context.Context, in *UpdateMarketFixedFeeRequest, opts ...grpc.CallOption) (*UpdateMarketFixedFeeResponse, error)
	// Updates the price for the given market.
	UpdateMarketPrice(ctx context.Context, in *UpdateMarketPriceRequest, opts ...grpc.CallOption) (*UpdateMarketPriceResponse, error)
	// Updates the current market making strategy, either using an automated
	// market making formula or a pluggable price feed.
	UpdateMarketStrategy(ctx context.Context, in *UpdateMarketStrategyRequest, opts ...grpc.CallOption) (*UpdateMarketStrategyResponse, error)
	// Returns some new derived address(es) for the fee fragmenter account.
	GetFeeFragmenterAddress(ctx context.Context, in *GetFeeFragmenterAddressRequest, opts ...grpc.CallOption) (*GetFeeFragmenterAddressResponse, error)
	// Returns the list of all derived addresses for the fee fragmenter account.
	ListFeeFragmenterAddresses(ctx context.Context, in *ListFeeFragmenterAddressesRequest, opts ...grpc.CallOption) (*ListFeeFragmenterAddressesResponse, error)
	// Returns info about the balance of the fee fragmenter account.
	GetFeeFragmenterBalance(ctx context.Context, in *GetFeeFragmenterBalanceRequest, opts ...grpc.CallOption) (*GetFeeFragmenterBalanceResponse, error)
	// Splits the funds sent to the fee fragmenter account into multiple
	// fragments that then becomes deposits of the Fee account.
	FeeFragmenterSplitFunds(ctx context.Context, in *FeeFragmenterSplitFundsRequest, opts ...grpc.CallOption) (OperatorService_FeeFragmenterSplitFundsClient, error)
	// Allows to withdraw funds from the fee fragmenter account to a given address.
	WithdrawFeeFragmenter(ctx context.Context, in *WithdrawFeeFragmenterRequest, opts ...grpc.CallOption) (*WithdrawFeeFragmenterResponse, error)
	// Returns some new derived address(es) for the market fragmenter account.
	GetMarketFragmenterAddress(ctx context.Context, in *GetMarketFragmenterAddressRequest, opts ...grpc.CallOption) (*GetMarketFragmenterAddressResponse, error)
	// Returns the list of all derived addresses for the market fragmenter account.
	ListMarketFragmenterAddresses(ctx context.Context, in *ListMarketFragmenterAddressesRequest, opts ...grpc.CallOption) (*ListMarketFragmenterAddressesResponse, error)
	// Returns info about the balance of the market fragmenter account.
	GetMarketFragmenterBalance(ctx context.Context, in *GetMarketFragmenterBalanceRequest, opts ...grpc.CallOption) (*GetMarketFragmenterBalanceResponse, error)
	// Splits the funds sent to the market fragmenter account into multiple
	// fragments that then becomes deposits of the given market.
	MarketFragmenterSplitFunds(ctx context.Context, in *MarketFragmenterSplitFundsRequest, opts ...grpc.CallOption) (OperatorService_MarketFragmenterSplitFundsClient, error)
	// Allows to withdraw funds from the market fragmenter account to a given address.
	WithdrawMarketFragmenter(ctx context.Context, in *WithdrawMarketFragmenterRequest, opts ...grpc.CallOption) (*WithdrawMarketFragmenterResponse, error)
	// Get extended details for each market either open, closed or to be funded.
	ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error)
	// Returs all the trades processed by the daemon (ongoing, completed and
	// failed/rejected) or all those filtered by market.
	ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error)
	// Causes the daemon to re-sync the whole utxo set.
	ReloadUtxos(ctx context.Context, in *ReloadUtxosRequest, opts ...grpc.CallOption) (*ReloadUtxosResponse, error)
	// Returns all the utxos, whether unspents, spents or locked.
	ListUtxos(ctx context.Context, in *ListUtxosRequest, opts ...grpc.CallOption) (*ListUtxosResponse, error)
	// Adds a webhook registered for some kind of event.
	AddWebhook(ctx context.Context, in *AddWebhookRequest, opts ...grpc.CallOption) (*AddWebhookResponse, error)
	// Removes some previously added webhook.
	RemoveWebhook(ctx context.Context, in *RemoveWebhookRequest, opts ...grpc.CallOption) (*RemoveWebhookResponse, error)
	// Returns registered webhooks
	ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksResponse, error)
	// Returns the list of all claimed deposits for the given account.
	ListDeposits(ctx context.Context, in *ListDepositsRequest, opts ...grpc.CallOption) (*ListDepositsResponse, error)
	// Returns the list of all withdrawals made for the given account.
	ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error)
	// Returns info about volume and collected fees for specific time range
	GetMarketReport(ctx context.Context, in *GetMarketReportRequest, opts ...grpc.CallOption) (*GetMarketReportResponse, error)
}

type operatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorServiceClient(cc grpc.ClientConnInterface) OperatorServiceClient {
	return &operatorServiceClient{cc}
}

func (c *operatorServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetFeeAddress(ctx context.Context, in *GetFeeAddressRequest, opts ...grpc.CallOption) (*GetFeeAddressResponse, error) {
	out := new(GetFeeAddressResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetFeeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListFeeAddresses(ctx context.Context, in *ListFeeAddressesRequest, opts ...grpc.CallOption) (*ListFeeAddressesResponse, error) {
	out := new(ListFeeAddressesResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListFeeAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetFeeBalance(ctx context.Context, in *GetFeeBalanceRequest, opts ...grpc.CallOption) (*GetFeeBalanceResponse, error) {
	out := new(GetFeeBalanceResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetFeeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ClaimFeeDeposits(ctx context.Context, in *ClaimFeeDepositsRequest, opts ...grpc.CallOption) (*ClaimFeeDepositsResponse, error) {
	out := new(ClaimFeeDepositsResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ClaimFeeDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) WithdrawFee(ctx context.Context, in *WithdrawFeeRequest, opts ...grpc.CallOption) (*WithdrawFeeResponse, error) {
	out := new(WithdrawFeeResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/WithdrawFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) NewMarket(ctx context.Context, in *NewMarketRequest, opts ...grpc.CallOption) (*NewMarketResponse, error) {
	out := new(NewMarketResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/NewMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetMarketInfo(ctx context.Context, in *GetMarketInfoRequest, opts ...grpc.CallOption) (*GetMarketInfoResponse, error) {
	out := new(GetMarketInfoResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetMarketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetMarketAddress(ctx context.Context, in *GetMarketAddressRequest, opts ...grpc.CallOption) (*GetMarketAddressResponse, error) {
	out := new(GetMarketAddressResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetMarketAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListMarketAddresses(ctx context.Context, in *ListMarketAddressesRequest, opts ...grpc.CallOption) (*ListMarketAddressesResponse, error) {
	out := new(ListMarketAddressesResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListMarketAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetMarketBalance(ctx context.Context, in *GetMarketBalanceRequest, opts ...grpc.CallOption) (*GetMarketBalanceResponse, error) {
	out := new(GetMarketBalanceResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetMarketBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ClaimMarketDeposits(ctx context.Context, in *ClaimMarketDepositsRequest, opts ...grpc.CallOption) (*ClaimMarketDepositsResponse, error) {
	out := new(ClaimMarketDepositsResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ClaimMarketDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) OpenMarket(ctx context.Context, in *OpenMarketRequest, opts ...grpc.CallOption) (*OpenMarketResponse, error) {
	out := new(OpenMarketResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/OpenMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) CloseMarket(ctx context.Context, in *CloseMarketRequest, opts ...grpc.CallOption) (*CloseMarketResponse, error) {
	out := new(CloseMarketResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/CloseMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) DropMarket(ctx context.Context, in *DropMarketRequest, opts ...grpc.CallOption) (*DropMarketResponse, error) {
	out := new(DropMarketResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/DropMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetMarketCollectedSwapFees(ctx context.Context, in *GetMarketCollectedSwapFeesRequest, opts ...grpc.CallOption) (*GetMarketCollectedSwapFeesResponse, error) {
	out := new(GetMarketCollectedSwapFeesResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetMarketCollectedSwapFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) WithdrawMarket(ctx context.Context, in *WithdrawMarketRequest, opts ...grpc.CallOption) (*WithdrawMarketResponse, error) {
	out := new(WithdrawMarketResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/WithdrawMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) UpdateMarketPercentageFee(ctx context.Context, in *UpdateMarketPercentageFeeRequest, opts ...grpc.CallOption) (*UpdateMarketPercentageFeeResponse, error) {
	out := new(UpdateMarketPercentageFeeResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/UpdateMarketPercentageFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) UpdateMarketFixedFee(ctx context.Context, in *UpdateMarketFixedFeeRequest, opts ...grpc.CallOption) (*UpdateMarketFixedFeeResponse, error) {
	out := new(UpdateMarketFixedFeeResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/UpdateMarketFixedFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) UpdateMarketPrice(ctx context.Context, in *UpdateMarketPriceRequest, opts ...grpc.CallOption) (*UpdateMarketPriceResponse, error) {
	out := new(UpdateMarketPriceResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/UpdateMarketPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) UpdateMarketStrategy(ctx context.Context, in *UpdateMarketStrategyRequest, opts ...grpc.CallOption) (*UpdateMarketStrategyResponse, error) {
	out := new(UpdateMarketStrategyResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/UpdateMarketStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetFeeFragmenterAddress(ctx context.Context, in *GetFeeFragmenterAddressRequest, opts ...grpc.CallOption) (*GetFeeFragmenterAddressResponse, error) {
	out := new(GetFeeFragmenterAddressResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetFeeFragmenterAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListFeeFragmenterAddresses(ctx context.Context, in *ListFeeFragmenterAddressesRequest, opts ...grpc.CallOption) (*ListFeeFragmenterAddressesResponse, error) {
	out := new(ListFeeFragmenterAddressesResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListFeeFragmenterAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetFeeFragmenterBalance(ctx context.Context, in *GetFeeFragmenterBalanceRequest, opts ...grpc.CallOption) (*GetFeeFragmenterBalanceResponse, error) {
	out := new(GetFeeFragmenterBalanceResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetFeeFragmenterBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) FeeFragmenterSplitFunds(ctx context.Context, in *FeeFragmenterSplitFundsRequest, opts ...grpc.CallOption) (OperatorService_FeeFragmenterSplitFundsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[0], "/tdex_daemon.v1.OperatorService/FeeFragmenterSplitFunds", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorServiceFeeFragmenterSplitFundsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperatorService_FeeFragmenterSplitFundsClient interface {
	Recv() (*FeeFragmenterSplitFundsResponse, error)
	grpc.ClientStream
}

type operatorServiceFeeFragmenterSplitFundsClient struct {
	grpc.ClientStream
}

func (x *operatorServiceFeeFragmenterSplitFundsClient) Recv() (*FeeFragmenterSplitFundsResponse, error) {
	m := new(FeeFragmenterSplitFundsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operatorServiceClient) WithdrawFeeFragmenter(ctx context.Context, in *WithdrawFeeFragmenterRequest, opts ...grpc.CallOption) (*WithdrawFeeFragmenterResponse, error) {
	out := new(WithdrawFeeFragmenterResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/WithdrawFeeFragmenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetMarketFragmenterAddress(ctx context.Context, in *GetMarketFragmenterAddressRequest, opts ...grpc.CallOption) (*GetMarketFragmenterAddressResponse, error) {
	out := new(GetMarketFragmenterAddressResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetMarketFragmenterAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListMarketFragmenterAddresses(ctx context.Context, in *ListMarketFragmenterAddressesRequest, opts ...grpc.CallOption) (*ListMarketFragmenterAddressesResponse, error) {
	out := new(ListMarketFragmenterAddressesResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListMarketFragmenterAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetMarketFragmenterBalance(ctx context.Context, in *GetMarketFragmenterBalanceRequest, opts ...grpc.CallOption) (*GetMarketFragmenterBalanceResponse, error) {
	out := new(GetMarketFragmenterBalanceResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetMarketFragmenterBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) MarketFragmenterSplitFunds(ctx context.Context, in *MarketFragmenterSplitFundsRequest, opts ...grpc.CallOption) (OperatorService_MarketFragmenterSplitFundsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[1], "/tdex_daemon.v1.OperatorService/MarketFragmenterSplitFunds", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorServiceMarketFragmenterSplitFundsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperatorService_MarketFragmenterSplitFundsClient interface {
	Recv() (*MarketFragmenterSplitFundsResponse, error)
	grpc.ClientStream
}

type operatorServiceMarketFragmenterSplitFundsClient struct {
	grpc.ClientStream
}

func (x *operatorServiceMarketFragmenterSplitFundsClient) Recv() (*MarketFragmenterSplitFundsResponse, error) {
	m := new(MarketFragmenterSplitFundsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operatorServiceClient) WithdrawMarketFragmenter(ctx context.Context, in *WithdrawMarketFragmenterRequest, opts ...grpc.CallOption) (*WithdrawMarketFragmenterResponse, error) {
	out := new(WithdrawMarketFragmenterResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/WithdrawMarketFragmenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error) {
	out := new(ListMarketsResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error) {
	out := new(ListTradesResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ReloadUtxos(ctx context.Context, in *ReloadUtxosRequest, opts ...grpc.CallOption) (*ReloadUtxosResponse, error) {
	out := new(ReloadUtxosResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ReloadUtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListUtxos(ctx context.Context, in *ListUtxosRequest, opts ...grpc.CallOption) (*ListUtxosResponse, error) {
	out := new(ListUtxosResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListUtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) AddWebhook(ctx context.Context, in *AddWebhookRequest, opts ...grpc.CallOption) (*AddWebhookResponse, error) {
	out := new(AddWebhookResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/AddWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) RemoveWebhook(ctx context.Context, in *RemoveWebhookRequest, opts ...grpc.CallOption) (*RemoveWebhookResponse, error) {
	out := new(RemoveWebhookResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/RemoveWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksResponse, error) {
	out := new(ListWebhooksResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListDeposits(ctx context.Context, in *ListDepositsRequest, opts ...grpc.CallOption) (*ListDepositsResponse, error) {
	out := new(ListDepositsResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error) {
	out := new(ListWithdrawalsResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/ListWithdrawals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetMarketReport(ctx context.Context, in *GetMarketReportRequest, opts ...grpc.CallOption) (*GetMarketReportResponse, error) {
	out := new(GetMarketReportResponse)
	err := c.cc.Invoke(ctx, "/tdex_daemon.v1.OperatorService/GetMarketReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServiceServer is the server API for OperatorService service.
// All implementations should embed UnimplementedOperatorServiceServer
// for forward compatibility
type OperatorServiceServer interface {
	// Returns info about the internal wallet of the daemon.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Returns some new derived address(es) from the fee account.
	// This is only used to deposit some LBTC to subsidize blockchain fees.
	GetFeeAddress(context.Context, *GetFeeAddressRequest) (*GetFeeAddressResponse, error)
	// Returns the list of all derived addresses for the fee account.
	ListFeeAddresses(context.Context, *ListFeeAddressesRequest) (*ListFeeAddressesResponse, error)
	// Returns info about the balance of LBTC held in the fee account.
	GetFeeBalance(context.Context, *GetFeeBalanceRequest) (*GetFeeBalanceResponse, error)
	// Allows to provide transaction(s) outpoints of deposits made to fund the fee account.
	// The transaction(s) must be already included in blockchain.
	ClaimFeeDeposits(context.Context, *ClaimFeeDepositsRequest) (*ClaimFeeDepositsResponse, error)
	// Allows to withdraw funds from the fee account to a given address.
	WithdrawFee(context.Context, *WithdrawFeeRequest) (*WithdrawFeeResponse, error)
	// Creates a new market account in the daemon's wallet.
	NewMarket(context.Context, *NewMarketRequest) (*NewMarketResponse, error)
	GetMarketInfo(context.Context, *GetMarketInfoRequest) (*GetMarketInfoResponse, error)
	// Returns some new derived address(es) for the given market.
	GetMarketAddress(context.Context, *GetMarketAddressRequest) (*GetMarketAddressResponse, error)
	// Returns the list of all derived addresses for the given market.
	ListMarketAddresses(context.Context, *ListMarketAddressesRequest) (*ListMarketAddressesResponse, error)
	// Returns info about the balance of the given market.
	GetMarketBalance(context.Context, *GetMarketBalanceRequest) (*GetMarketBalanceResponse, error)
	// Allows to provide transaction(s) outpoints of deposits made to fund a market.
	// The transaction(s) provided must be already included in blockchain.
	ClaimMarketDeposits(context.Context, *ClaimMarketDepositsRequest) (*ClaimMarketDepositsResponse, error)
	// Makes the given market tradable.
	OpenMarket(context.Context, *OpenMarketRequest) (*OpenMarketResponse, error)
	// Makes the given market NOT tradabale.
	CloseMarket(context.Context, *CloseMarketRequest) (*CloseMarketResponse, error)
	// Deletes a market.
	DropMarket(context.Context, *DropMarketRequest) (*DropMarketResponse, error)
	// Displays a report of the colected fees for the given market.
	GetMarketCollectedSwapFees(context.Context, *GetMarketCollectedSwapFeesRequest) (*GetMarketCollectedSwapFeesResponse, error)
	// Allows to withdraw funds from the given market to a given address.
	WithdrawMarket(context.Context, *WithdrawMarketRequest) (*WithdrawMarketResponse, error)
	// Changes the Liquidity Provider percentage fee for the given market.
	UpdateMarketPercentageFee(context.Context, *UpdateMarketPercentageFeeRequest) (*UpdateMarketPercentageFeeResponse, error)
	// Changes the Liquidity provider fixed fees for the given market.
	UpdateMarketFixedFee(context.Context, *UpdateMarketFixedFeeRequest) (*UpdateMarketFixedFeeResponse, error)
	// Updates the price for the given market.
	UpdateMarketPrice(context.Context, *UpdateMarketPriceRequest) (*UpdateMarketPriceResponse, error)
	// Updates the current market making strategy, either using an automated
	// market making formula or a pluggable price feed.
	UpdateMarketStrategy(context.Context, *UpdateMarketStrategyRequest) (*UpdateMarketStrategyResponse, error)
	// Returns some new derived address(es) for the fee fragmenter account.
	GetFeeFragmenterAddress(context.Context, *GetFeeFragmenterAddressRequest) (*GetFeeFragmenterAddressResponse, error)
	// Returns the list of all derived addresses for the fee fragmenter account.
	ListFeeFragmenterAddresses(context.Context, *ListFeeFragmenterAddressesRequest) (*ListFeeFragmenterAddressesResponse, error)
	// Returns info about the balance of the fee fragmenter account.
	GetFeeFragmenterBalance(context.Context, *GetFeeFragmenterBalanceRequest) (*GetFeeFragmenterBalanceResponse, error)
	// Splits the funds sent to the fee fragmenter account into multiple
	// fragments that then becomes deposits of the Fee account.
	FeeFragmenterSplitFunds(*FeeFragmenterSplitFundsRequest, OperatorService_FeeFragmenterSplitFundsServer) error
	// Allows to withdraw funds from the fee fragmenter account to a given address.
	WithdrawFeeFragmenter(context.Context, *WithdrawFeeFragmenterRequest) (*WithdrawFeeFragmenterResponse, error)
	// Returns some new derived address(es) for the market fragmenter account.
	GetMarketFragmenterAddress(context.Context, *GetMarketFragmenterAddressRequest) (*GetMarketFragmenterAddressResponse, error)
	// Returns the list of all derived addresses for the market fragmenter account.
	ListMarketFragmenterAddresses(context.Context, *ListMarketFragmenterAddressesRequest) (*ListMarketFragmenterAddressesResponse, error)
	// Returns info about the balance of the market fragmenter account.
	GetMarketFragmenterBalance(context.Context, *GetMarketFragmenterBalanceRequest) (*GetMarketFragmenterBalanceResponse, error)
	// Splits the funds sent to the market fragmenter account into multiple
	// fragments that then becomes deposits of the given market.
	MarketFragmenterSplitFunds(*MarketFragmenterSplitFundsRequest, OperatorService_MarketFragmenterSplitFundsServer) error
	// Allows to withdraw funds from the market fragmenter account to a given address.
	WithdrawMarketFragmenter(context.Context, *WithdrawMarketFragmenterRequest) (*WithdrawMarketFragmenterResponse, error)
	// Get extended details for each market either open, closed or to be funded.
	ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error)
	// Returs all the trades processed by the daemon (ongoing, completed and
	// failed/rejected) or all those filtered by market.
	ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error)
	// Causes the daemon to re-sync the whole utxo set.
	ReloadUtxos(context.Context, *ReloadUtxosRequest) (*ReloadUtxosResponse, error)
	// Returns all the utxos, whether unspents, spents or locked.
	ListUtxos(context.Context, *ListUtxosRequest) (*ListUtxosResponse, error)
	// Adds a webhook registered for some kind of event.
	AddWebhook(context.Context, *AddWebhookRequest) (*AddWebhookResponse, error)
	// Removes some previously added webhook.
	RemoveWebhook(context.Context, *RemoveWebhookRequest) (*RemoveWebhookResponse, error)
	// Returns registered webhooks
	ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksResponse, error)
	// Returns the list of all claimed deposits for the given account.
	ListDeposits(context.Context, *ListDepositsRequest) (*ListDepositsResponse, error)
	// Returns the list of all withdrawals made for the given account.
	ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error)
	// Returns info about volume and collected fees for specific time range
	GetMarketReport(context.Context, *GetMarketReportRequest) (*GetMarketReportResponse, error)
}

// UnimplementedOperatorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOperatorServiceServer struct {
}

func (UnimplementedOperatorServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedOperatorServiceServer) GetFeeAddress(context.Context, *GetFeeAddressRequest) (*GetFeeAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeAddress not implemented")
}
func (UnimplementedOperatorServiceServer) ListFeeAddresses(context.Context, *ListFeeAddressesRequest) (*ListFeeAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeeAddresses not implemented")
}
func (UnimplementedOperatorServiceServer) GetFeeBalance(context.Context, *GetFeeBalanceRequest) (*GetFeeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeBalance not implemented")
}
func (UnimplementedOperatorServiceServer) ClaimFeeDeposits(context.Context, *ClaimFeeDepositsRequest) (*ClaimFeeDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimFeeDeposits not implemented")
}
func (UnimplementedOperatorServiceServer) WithdrawFee(context.Context, *WithdrawFeeRequest) (*WithdrawFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFee not implemented")
}
func (UnimplementedOperatorServiceServer) NewMarket(context.Context, *NewMarketRequest) (*NewMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMarket not implemented")
}
func (UnimplementedOperatorServiceServer) GetMarketInfo(context.Context, *GetMarketInfoRequest) (*GetMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketInfo not implemented")
}
func (UnimplementedOperatorServiceServer) GetMarketAddress(context.Context, *GetMarketAddressRequest) (*GetMarketAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketAddress not implemented")
}
func (UnimplementedOperatorServiceServer) ListMarketAddresses(context.Context, *ListMarketAddressesRequest) (*ListMarketAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarketAddresses not implemented")
}
func (UnimplementedOperatorServiceServer) GetMarketBalance(context.Context, *GetMarketBalanceRequest) (*GetMarketBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketBalance not implemented")
}
func (UnimplementedOperatorServiceServer) ClaimMarketDeposits(context.Context, *ClaimMarketDepositsRequest) (*ClaimMarketDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMarketDeposits not implemented")
}
func (UnimplementedOperatorServiceServer) OpenMarket(context.Context, *OpenMarketRequest) (*OpenMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenMarket not implemented")
}
func (UnimplementedOperatorServiceServer) CloseMarket(context.Context, *CloseMarketRequest) (*CloseMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMarket not implemented")
}
func (UnimplementedOperatorServiceServer) DropMarket(context.Context, *DropMarketRequest) (*DropMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropMarket not implemented")
}
func (UnimplementedOperatorServiceServer) GetMarketCollectedSwapFees(context.Context, *GetMarketCollectedSwapFeesRequest) (*GetMarketCollectedSwapFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketCollectedSwapFees not implemented")
}
func (UnimplementedOperatorServiceServer) WithdrawMarket(context.Context, *WithdrawMarketRequest) (*WithdrawMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawMarket not implemented")
}
func (UnimplementedOperatorServiceServer) UpdateMarketPercentageFee(context.Context, *UpdateMarketPercentageFeeRequest) (*UpdateMarketPercentageFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarketPercentageFee not implemented")
}
func (UnimplementedOperatorServiceServer) UpdateMarketFixedFee(context.Context, *UpdateMarketFixedFeeRequest) (*UpdateMarketFixedFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarketFixedFee not implemented")
}
func (UnimplementedOperatorServiceServer) UpdateMarketPrice(context.Context, *UpdateMarketPriceRequest) (*UpdateMarketPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarketPrice not implemented")
}
func (UnimplementedOperatorServiceServer) UpdateMarketStrategy(context.Context, *UpdateMarketStrategyRequest) (*UpdateMarketStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarketStrategy not implemented")
}
func (UnimplementedOperatorServiceServer) GetFeeFragmenterAddress(context.Context, *GetFeeFragmenterAddressRequest) (*GetFeeFragmenterAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeFragmenterAddress not implemented")
}
func (UnimplementedOperatorServiceServer) ListFeeFragmenterAddresses(context.Context, *ListFeeFragmenterAddressesRequest) (*ListFeeFragmenterAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeeFragmenterAddresses not implemented")
}
func (UnimplementedOperatorServiceServer) GetFeeFragmenterBalance(context.Context, *GetFeeFragmenterBalanceRequest) (*GetFeeFragmenterBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeFragmenterBalance not implemented")
}
func (UnimplementedOperatorServiceServer) FeeFragmenterSplitFunds(*FeeFragmenterSplitFundsRequest, OperatorService_FeeFragmenterSplitFundsServer) error {
	return status.Errorf(codes.Unimplemented, "method FeeFragmenterSplitFunds not implemented")
}
func (UnimplementedOperatorServiceServer) WithdrawFeeFragmenter(context.Context, *WithdrawFeeFragmenterRequest) (*WithdrawFeeFragmenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFeeFragmenter not implemented")
}
func (UnimplementedOperatorServiceServer) GetMarketFragmenterAddress(context.Context, *GetMarketFragmenterAddressRequest) (*GetMarketFragmenterAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketFragmenterAddress not implemented")
}
func (UnimplementedOperatorServiceServer) ListMarketFragmenterAddresses(context.Context, *ListMarketFragmenterAddressesRequest) (*ListMarketFragmenterAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarketFragmenterAddresses not implemented")
}
func (UnimplementedOperatorServiceServer) GetMarketFragmenterBalance(context.Context, *GetMarketFragmenterBalanceRequest) (*GetMarketFragmenterBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketFragmenterBalance not implemented")
}
func (UnimplementedOperatorServiceServer) MarketFragmenterSplitFunds(*MarketFragmenterSplitFundsRequest, OperatorService_MarketFragmenterSplitFundsServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketFragmenterSplitFunds not implemented")
}
func (UnimplementedOperatorServiceServer) WithdrawMarketFragmenter(context.Context, *WithdrawMarketFragmenterRequest) (*WithdrawMarketFragmenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawMarketFragmenter not implemented")
}
func (UnimplementedOperatorServiceServer) ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarkets not implemented")
}
func (UnimplementedOperatorServiceServer) ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrades not implemented")
}
func (UnimplementedOperatorServiceServer) ReloadUtxos(context.Context, *ReloadUtxosRequest) (*ReloadUtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadUtxos not implemented")
}
func (UnimplementedOperatorServiceServer) ListUtxos(context.Context, *ListUtxosRequest) (*ListUtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUtxos not implemented")
}
func (UnimplementedOperatorServiceServer) AddWebhook(context.Context, *AddWebhookRequest) (*AddWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWebhook not implemented")
}
func (UnimplementedOperatorServiceServer) RemoveWebhook(context.Context, *RemoveWebhookRequest) (*RemoveWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWebhook not implemented")
}
func (UnimplementedOperatorServiceServer) ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (UnimplementedOperatorServiceServer) ListDeposits(context.Context, *ListDepositsRequest) (*ListDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeposits not implemented")
}
func (UnimplementedOperatorServiceServer) ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawals not implemented")
}
func (UnimplementedOperatorServiceServer) GetMarketReport(context.Context, *GetMarketReportRequest) (*GetMarketReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketReport not implemented")
}

// UnsafeOperatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServiceServer will
// result in compilation errors.
type UnsafeOperatorServiceServer interface {
	mustEmbedUnimplementedOperatorServiceServer()
}

func RegisterOperatorServiceServer(s grpc.ServiceRegistrar, srv OperatorServiceServer) {
	s.RegisterService(&OperatorService_ServiceDesc, srv)
}

func _OperatorService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetFeeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetFeeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetFeeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetFeeAddress(ctx, req.(*GetFeeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListFeeAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeeAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListFeeAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListFeeAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListFeeAddresses(ctx, req.(*ListFeeAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetFeeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetFeeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetFeeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetFeeBalance(ctx, req.(*GetFeeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ClaimFeeDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimFeeDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ClaimFeeDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ClaimFeeDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ClaimFeeDeposits(ctx, req.(*ClaimFeeDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_WithdrawFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).WithdrawFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/WithdrawFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).WithdrawFee(ctx, req.(*WithdrawFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_NewMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).NewMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/NewMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).NewMarket(ctx, req.(*NewMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetMarketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetMarketInfo(ctx, req.(*GetMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetMarketAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetMarketAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetMarketAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetMarketAddress(ctx, req.(*GetMarketAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListMarketAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListMarketAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListMarketAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListMarketAddresses(ctx, req.(*ListMarketAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetMarketBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetMarketBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetMarketBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetMarketBalance(ctx, req.(*GetMarketBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ClaimMarketDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimMarketDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ClaimMarketDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ClaimMarketDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ClaimMarketDeposits(ctx, req.(*ClaimMarketDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_OpenMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).OpenMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/OpenMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).OpenMarket(ctx, req.(*OpenMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_CloseMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).CloseMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/CloseMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).CloseMarket(ctx, req.(*CloseMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_DropMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).DropMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/DropMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).DropMarket(ctx, req.(*DropMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetMarketCollectedSwapFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketCollectedSwapFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetMarketCollectedSwapFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetMarketCollectedSwapFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetMarketCollectedSwapFees(ctx, req.(*GetMarketCollectedSwapFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_WithdrawMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).WithdrawMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/WithdrawMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).WithdrawMarket(ctx, req.(*WithdrawMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_UpdateMarketPercentageFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarketPercentageFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).UpdateMarketPercentageFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/UpdateMarketPercentageFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).UpdateMarketPercentageFee(ctx, req.(*UpdateMarketPercentageFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_UpdateMarketFixedFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarketFixedFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).UpdateMarketFixedFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/UpdateMarketFixedFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).UpdateMarketFixedFee(ctx, req.(*UpdateMarketFixedFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_UpdateMarketPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).UpdateMarketPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/UpdateMarketPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).UpdateMarketPrice(ctx, req.(*UpdateMarketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_UpdateMarketStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarketStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).UpdateMarketStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/UpdateMarketStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).UpdateMarketStrategy(ctx, req.(*UpdateMarketStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetFeeFragmenterAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeFragmenterAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetFeeFragmenterAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetFeeFragmenterAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetFeeFragmenterAddress(ctx, req.(*GetFeeFragmenterAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListFeeFragmenterAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeeFragmenterAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListFeeFragmenterAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListFeeFragmenterAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListFeeFragmenterAddresses(ctx, req.(*ListFeeFragmenterAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetFeeFragmenterBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeFragmenterBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetFeeFragmenterBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetFeeFragmenterBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetFeeFragmenterBalance(ctx, req.(*GetFeeFragmenterBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_FeeFragmenterSplitFunds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeeFragmenterSplitFundsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).FeeFragmenterSplitFunds(m, &operatorServiceFeeFragmenterSplitFundsServer{stream})
}

type OperatorService_FeeFragmenterSplitFundsServer interface {
	Send(*FeeFragmenterSplitFundsResponse) error
	grpc.ServerStream
}

type operatorServiceFeeFragmenterSplitFundsServer struct {
	grpc.ServerStream
}

func (x *operatorServiceFeeFragmenterSplitFundsServer) Send(m *FeeFragmenterSplitFundsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OperatorService_WithdrawFeeFragmenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawFeeFragmenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).WithdrawFeeFragmenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/WithdrawFeeFragmenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).WithdrawFeeFragmenter(ctx, req.(*WithdrawFeeFragmenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetMarketFragmenterAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketFragmenterAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetMarketFragmenterAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetMarketFragmenterAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetMarketFragmenterAddress(ctx, req.(*GetMarketFragmenterAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListMarketFragmenterAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketFragmenterAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListMarketFragmenterAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListMarketFragmenterAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListMarketFragmenterAddresses(ctx, req.(*ListMarketFragmenterAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetMarketFragmenterBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketFragmenterBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetMarketFragmenterBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetMarketFragmenterBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetMarketFragmenterBalance(ctx, req.(*GetMarketFragmenterBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_MarketFragmenterSplitFunds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketFragmenterSplitFundsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).MarketFragmenterSplitFunds(m, &operatorServiceMarketFragmenterSplitFundsServer{stream})
}

type OperatorService_MarketFragmenterSplitFundsServer interface {
	Send(*MarketFragmenterSplitFundsResponse) error
	grpc.ServerStream
}

type operatorServiceMarketFragmenterSplitFundsServer struct {
	grpc.ServerStream
}

func (x *operatorServiceMarketFragmenterSplitFundsServer) Send(m *MarketFragmenterSplitFundsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OperatorService_WithdrawMarketFragmenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawMarketFragmenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).WithdrawMarketFragmenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/WithdrawMarketFragmenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).WithdrawMarketFragmenter(ctx, req.(*WithdrawMarketFragmenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListMarkets(ctx, req.(*ListMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListTrades(ctx, req.(*ListTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ReloadUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ReloadUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ReloadUtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ReloadUtxos(ctx, req.(*ReloadUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListUtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListUtxos(ctx, req.(*ListUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_AddWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).AddWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/AddWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).AddWebhook(ctx, req.(*AddWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_RemoveWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).RemoveWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/RemoveWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).RemoveWebhook(ctx, req.(*RemoveWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListWebhooks(ctx, req.(*ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListDeposits(ctx, req.(*ListDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/ListWithdrawals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListWithdrawals(ctx, req.(*ListWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetMarketReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetMarketReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex_daemon.v1.OperatorService/GetMarketReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetMarketReport(ctx, req.(*GetMarketReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatorService_ServiceDesc is the grpc.ServiceDesc for OperatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tdex_daemon.v1.OperatorService",
	HandlerType: (*OperatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _OperatorService_GetInfo_Handler,
		},
		{
			MethodName: "GetFeeAddress",
			Handler:    _OperatorService_GetFeeAddress_Handler,
		},
		{
			MethodName: "ListFeeAddresses",
			Handler:    _OperatorService_ListFeeAddresses_Handler,
		},
		{
			MethodName: "GetFeeBalance",
			Handler:    _OperatorService_GetFeeBalance_Handler,
		},
		{
			MethodName: "ClaimFeeDeposits",
			Handler:    _OperatorService_ClaimFeeDeposits_Handler,
		},
		{
			MethodName: "WithdrawFee",
			Handler:    _OperatorService_WithdrawFee_Handler,
		},
		{
			MethodName: "NewMarket",
			Handler:    _OperatorService_NewMarket_Handler,
		},
		{
			MethodName: "GetMarketInfo",
			Handler:    _OperatorService_GetMarketInfo_Handler,
		},
		{
			MethodName: "GetMarketAddress",
			Handler:    _OperatorService_GetMarketAddress_Handler,
		},
		{
			MethodName: "ListMarketAddresses",
			Handler:    _OperatorService_ListMarketAddresses_Handler,
		},
		{
			MethodName: "GetMarketBalance",
			Handler:    _OperatorService_GetMarketBalance_Handler,
		},
		{
			MethodName: "ClaimMarketDeposits",
			Handler:    _OperatorService_ClaimMarketDeposits_Handler,
		},
		{
			MethodName: "OpenMarket",
			Handler:    _OperatorService_OpenMarket_Handler,
		},
		{
			MethodName: "CloseMarket",
			Handler:    _OperatorService_CloseMarket_Handler,
		},
		{
			MethodName: "DropMarket",
			Handler:    _OperatorService_DropMarket_Handler,
		},
		{
			MethodName: "GetMarketCollectedSwapFees",
			Handler:    _OperatorService_GetMarketCollectedSwapFees_Handler,
		},
		{
			MethodName: "WithdrawMarket",
			Handler:    _OperatorService_WithdrawMarket_Handler,
		},
		{
			MethodName: "UpdateMarketPercentageFee",
			Handler:    _OperatorService_UpdateMarketPercentageFee_Handler,
		},
		{
			MethodName: "UpdateMarketFixedFee",
			Handler:    _OperatorService_UpdateMarketFixedFee_Handler,
		},
		{
			MethodName: "UpdateMarketPrice",
			Handler:    _OperatorService_UpdateMarketPrice_Handler,
		},
		{
			MethodName: "UpdateMarketStrategy",
			Handler:    _OperatorService_UpdateMarketStrategy_Handler,
		},
		{
			MethodName: "GetFeeFragmenterAddress",
			Handler:    _OperatorService_GetFeeFragmenterAddress_Handler,
		},
		{
			MethodName: "ListFeeFragmenterAddresses",
			Handler:    _OperatorService_ListFeeFragmenterAddresses_Handler,
		},
		{
			MethodName: "GetFeeFragmenterBalance",
			Handler:    _OperatorService_GetFeeFragmenterBalance_Handler,
		},
		{
			MethodName: "WithdrawFeeFragmenter",
			Handler:    _OperatorService_WithdrawFeeFragmenter_Handler,
		},
		{
			MethodName: "GetMarketFragmenterAddress",
			Handler:    _OperatorService_GetMarketFragmenterAddress_Handler,
		},
		{
			MethodName: "ListMarketFragmenterAddresses",
			Handler:    _OperatorService_ListMarketFragmenterAddresses_Handler,
		},
		{
			MethodName: "GetMarketFragmenterBalance",
			Handler:    _OperatorService_GetMarketFragmenterBalance_Handler,
		},
		{
			MethodName: "WithdrawMarketFragmenter",
			Handler:    _OperatorService_WithdrawMarketFragmenter_Handler,
		},
		{
			MethodName: "ListMarkets",
			Handler:    _OperatorService_ListMarkets_Handler,
		},
		{
			MethodName: "ListTrades",
			Handler:    _OperatorService_ListTrades_Handler,
		},
		{
			MethodName: "ReloadUtxos",
			Handler:    _OperatorService_ReloadUtxos_Handler,
		},
		{
			MethodName: "ListUtxos",
			Handler:    _OperatorService_ListUtxos_Handler,
		},
		{
			MethodName: "AddWebhook",
			Handler:    _OperatorService_AddWebhook_Handler,
		},
		{
			MethodName: "RemoveWebhook",
			Handler:    _OperatorService_RemoveWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _OperatorService_ListWebhooks_Handler,
		},
		{
			MethodName: "ListDeposits",
			Handler:    _OperatorService_ListDeposits_Handler,
		},
		{
			MethodName: "ListWithdrawals",
			Handler:    _OperatorService_ListWithdrawals_Handler,
		},
		{
			MethodName: "GetMarketReport",
			Handler:    _OperatorService_GetMarketReport_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FeeFragmenterSplitFunds",
			Handler:       _OperatorService_FeeFragmenterSplitFunds_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketFragmenterSplitFunds",
			Handler:       _OperatorService_MarketFragmenterSplitFunds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tdex-daemon/v1/operator.proto",
}
