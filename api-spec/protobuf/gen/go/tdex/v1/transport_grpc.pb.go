// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tdex/v1/transport.proto

package tdexv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportServiceClient is the client API for TransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportServiceClient interface {
	SupportedContentTypes(ctx context.Context, in *SupportedContentTypesRequest, opts ...grpc.CallOption) (*SupportedContentTypesResponse, error)
}

type transportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportServiceClient(cc grpc.ClientConnInterface) TransportServiceClient {
	return &transportServiceClient{cc}
}

func (c *transportServiceClient) SupportedContentTypes(ctx context.Context, in *SupportedContentTypesRequest, opts ...grpc.CallOption) (*SupportedContentTypesResponse, error) {
	out := new(SupportedContentTypesResponse)
	err := c.cc.Invoke(ctx, "/tdex.v1.TransportService/SupportedContentTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServiceServer is the server API for TransportService service.
// All implementations should embed UnimplementedTransportServiceServer
// for forward compatibility
type TransportServiceServer interface {
	SupportedContentTypes(context.Context, *SupportedContentTypesRequest) (*SupportedContentTypesResponse, error)
}

// UnimplementedTransportServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransportServiceServer struct {
}

func (UnimplementedTransportServiceServer) SupportedContentTypes(context.Context, *SupportedContentTypesRequest) (*SupportedContentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedContentTypes not implemented")
}

// UnsafeTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServiceServer will
// result in compilation errors.
type UnsafeTransportServiceServer interface {
	mustEmbedUnimplementedTransportServiceServer()
}

func RegisterTransportServiceServer(s grpc.ServiceRegistrar, srv TransportServiceServer) {
	s.RegisterService(&TransportService_ServiceDesc, srv)
}

func _TransportService_SupportedContentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedContentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).SupportedContentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdex.v1.TransportService/SupportedContentTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).SupportedContentTypes(ctx, req.(*SupportedContentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportService_ServiceDesc is the grpc.ServiceDesc for TransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tdex.v1.TransportService",
	HandlerType: (*TransportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupportedContentTypes",
			Handler:    _TransportService_SupportedContentTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tdex/v1/transport.proto",
}
