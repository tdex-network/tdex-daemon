// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: tdex/v1/trade.proto

package tdexv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeType int32

const (
	TradeType_BUY  TradeType = 0
	TradeType_SELL TradeType = 1
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	TradeType_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_tdex_v1_trade_proto_enumTypes[0].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_tdex_v1_trade_proto_enumTypes[0]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{0}
}

// BOTD#4 Service's messages
type MarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarketsRequest) Reset() {
	*x = MarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsRequest) ProtoMessage() {}

func (x *MarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsRequest.ProtoReflect.Descriptor instead.
func (*MarketsRequest) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{0}
}

type MarketsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markets []*MarketWithFee `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *MarketsReply) Reset() {
	*x = MarketsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsReply) ProtoMessage() {}

func (x *MarketsReply) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsReply.ProtoReflect.Descriptor instead.
func (*MarketsReply) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{1}
}

func (x *MarketsReply) GetMarkets() []*MarketWithFee {
	if x != nil {
		return x.Markets
	}
	return nil
}

type BalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *BalancesRequest) Reset() {
	*x = BalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancesRequest) ProtoMessage() {}

func (x *BalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancesRequest.ProtoReflect.Descriptor instead.
func (*BalancesRequest) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{2}
}

func (x *BalancesRequest) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type BalancesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*BalanceWithFee `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *BalancesReply) Reset() {
	*x = BalancesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancesReply) ProtoMessage() {}

func (x *BalancesReply) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancesReply.ProtoReflect.Descriptor instead.
func (*BalancesReply) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{3}
}

func (x *BalancesReply) GetBalances() []*BalanceWithFee {
	if x != nil {
		return x.Balances
	}
	return nil
}

type MarketPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *Market   `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Type   TradeType `protobuf:"varint,2,opt,name=type,proto3,enum=tdex.v1.TradeType" json:"type,omitempty"`
	Amount uint64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Asset  string    `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *MarketPriceRequest) Reset() {
	*x = MarketPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceRequest) ProtoMessage() {}

func (x *MarketPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceRequest.ProtoReflect.Descriptor instead.
func (*MarketPriceRequest) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{4}
}

func (x *MarketPriceRequest) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *MarketPriceRequest) GetType() TradeType {
	if x != nil {
		return x.Type
	}
	return TradeType_BUY
}

func (x *MarketPriceRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MarketPriceRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

type MarketPriceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prices []*PriceWithFee `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (x *MarketPriceReply) Reset() {
	*x = MarketPriceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceReply) ProtoMessage() {}

func (x *MarketPriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceReply.ProtoReflect.Descriptor instead.
func (*MarketPriceReply) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{5}
}

func (x *MarketPriceReply) GetPrices() []*PriceWithFee {
	if x != nil {
		return x.Prices
	}
	return nil
}

type TradeProposeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market      *Market      `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Type        TradeType    `protobuf:"varint,2,opt,name=type,proto3,enum=tdex.v1.TradeType" json:"type,omitempty"`
	SwapRequest *SwapRequest `protobuf:"bytes,3,opt,name=swap_request,json=swapRequest,proto3" json:"swap_request,omitempty"`
}

func (x *TradeProposeRequest) Reset() {
	*x = TradeProposeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeProposeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeProposeRequest) ProtoMessage() {}

func (x *TradeProposeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeProposeRequest.ProtoReflect.Descriptor instead.
func (*TradeProposeRequest) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{6}
}

func (x *TradeProposeRequest) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *TradeProposeRequest) GetType() TradeType {
	if x != nil {
		return x.Type
	}
	return TradeType_BUY
}

func (x *TradeProposeRequest) GetSwapRequest() *SwapRequest {
	if x != nil {
		return x.SwapRequest
	}
	return nil
}

type TradeProposeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapAccept     *SwapAccept `protobuf:"bytes,1,opt,name=swap_accept,json=swapAccept,proto3" json:"swap_accept,omitempty"`
	SwapFail       *SwapFail   `protobuf:"bytes,2,opt,name=swap_fail,json=swapFail,proto3" json:"swap_fail,omitempty"`
	ExpiryTimeUnix uint64      `protobuf:"varint,3,opt,name=expiry_time_unix,json=expiryTimeUnix,proto3" json:"expiry_time_unix,omitempty"`
}

func (x *TradeProposeReply) Reset() {
	*x = TradeProposeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeProposeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeProposeReply) ProtoMessage() {}

func (x *TradeProposeReply) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeProposeReply.ProtoReflect.Descriptor instead.
func (*TradeProposeReply) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{7}
}

func (x *TradeProposeReply) GetSwapAccept() *SwapAccept {
	if x != nil {
		return x.SwapAccept
	}
	return nil
}

func (x *TradeProposeReply) GetSwapFail() *SwapFail {
	if x != nil {
		return x.SwapFail
	}
	return nil
}

func (x *TradeProposeReply) GetExpiryTimeUnix() uint64 {
	if x != nil {
		return x.ExpiryTimeUnix
	}
	return 0
}

type TradeCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapComplete *SwapComplete `protobuf:"bytes,1,opt,name=swap_complete,json=swapComplete,proto3" json:"swap_complete,omitempty"`
	SwapFail     *SwapFail     `protobuf:"bytes,2,opt,name=swap_fail,json=swapFail,proto3" json:"swap_fail,omitempty"`
}

func (x *TradeCompleteRequest) Reset() {
	*x = TradeCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCompleteRequest) ProtoMessage() {}

func (x *TradeCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCompleteRequest.ProtoReflect.Descriptor instead.
func (*TradeCompleteRequest) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{8}
}

func (x *TradeCompleteRequest) GetSwapComplete() *SwapComplete {
	if x != nil {
		return x.SwapComplete
	}
	return nil
}

func (x *TradeCompleteRequest) GetSwapFail() *SwapFail {
	if x != nil {
		return x.SwapFail
	}
	return nil
}

type TradeCompleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid     string    `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	SwapFail *SwapFail `protobuf:"bytes,2,opt,name=swap_fail,json=swapFail,proto3" json:"swap_fail,omitempty"`
}

func (x *TradeCompleteReply) Reset() {
	*x = TradeCompleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCompleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCompleteReply) ProtoMessage() {}

func (x *TradeCompleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCompleteReply.ProtoReflect.Descriptor instead.
func (*TradeCompleteReply) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{9}
}

func (x *TradeCompleteReply) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TradeCompleteReply) GetSwapFail() *SwapFail {
	if x != nil {
		return x.SwapFail
	}
	return nil
}

type ProposeTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market      *Market      `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Type        TradeType    `protobuf:"varint,2,opt,name=type,proto3,enum=tdex.v1.TradeType" json:"type,omitempty"`
	SwapRequest *SwapRequest `protobuf:"bytes,3,opt,name=swap_request,json=swapRequest,proto3" json:"swap_request,omitempty"`
}

func (x *ProposeTradeRequest) Reset() {
	*x = ProposeTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeTradeRequest) ProtoMessage() {}

func (x *ProposeTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeTradeRequest.ProtoReflect.Descriptor instead.
func (*ProposeTradeRequest) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{10}
}

func (x *ProposeTradeRequest) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *ProposeTradeRequest) GetType() TradeType {
	if x != nil {
		return x.Type
	}
	return TradeType_BUY
}

func (x *ProposeTradeRequest) GetSwapRequest() *SwapRequest {
	if x != nil {
		return x.SwapRequest
	}
	return nil
}

type ProposeTradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapAccept     *SwapAccept `protobuf:"bytes,1,opt,name=swap_accept,json=swapAccept,proto3" json:"swap_accept,omitempty"`
	SwapFail       *SwapFail   `protobuf:"bytes,2,opt,name=swap_fail,json=swapFail,proto3" json:"swap_fail,omitempty"`
	ExpiryTimeUnix uint64      `protobuf:"varint,3,opt,name=expiry_time_unix,json=expiryTimeUnix,proto3" json:"expiry_time_unix,omitempty"`
}

func (x *ProposeTradeReply) Reset() {
	*x = ProposeTradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeTradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeTradeReply) ProtoMessage() {}

func (x *ProposeTradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeTradeReply.ProtoReflect.Descriptor instead.
func (*ProposeTradeReply) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{11}
}

func (x *ProposeTradeReply) GetSwapAccept() *SwapAccept {
	if x != nil {
		return x.SwapAccept
	}
	return nil
}

func (x *ProposeTradeReply) GetSwapFail() *SwapFail {
	if x != nil {
		return x.SwapFail
	}
	return nil
}

func (x *ProposeTradeReply) GetExpiryTimeUnix() uint64 {
	if x != nil {
		return x.ExpiryTimeUnix
	}
	return 0
}

type CompleteTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapComplete *SwapComplete `protobuf:"bytes,1,opt,name=swap_complete,json=swapComplete,proto3" json:"swap_complete,omitempty"`
	SwapFail     *SwapFail     `protobuf:"bytes,2,opt,name=swap_fail,json=swapFail,proto3" json:"swap_fail,omitempty"`
}

func (x *CompleteTradeRequest) Reset() {
	*x = CompleteTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTradeRequest) ProtoMessage() {}

func (x *CompleteTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTradeRequest.ProtoReflect.Descriptor instead.
func (*CompleteTradeRequest) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{12}
}

func (x *CompleteTradeRequest) GetSwapComplete() *SwapComplete {
	if x != nil {
		return x.SwapComplete
	}
	return nil
}

func (x *CompleteTradeRequest) GetSwapFail() *SwapFail {
	if x != nil {
		return x.SwapFail
	}
	return nil
}

type CompleteTradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid     string    `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	SwapFail *SwapFail `protobuf:"bytes,2,opt,name=swap_fail,json=swapFail,proto3" json:"swap_fail,omitempty"`
}

func (x *CompleteTradeReply) Reset() {
	*x = CompleteTradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_v1_trade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteTradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTradeReply) ProtoMessage() {}

func (x *CompleteTradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_v1_trade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTradeReply.ProtoReflect.Descriptor instead.
func (*CompleteTradeReply) Descriptor() ([]byte, []int) {
	return file_tdex_v1_trade_proto_rawDescGZIP(), []int{13}
}

func (x *CompleteTradeReply) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *CompleteTradeReply) GetSwapFail() *SwapFail {
	if x != nil {
		return x.SwapFail
	}
	return nil
}

var File_tdex_v1_trade_proto protoreflect.FileDescriptor

var file_tdex_v1_trade_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x1a, 0x12,
	0x74, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x74, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x44, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65,
	0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x12,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x22, 0x41, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x52, 0x06, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x0c, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x0b,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x22, 0x82, 0x01, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69,
	0x6c, 0x22, 0x58, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69,
	0x6c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x13,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa3, 0x01,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x73,
	0x77, 0x61, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x52,
	0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x78, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x08,
	0x73, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x61,
	0x69, 0x6c, 0x2a, 0x1e, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x01, 0x32, 0xdf, 0x05, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x07,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x5a, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18,
	0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e,
	0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e,
	0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x6f,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1c,
	0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x6c, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x1c, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f,
	0x75, 0x6e, 0x61, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x73, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d,
	0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x30, 0x01, 0x12, 0x70, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0xa3, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x64, 0x65, 0x78, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x64, 0x65, 0x78,
	0x2d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x70, 0x65, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x74, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x64, 0x65, 0x78, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x54, 0x64, 0x65, 0x78, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x07, 0x54, 0x64, 0x65, 0x78, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13, 0x54, 0x64, 0x65, 0x78,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x08, 0x54, 0x64, 0x65, 0x78, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tdex_v1_trade_proto_rawDescOnce sync.Once
	file_tdex_v1_trade_proto_rawDescData = file_tdex_v1_trade_proto_rawDesc
)

func file_tdex_v1_trade_proto_rawDescGZIP() []byte {
	file_tdex_v1_trade_proto_rawDescOnce.Do(func() {
		file_tdex_v1_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_tdex_v1_trade_proto_rawDescData)
	})
	return file_tdex_v1_trade_proto_rawDescData
}

var file_tdex_v1_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tdex_v1_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_tdex_v1_trade_proto_goTypes = []interface{}{
	(TradeType)(0),               // 0: tdex.v1.TradeType
	(*MarketsRequest)(nil),       // 1: tdex.v1.MarketsRequest
	(*MarketsReply)(nil),         // 2: tdex.v1.MarketsReply
	(*BalancesRequest)(nil),      // 3: tdex.v1.BalancesRequest
	(*BalancesReply)(nil),        // 4: tdex.v1.BalancesReply
	(*MarketPriceRequest)(nil),   // 5: tdex.v1.MarketPriceRequest
	(*MarketPriceReply)(nil),     // 6: tdex.v1.MarketPriceReply
	(*TradeProposeRequest)(nil),  // 7: tdex.v1.TradeProposeRequest
	(*TradeProposeReply)(nil),    // 8: tdex.v1.TradeProposeReply
	(*TradeCompleteRequest)(nil), // 9: tdex.v1.TradeCompleteRequest
	(*TradeCompleteReply)(nil),   // 10: tdex.v1.TradeCompleteReply
	(*ProposeTradeRequest)(nil),  // 11: tdex.v1.ProposeTradeRequest
	(*ProposeTradeReply)(nil),    // 12: tdex.v1.ProposeTradeReply
	(*CompleteTradeRequest)(nil), // 13: tdex.v1.CompleteTradeRequest
	(*CompleteTradeReply)(nil),   // 14: tdex.v1.CompleteTradeReply
	(*MarketWithFee)(nil),        // 15: tdex.v1.MarketWithFee
	(*Market)(nil),               // 16: tdex.v1.Market
	(*BalanceWithFee)(nil),       // 17: tdex.v1.BalanceWithFee
	(*PriceWithFee)(nil),         // 18: tdex.v1.PriceWithFee
	(*SwapRequest)(nil),          // 19: tdex.v1.SwapRequest
	(*SwapAccept)(nil),           // 20: tdex.v1.SwapAccept
	(*SwapFail)(nil),             // 21: tdex.v1.SwapFail
	(*SwapComplete)(nil),         // 22: tdex.v1.SwapComplete
}
var file_tdex_v1_trade_proto_depIdxs = []int32{
	15, // 0: tdex.v1.MarketsReply.markets:type_name -> tdex.v1.MarketWithFee
	16, // 1: tdex.v1.BalancesRequest.market:type_name -> tdex.v1.Market
	17, // 2: tdex.v1.BalancesReply.balances:type_name -> tdex.v1.BalanceWithFee
	16, // 3: tdex.v1.MarketPriceRequest.market:type_name -> tdex.v1.Market
	0,  // 4: tdex.v1.MarketPriceRequest.type:type_name -> tdex.v1.TradeType
	18, // 5: tdex.v1.MarketPriceReply.prices:type_name -> tdex.v1.PriceWithFee
	16, // 6: tdex.v1.TradeProposeRequest.market:type_name -> tdex.v1.Market
	0,  // 7: tdex.v1.TradeProposeRequest.type:type_name -> tdex.v1.TradeType
	19, // 8: tdex.v1.TradeProposeRequest.swap_request:type_name -> tdex.v1.SwapRequest
	20, // 9: tdex.v1.TradeProposeReply.swap_accept:type_name -> tdex.v1.SwapAccept
	21, // 10: tdex.v1.TradeProposeReply.swap_fail:type_name -> tdex.v1.SwapFail
	22, // 11: tdex.v1.TradeCompleteRequest.swap_complete:type_name -> tdex.v1.SwapComplete
	21, // 12: tdex.v1.TradeCompleteRequest.swap_fail:type_name -> tdex.v1.SwapFail
	21, // 13: tdex.v1.TradeCompleteReply.swap_fail:type_name -> tdex.v1.SwapFail
	16, // 14: tdex.v1.ProposeTradeRequest.market:type_name -> tdex.v1.Market
	0,  // 15: tdex.v1.ProposeTradeRequest.type:type_name -> tdex.v1.TradeType
	19, // 16: tdex.v1.ProposeTradeRequest.swap_request:type_name -> tdex.v1.SwapRequest
	20, // 17: tdex.v1.ProposeTradeReply.swap_accept:type_name -> tdex.v1.SwapAccept
	21, // 18: tdex.v1.ProposeTradeReply.swap_fail:type_name -> tdex.v1.SwapFail
	22, // 19: tdex.v1.CompleteTradeRequest.swap_complete:type_name -> tdex.v1.SwapComplete
	21, // 20: tdex.v1.CompleteTradeRequest.swap_fail:type_name -> tdex.v1.SwapFail
	21, // 21: tdex.v1.CompleteTradeReply.swap_fail:type_name -> tdex.v1.SwapFail
	1,  // 22: tdex.v1.Trade.Markets:input_type -> tdex.v1.MarketsRequest
	3,  // 23: tdex.v1.Trade.Balances:input_type -> tdex.v1.BalancesRequest
	5,  // 24: tdex.v1.Trade.MarketPrice:input_type -> tdex.v1.MarketPriceRequest
	7,  // 25: tdex.v1.Trade.TradePropose:input_type -> tdex.v1.TradeProposeRequest
	11, // 26: tdex.v1.Trade.ProposeTrade:input_type -> tdex.v1.ProposeTradeRequest
	9,  // 27: tdex.v1.Trade.TradeComplete:input_type -> tdex.v1.TradeCompleteRequest
	13, // 28: tdex.v1.Trade.CompleteTrade:input_type -> tdex.v1.CompleteTradeRequest
	2,  // 29: tdex.v1.Trade.Markets:output_type -> tdex.v1.MarketsReply
	4,  // 30: tdex.v1.Trade.Balances:output_type -> tdex.v1.BalancesReply
	6,  // 31: tdex.v1.Trade.MarketPrice:output_type -> tdex.v1.MarketPriceReply
	8,  // 32: tdex.v1.Trade.TradePropose:output_type -> tdex.v1.TradeProposeReply
	12, // 33: tdex.v1.Trade.ProposeTrade:output_type -> tdex.v1.ProposeTradeReply
	10, // 34: tdex.v1.Trade.TradeComplete:output_type -> tdex.v1.TradeCompleteReply
	14, // 35: tdex.v1.Trade.CompleteTrade:output_type -> tdex.v1.CompleteTradeReply
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_tdex_v1_trade_proto_init() }
func file_tdex_v1_trade_proto_init() {
	if File_tdex_v1_trade_proto != nil {
		return
	}
	file_tdex_v1_swap_proto_init()
	file_tdex_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tdex_v1_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeProposeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeProposeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCompleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeTradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_v1_trade_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteTradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tdex_v1_trade_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tdex_v1_trade_proto_goTypes,
		DependencyIndexes: file_tdex_v1_trade_proto_depIdxs,
		EnumInfos:         file_tdex_v1_trade_proto_enumTypes,
		MessageInfos:      file_tdex_v1_trade_proto_msgTypes,
	}.Build()
	File_tdex_v1_trade_proto = out.File
	file_tdex_v1_trade_proto_rawDesc = nil
	file_tdex_v1_trade_proto_goTypes = nil
	file_tdex_v1_trade_proto_depIdxs = nil
}
