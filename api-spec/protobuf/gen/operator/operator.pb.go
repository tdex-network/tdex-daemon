// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: operator.proto

package operator

import (
	wallet "github.com/tdex-network/tdex-daemon/api-spec/protobuf/gen/wallet"
	types "github.com/tdex-network/tdex-protobuf/generated/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StrategyType int32

const (
	StrategyType_PLUGGABLE  StrategyType = 0
	StrategyType_BALANCED   StrategyType = 1
	StrategyType_UNBALANCED StrategyType = 2
)

// Enum value maps for StrategyType.
var (
	StrategyType_name = map[int32]string{
		0: "PLUGGABLE",
		1: "BALANCED",
		2: "UNBALANCED",
	}
	StrategyType_value = map[string]int32{
		"PLUGGABLE":  0,
		"BALANCED":   1,
		"UNBALANCED": 2,
	}
)

func (x StrategyType) Enum() *StrategyType {
	p := new(StrategyType)
	*p = x
	return p
}

func (x StrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_operator_proto_enumTypes[0].Descriptor()
}

func (StrategyType) Type() protoreflect.EnumType {
	return &file_operator_proto_enumTypes[0]
}

func (x StrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrategyType.Descriptor instead.
func (StrategyType) EnumDescriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{0}
}

type TradeStatus int32

const (
	TradeStatus_UNDEFINED TradeStatus = 0
	TradeStatus_REQUEST   TradeStatus = 1
	TradeStatus_ACCEPT    TradeStatus = 2
	TradeStatus_COMPLETE  TradeStatus = 3
	TradeStatus_SETTLED   TradeStatus = 4
	TradeStatus_EXPIRED   TradeStatus = 5
)

// Enum value maps for TradeStatus.
var (
	TradeStatus_name = map[int32]string{
		0: "UNDEFINED",
		1: "REQUEST",
		2: "ACCEPT",
		3: "COMPLETE",
		4: "SETTLED",
		5: "EXPIRED",
	}
	TradeStatus_value = map[string]int32{
		"UNDEFINED": 0,
		"REQUEST":   1,
		"ACCEPT":    2,
		"COMPLETE":  3,
		"SETTLED":   4,
		"EXPIRED":   5,
	}
)

func (x TradeStatus) Enum() *TradeStatus {
	p := new(TradeStatus)
	*p = x
	return p
}

func (x TradeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_operator_proto_enumTypes[1].Descriptor()
}

func (TradeStatus) Type() protoreflect.EnumType {
	return &file_operator_proto_enumTypes[1]
}

func (x TradeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeStatus.Descriptor instead.
func (TradeStatus) EnumDescriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{1}
}

type ActionType int32

const (
	ActionType_TRADE_SETTLED       ActionType = 0
	ActionType_ACCOUNT_LOW_BALANCE ActionType = 1
	ActionType_ACCOUNT_WITHDRAW    ActionType = 2
	ActionType_ALL_ACTIONS         ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "TRADE_SETTLED",
		1: "ACCOUNT_LOW_BALANCE",
		2: "ACCOUNT_WITHDRAW",
		3: "ALL_ACTIONS",
	}
	ActionType_value = map[string]int32{
		"TRADE_SETTLED":       0,
		"ACCOUNT_LOW_BALANCE": 1,
		"ACCOUNT_WITHDRAW":    2,
		"ALL_ACTIONS":         3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_operator_proto_enumTypes[2].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_operator_proto_enumTypes[2]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{2}
}

type PredefinedPeriod int32

const (
	PredefinedPeriod_NULL          PredefinedPeriod = 0
	PredefinedPeriod_LAST_HOUR     PredefinedPeriod = 1
	PredefinedPeriod_LAST_DAY      PredefinedPeriod = 2
	PredefinedPeriod_LAST_MONTH    PredefinedPeriod = 3
	PredefinedPeriod_LAST_3_MONTHS PredefinedPeriod = 4
	PredefinedPeriod_YEAR_TO_DATE  PredefinedPeriod = 5
	PredefinedPeriod_ALL           PredefinedPeriod = 6
)

// Enum value maps for PredefinedPeriod.
var (
	PredefinedPeriod_name = map[int32]string{
		0: "NULL",
		1: "LAST_HOUR",
		2: "LAST_DAY",
		3: "LAST_MONTH",
		4: "LAST_3_MONTHS",
		5: "YEAR_TO_DATE",
		6: "ALL",
	}
	PredefinedPeriod_value = map[string]int32{
		"NULL":          0,
		"LAST_HOUR":     1,
		"LAST_DAY":      2,
		"LAST_MONTH":    3,
		"LAST_3_MONTHS": 4,
		"YEAR_TO_DATE":  5,
		"ALL":           6,
	}
)

func (x PredefinedPeriod) Enum() *PredefinedPeriod {
	p := new(PredefinedPeriod)
	*p = x
	return p
}

func (x PredefinedPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PredefinedPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_operator_proto_enumTypes[3].Descriptor()
}

func (PredefinedPeriod) Type() protoreflect.EnumType {
	return &file_operator_proto_enumTypes[3]
}

func (x PredefinedPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PredefinedPeriod.Descriptor instead.
func (PredefinedPeriod) EnumDescriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{3}
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{0}
}

type GetInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root path of the wallet of the daemon.
	RootPath string `protobuf:"bytes,1,opt,name=root_path,json=rootPath,proto3" json:"root_path,omitempty"`
	// The SLIP-77 master blinding key from which every keypair is derived.
	MasterBlindingKey string `protobuf:"bytes,2,opt,name=master_blinding_key,json=masterBlindingKey,proto3" json:"master_blinding_key,omitempty"`
	// The list of info related to every account.
	AccountInfo []*AccountInfo `protobuf:"bytes,3,rep,name=account_info,json=accountInfo,proto3" json:"account_info,omitempty"`
	// Network daemon running on
	Network string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetInfoReply) Reset() {
	*x = GetInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoReply) ProtoMessage() {}

func (x *GetInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoReply.ProtoReflect.Descriptor instead.
func (*GetInfoReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfoReply) GetRootPath() string {
	if x != nil {
		return x.RootPath
	}
	return ""
}

func (x *GetInfoReply) GetMasterBlindingKey() string {
	if x != nil {
		return x.MasterBlindingKey
	}
	return ""
}

func (x *GetInfoReply) GetAccountInfo() []*AccountInfo {
	if x != nil {
		return x.AccountInfo
	}
	return nil
}

func (x *GetInfoReply) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type GetFeeAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of addresses to generate.
	NumOfAddresses int64 `protobuf:"varint,1,opt,name=num_of_addresses,json=numOfAddresses,proto3" json:"num_of_addresses,omitempty"`
}

func (x *GetFeeAddressRequest) Reset() {
	*x = GetFeeAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeAddressRequest) ProtoMessage() {}

func (x *GetFeeAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeAddressRequest.ProtoReflect.Descriptor instead.
func (*GetFeeAddressRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{2}
}

func (x *GetFeeAddressRequest) GetNumOfAddresses() int64 {
	if x != nil {
		return x.NumOfAddresses
	}
	return 0
}

type GetFeeAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of new confidential addresses and related private blinding keys.
	AddressWithBlindingKey []*types.AddressWithBlindingKey `protobuf:"bytes,1,rep,name=address_with_blinding_key,json=addressWithBlindingKey,proto3" json:"address_with_blinding_key,omitempty"`
}

func (x *GetFeeAddressReply) Reset() {
	*x = GetFeeAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeAddressReply) ProtoMessage() {}

func (x *GetFeeAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeAddressReply.ProtoReflect.Descriptor instead.
func (*GetFeeAddressReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{3}
}

func (x *GetFeeAddressReply) GetAddressWithBlindingKey() []*types.AddressWithBlindingKey {
	if x != nil {
		return x.AddressWithBlindingKey
	}
	return nil
}

type ListFeeAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFeeAddressesRequest) Reset() {
	*x = ListFeeAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeeAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeeAddressesRequest) ProtoMessage() {}

func (x *ListFeeAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeeAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListFeeAddressesRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{4}
}

type ListFeeAddressesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of derived confidential addresses and related private blinding
	// keys.
	AddressWithBlindingKey []*types.AddressWithBlindingKey `protobuf:"bytes,1,rep,name=address_with_blinding_key,json=addressWithBlindingKey,proto3" json:"address_with_blinding_key,omitempty"`
}

func (x *ListFeeAddressesReply) Reset() {
	*x = ListFeeAddressesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeeAddressesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeeAddressesReply) ProtoMessage() {}

func (x *ListFeeAddressesReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeeAddressesReply.ProtoReflect.Descriptor instead.
func (*ListFeeAddressesReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{5}
}

func (x *ListFeeAddressesReply) GetAddressWithBlindingKey() []*types.AddressWithBlindingKey {
	if x != nil {
		return x.AddressWithBlindingKey
	}
	return nil
}

type GetFeeBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFeeBalanceRequest) Reset() {
	*x = GetFeeBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeBalanceRequest) ProtoMessage() {}

func (x *GetFeeBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetFeeBalanceRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{6}
}

type GetFeeBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The balance of all unlocked unspents.
	AvailableBalance uint64 `protobuf:"varint,1,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	// The balance of all unspents included those locked.
	TotalBalance uint64 `protobuf:"varint,2,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
}

func (x *GetFeeBalanceReply) Reset() {
	*x = GetFeeBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeBalanceReply) ProtoMessage() {}

func (x *GetFeeBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeBalanceReply.ProtoReflect.Descriptor instead.
func (*GetFeeBalanceReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{7}
}

func (x *GetFeeBalanceReply) GetAvailableBalance() uint64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *GetFeeBalanceReply) GetTotalBalance() uint64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

type ClaimFeeDepositsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of outpoints sent to the fee account address(es).
	// They all must be confirmed, ie. included in blockchain.
	Outpoints []*TxOutpoint `protobuf:"bytes,1,rep,name=outpoints,proto3" json:"outpoints,omitempty"`
}

func (x *ClaimFeeDepositsRequest) Reset() {
	*x = ClaimFeeDepositsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimFeeDepositsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFeeDepositsRequest) ProtoMessage() {}

func (x *ClaimFeeDepositsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFeeDepositsRequest.ProtoReflect.Descriptor instead.
func (*ClaimFeeDepositsRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{8}
}

func (x *ClaimFeeDepositsRequest) GetOutpoints() []*TxOutpoint {
	if x != nil {
		return x.Outpoints
	}
	return nil
}

type ClaimFeeDepositsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClaimFeeDepositsReply) Reset() {
	*x = ClaimFeeDepositsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimFeeDepositsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFeeDepositsReply) ProtoMessage() {}

func (x *ClaimFeeDepositsReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFeeDepositsReply.ProtoReflect.Descriptor instead.
func (*ClaimFeeDepositsReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{9}
}

type WithdrawFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of L-BTC to widthdraw expressed in Satoshi.
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The number of millisatoshis per byte that should be paid for network fees.
	MillisatsPerByte uint64 `protobuf:"varint,2,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
	// The address to send the funds to.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The asset to withdraw. To leave blank for LBTC. This is aimed for
	// those cases where the operator deposits funds with assets diffent from LBTC
	// into the Fee account and than needs to withdraw'em.
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *WithdrawFeeRequest) Reset() {
	*x = WithdrawFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawFeeRequest) ProtoMessage() {}

func (x *WithdrawFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawFeeRequest.ProtoReflect.Descriptor instead.
func (*WithdrawFeeRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{10}
}

func (x *WithdrawFeeRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WithdrawFeeRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

func (x *WithdrawFeeRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WithdrawFeeRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

type WithdrawFeeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction hash in mempool/blockchain.
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *WithdrawFeeReply) Reset() {
	*x = WithdrawFeeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawFeeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawFeeReply) ProtoMessage() {}

func (x *WithdrawFeeReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawFeeReply.ProtoReflect.Descriptor instead.
func (*WithdrawFeeReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{11}
}

func (x *WithdrawFeeReply) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type NewMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset pair for which creating a new account in the daemon's wallet.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *NewMarketRequest) Reset() {
	*x = NewMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMarketRequest) ProtoMessage() {}

func (x *NewMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMarketRequest.ProtoReflect.Descriptor instead.
func (*NewMarketRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{12}
}

func (x *NewMarketRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type NewMarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewMarketReply) Reset() {
	*x = NewMarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMarketReply) ProtoMessage() {}

func (x *NewMarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMarketReply.ProtoReflect.Descriptor instead.
func (*NewMarketReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{13}
}

type GetMarketInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *GetMarketInfoRequest) Reset() {
	*x = GetMarketInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketInfoRequest) ProtoMessage() {}

func (x *GetMarketInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMarketInfoRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{14}
}

func (x *GetMarketInfoRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type GetMarketInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *MarketInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetMarketInfoReply) Reset() {
	*x = GetMarketInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketInfoReply) ProtoMessage() {}

func (x *GetMarketInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketInfoReply.ProtoReflect.Descriptor instead.
func (*GetMarketInfoReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{15}
}

func (x *GetMarketInfoReply) GetInfo() *MarketInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetMarketAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market for which deriving new addresses.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The number of addresses to generate.
	NumOfAddresses int64 `protobuf:"varint,2,opt,name=num_of_addresses,json=numOfAddresses,proto3" json:"num_of_addresses,omitempty"`
}

func (x *GetMarketAddressRequest) Reset() {
	*x = GetMarketAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketAddressRequest) ProtoMessage() {}

func (x *GetMarketAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketAddressRequest.ProtoReflect.Descriptor instead.
func (*GetMarketAddressRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{16}
}

func (x *GetMarketAddressRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *GetMarketAddressRequest) GetNumOfAddresses() int64 {
	if x != nil {
		return x.NumOfAddresses
	}
	return 0
}

type GetMarketAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of new confidential addresses and related private blinding keys.
	AddressWithBlindingKey []*types.AddressWithBlindingKey `protobuf:"bytes,1,rep,name=address_with_blinding_key,json=addressWithBlindingKey,proto3" json:"address_with_blinding_key,omitempty"`
}

func (x *GetMarketAddressReply) Reset() {
	*x = GetMarketAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketAddressReply) ProtoMessage() {}

func (x *GetMarketAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketAddressReply.ProtoReflect.Descriptor instead.
func (*GetMarketAddressReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{17}
}

func (x *GetMarketAddressReply) GetAddressWithBlindingKey() []*types.AddressWithBlindingKey {
	if x != nil {
		return x.AddressWithBlindingKey
	}
	return nil
}

type ListMarketAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Market for which listing all derived addresses.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *ListMarketAddressesRequest) Reset() {
	*x = ListMarketAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketAddressesRequest) ProtoMessage() {}

func (x *ListMarketAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListMarketAddressesRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{18}
}

func (x *ListMarketAddressesRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type ListMarketAddressesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of derived confidential addresses and related private blinding
	// keys.
	AddressWithBlindingKey []*types.AddressWithBlindingKey `protobuf:"bytes,1,rep,name=address_with_blinding_key,json=addressWithBlindingKey,proto3" json:"address_with_blinding_key,omitempty"`
}

func (x *ListMarketAddressesReply) Reset() {
	*x = ListMarketAddressesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketAddressesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketAddressesReply) ProtoMessage() {}

func (x *ListMarketAddressesReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketAddressesReply.ProtoReflect.Descriptor instead.
func (*ListMarketAddressesReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{19}
}

func (x *ListMarketAddressesReply) GetAddressWithBlindingKey() []*types.AddressWithBlindingKey {
	if x != nil {
		return x.AddressWithBlindingKey
	}
	return nil
}

type GetMarketBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market for which calculating the balance.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *GetMarketBalanceRequest) Reset() {
	*x = GetMarketBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketBalanceRequest) ProtoMessage() {}

func (x *GetMarketBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetMarketBalanceRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{20}
}

func (x *GetMarketBalanceRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type GetMarketBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The balance of all unlocked unspents.
	AvailableBalance *types.Balance `protobuf:"bytes,1,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	// The balance of all unspents included those locked.
	TotalBalance *types.Balance `protobuf:"bytes,2,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
}

func (x *GetMarketBalanceReply) Reset() {
	*x = GetMarketBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketBalanceReply) ProtoMessage() {}

func (x *GetMarketBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketBalanceReply.ProtoReflect.Descriptor instead.
func (*GetMarketBalanceReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{21}
}

func (x *GetMarketBalanceReply) GetAvailableBalance() *types.Balance {
	if x != nil {
		return x.AvailableBalance
	}
	return nil
}

func (x *GetMarketBalanceReply) GetTotalBalance() *types.Balance {
	if x != nil {
		return x.TotalBalance
	}
	return nil
}

type ClaimMarketDepositsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market for which claiming the deposits.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The list of outpoints sent to the market address(es).
	// They all must be confirmed, ie. included in blockchain.
	Outpoints []*TxOutpoint `protobuf:"bytes,2,rep,name=outpoints,proto3" json:"outpoints,omitempty"`
}

func (x *ClaimMarketDepositsRequest) Reset() {
	*x = ClaimMarketDepositsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimMarketDepositsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimMarketDepositsRequest) ProtoMessage() {}

func (x *ClaimMarketDepositsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimMarketDepositsRequest.ProtoReflect.Descriptor instead.
func (*ClaimMarketDepositsRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{22}
}

func (x *ClaimMarketDepositsRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *ClaimMarketDepositsRequest) GetOutpoints() []*TxOutpoint {
	if x != nil {
		return x.Outpoints
	}
	return nil
}

type ClaimMarketDepositsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClaimMarketDepositsReply) Reset() {
	*x = ClaimMarketDepositsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimMarketDepositsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimMarketDepositsReply) ProtoMessage() {}

func (x *ClaimMarketDepositsReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimMarketDepositsReply.ProtoReflect.Descriptor instead.
func (*ClaimMarketDepositsReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{23}
}

type OpenMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market to be made tradable.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *OpenMarketRequest) Reset() {
	*x = OpenMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMarketRequest) ProtoMessage() {}

func (x *OpenMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMarketRequest.ProtoReflect.Descriptor instead.
func (*OpenMarketRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{24}
}

func (x *OpenMarketRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type OpenMarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenMarketReply) Reset() {
	*x = OpenMarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMarketReply) ProtoMessage() {}

func (x *OpenMarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMarketReply.ProtoReflect.Descriptor instead.
func (*OpenMarketReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{25}
}

type CloseMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market to be made not tradable.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *CloseMarketRequest) Reset() {
	*x = CloseMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseMarketRequest) ProtoMessage() {}

func (x *CloseMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseMarketRequest.ProtoReflect.Descriptor instead.
func (*CloseMarketRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{26}
}

func (x *CloseMarketRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type CloseMarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseMarketReply) Reset() {
	*x = CloseMarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseMarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseMarketReply) ProtoMessage() {}

func (x *CloseMarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseMarketReply.ProtoReflect.Descriptor instead.
func (*CloseMarketReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{27}
}

type ListMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMarketsRequest) Reset() {
	*x = ListMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsRequest) ProtoMessage() {}

func (x *ListMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsRequest.ProtoReflect.Descriptor instead.
func (*ListMarketsRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{28}
}

type ListMarketsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of info about all the created markets.
	Markets []*MarketInfo `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *ListMarketsReply) Reset() {
	*x = ListMarketsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsReply) ProtoMessage() {}

func (x *ListMarketsReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsReply.ProtoReflect.Descriptor instead.
func (*ListMarketsReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{29}
}

func (x *ListMarketsReply) GetMarkets() []*MarketInfo {
	if x != nil {
		return x.Markets
	}
	return nil
}

type DropMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *DropMarketRequest) Reset() {
	*x = DropMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropMarketRequest) ProtoMessage() {}

func (x *DropMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropMarketRequest.ProtoReflect.Descriptor instead.
func (*DropMarketRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{30}
}

func (x *DropMarketRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type DropMarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DropMarketReply) Reset() {
	*x = DropMarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropMarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropMarketReply) ProtoMessage() {}

func (x *DropMarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropMarketReply.ProtoReflect.Descriptor instead.
func (*DropMarketReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{31}
}

type GetMarketCollectedSwapFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The marker for which returning the report of collected fees.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The page for a paginated reply.
	Page *Page `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetMarketCollectedSwapFeesRequest) Reset() {
	*x = GetMarketCollectedSwapFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketCollectedSwapFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketCollectedSwapFeesRequest) ProtoMessage() {}

func (x *GetMarketCollectedSwapFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketCollectedSwapFeesRequest.ProtoReflect.Descriptor instead.
func (*GetMarketCollectedSwapFeesRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{32}
}

func (x *GetMarketCollectedSwapFeesRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *GetMarketCollectedSwapFeesRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type GetMarketCollectedSwapFeesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of info about the collected fees per each trade.
	CollectedFees []*FeeInfo `protobuf:"bytes,1,rep,name=collected_fees,json=collectedFees,proto3" json:"collected_fees,omitempty"`
	// The map of total fees collected per asset.
	TotalCollectedFeesPerAsset map[string]int64 `protobuf:"bytes,2,rep,name=total_collected_fees_per_asset,json=totalCollectedFeesPerAsset,proto3" json:"total_collected_fees_per_asset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetMarketCollectedSwapFeesReply) Reset() {
	*x = GetMarketCollectedSwapFeesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketCollectedSwapFeesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketCollectedSwapFeesReply) ProtoMessage() {}

func (x *GetMarketCollectedSwapFeesReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketCollectedSwapFeesReply.ProtoReflect.Descriptor instead.
func (*GetMarketCollectedSwapFeesReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{33}
}

func (x *GetMarketCollectedSwapFeesReply) GetCollectedFees() []*FeeInfo {
	if x != nil {
		return x.CollectedFees
	}
	return nil
}

func (x *GetMarketCollectedSwapFeesReply) GetTotalCollectedFeesPerAsset() map[string]int64 {
	if x != nil {
		return x.TotalCollectedFeesPerAsset
	}
	return nil
}

type WithdrawMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market from which funds should be withdrawn.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The amount of base and quote asset to be withdrawn.
	BalanceToWithdraw *types.Balance `protobuf:"bytes,2,opt,name=balance_to_withdraw,json=balanceToWithdraw,proto3" json:"balance_to_withdraw,omitempty"`
	// The number of millisatoshis per byte that should be paid for network fees.
	MillisatsPerByte int64 `protobuf:"varint,3,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
	// The address to send the funds to.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *WithdrawMarketRequest) Reset() {
	*x = WithdrawMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawMarketRequest) ProtoMessage() {}

func (x *WithdrawMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawMarketRequest.ProtoReflect.Descriptor instead.
func (*WithdrawMarketRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{34}
}

func (x *WithdrawMarketRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *WithdrawMarketRequest) GetBalanceToWithdraw() *types.Balance {
	if x != nil {
		return x.BalanceToWithdraw
	}
	return nil
}

func (x *WithdrawMarketRequest) GetMillisatsPerByte() int64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

func (x *WithdrawMarketRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type WithdrawMarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction hash in mempool/blockchain.
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *WithdrawMarketReply) Reset() {
	*x = WithdrawMarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawMarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawMarketReply) ProtoMessage() {}

func (x *WithdrawMarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawMarketReply.ProtoReflect.Descriptor instead.
func (*WithdrawMarketReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{35}
}

func (x *WithdrawMarketReply) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type UpdateMarketPercentageFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market for which updating the percentage fee.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The new percentage fee expresses in basis point.
	BasisPoint int64 `protobuf:"varint,2,opt,name=basis_point,json=basisPoint,proto3" json:"basis_point,omitempty"`
}

func (x *UpdateMarketPercentageFeeRequest) Reset() {
	*x = UpdateMarketPercentageFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketPercentageFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketPercentageFeeRequest) ProtoMessage() {}

func (x *UpdateMarketPercentageFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketPercentageFeeRequest.ProtoReflect.Descriptor instead.
func (*UpdateMarketPercentageFeeRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateMarketPercentageFeeRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *UpdateMarketPercentageFeeRequest) GetBasisPoint() int64 {
	if x != nil {
		return x.BasisPoint
	}
	return 0
}

type UpdateMarketFixedFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market for which updating the fixed fee.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The new fixed fee for base and quote asset.
	Fixed *types.Fixed `protobuf:"bytes,2,opt,name=fixed,proto3" json:"fixed,omitempty"`
}

func (x *UpdateMarketFixedFeeRequest) Reset() {
	*x = UpdateMarketFixedFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketFixedFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketFixedFeeRequest) ProtoMessage() {}

func (x *UpdateMarketFixedFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketFixedFeeRequest.ProtoReflect.Descriptor instead.
func (*UpdateMarketFixedFeeRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateMarketFixedFeeRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *UpdateMarketFixedFeeRequest) GetFixed() *types.Fixed {
	if x != nil {
		return x.Fixed
	}
	return nil
}

type UpdateMarketFeeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market with updated fees.
	MarketWithFee *types.MarketWithFee `protobuf:"bytes,1,opt,name=market_with_fee,json=marketWithFee,proto3" json:"market_with_fee,omitempty"`
}

func (x *UpdateMarketFeeReply) Reset() {
	*x = UpdateMarketFeeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketFeeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketFeeReply) ProtoMessage() {}

func (x *UpdateMarketFeeReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketFeeReply.ProtoReflect.Descriptor instead.
func (*UpdateMarketFeeReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateMarketFeeReply) GetMarketWithFee() *types.MarketWithFee {
	if x != nil {
		return x.MarketWithFee
	}
	return nil
}

type UpdateMarketPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The arket for which updating the price.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The new price for base and quote asset.
	Price *types.Price `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *UpdateMarketPriceRequest) Reset() {
	*x = UpdateMarketPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketPriceRequest) ProtoMessage() {}

func (x *UpdateMarketPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketPriceRequest.ProtoReflect.Descriptor instead.
func (*UpdateMarketPriceRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateMarketPriceRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *UpdateMarketPriceRequest) GetPrice() *types.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

type UpdateMarketPriceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMarketPriceReply) Reset() {
	*x = UpdateMarketPriceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketPriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketPriceReply) ProtoMessage() {}

func (x *UpdateMarketPriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketPriceReply.ProtoReflect.Descriptor instead.
func (*UpdateMarketPriceReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{40}
}

type UpdateMarketStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market for which changing the strategy.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The new making strategy to use.
	StrategyType StrategyType `protobuf:"varint,2,opt,name=strategy_type,json=strategyType,proto3,enum=StrategyType" json:"strategy_type,omitempty"`
	// The JSON string representing additional metadata about the new strategy.
	Metadata string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UpdateMarketStrategyRequest) Reset() {
	*x = UpdateMarketStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketStrategyRequest) ProtoMessage() {}

func (x *UpdateMarketStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketStrategyRequest.ProtoReflect.Descriptor instead.
func (*UpdateMarketStrategyRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateMarketStrategyRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *UpdateMarketStrategyRequest) GetStrategyType() StrategyType {
	if x != nil {
		return x.StrategyType
	}
	return StrategyType_PLUGGABLE
}

func (x *UpdateMarketStrategyRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type UpdateMarketStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMarketStrategyReply) Reset() {
	*x = UpdateMarketStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketStrategyReply) ProtoMessage() {}

func (x *UpdateMarketStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketStrategyReply.ProtoReflect.Descriptor instead.
func (*UpdateMarketStrategyReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{42}
}

type GetFeeFragmenterAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfAddresses int64 `protobuf:"varint,1,opt,name=num_of_addresses,json=numOfAddresses,proto3" json:"num_of_addresses,omitempty"`
}

func (x *GetFeeFragmenterAddressRequest) Reset() {
	*x = GetFeeFragmenterAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeFragmenterAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeFragmenterAddressRequest) ProtoMessage() {}

func (x *GetFeeFragmenterAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeFragmenterAddressRequest.ProtoReflect.Descriptor instead.
func (*GetFeeFragmenterAddressRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{43}
}

func (x *GetFeeFragmenterAddressRequest) GetNumOfAddresses() int64 {
	if x != nil {
		return x.NumOfAddresses
	}
	return 0
}

type GetFeeFragmenterAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressWithBlindingKey []*types.AddressWithBlindingKey `protobuf:"bytes,1,rep,name=address_with_blinding_key,json=addressWithBlindingKey,proto3" json:"address_with_blinding_key,omitempty"`
}

func (x *GetFeeFragmenterAddressReply) Reset() {
	*x = GetFeeFragmenterAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeFragmenterAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeFragmenterAddressReply) ProtoMessage() {}

func (x *GetFeeFragmenterAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeFragmenterAddressReply.ProtoReflect.Descriptor instead.
func (*GetFeeFragmenterAddressReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{44}
}

func (x *GetFeeFragmenterAddressReply) GetAddressWithBlindingKey() []*types.AddressWithBlindingKey {
	if x != nil {
		return x.AddressWithBlindingKey
	}
	return nil
}

type ListFeeFragmenterAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFeeFragmenterAddressesRequest) Reset() {
	*x = ListFeeFragmenterAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeeFragmenterAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeeFragmenterAddressesRequest) ProtoMessage() {}

func (x *ListFeeFragmenterAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeeFragmenterAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListFeeFragmenterAddressesRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{45}
}

type ListFeeFragmenterAddressesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressWithBlindingKey []*types.AddressWithBlindingKey `protobuf:"bytes,1,rep,name=address_with_blinding_key,json=addressWithBlindingKey,proto3" json:"address_with_blinding_key,omitempty"`
}

func (x *ListFeeFragmenterAddressesReply) Reset() {
	*x = ListFeeFragmenterAddressesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeeFragmenterAddressesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeeFragmenterAddressesReply) ProtoMessage() {}

func (x *ListFeeFragmenterAddressesReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeeFragmenterAddressesReply.ProtoReflect.Descriptor instead.
func (*ListFeeFragmenterAddressesReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{46}
}

func (x *ListFeeFragmenterAddressesReply) GetAddressWithBlindingKey() []*types.AddressWithBlindingKey {
	if x != nil {
		return x.AddressWithBlindingKey
	}
	return nil
}

type GetFeeFragmenterBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFeeFragmenterBalanceRequest) Reset() {
	*x = GetFeeFragmenterBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeFragmenterBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeFragmenterBalanceRequest) ProtoMessage() {}

func (x *GetFeeFragmenterBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeFragmenterBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetFeeFragmenterBalanceRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{47}
}

type GetFeeFragmenterBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The balance info (total, confirmed, unconfirmed) of the account grouped by
	// asset.
	Balance map[string]*wallet.BalanceInfo `protobuf:"bytes,1,rep,name=balance,proto3" json:"balance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetFeeFragmenterBalanceReply) Reset() {
	*x = GetFeeFragmenterBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeFragmenterBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeFragmenterBalanceReply) ProtoMessage() {}

func (x *GetFeeFragmenterBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeFragmenterBalanceReply.ProtoReflect.Descriptor instead.
func (*GetFeeFragmenterBalanceReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{48}
}

func (x *GetFeeFragmenterBalanceReply) GetBalance() map[string]*wallet.BalanceInfo {
	if x != nil {
		return x.Balance
	}
	return nil
}

type FeeFragmenterSplitFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The max number of fragments the fragmenter can generate when splitting
	// its funds.
	MaxFragments     uint32 `protobuf:"varint,1,opt,name=max_fragments,json=maxFragments,proto3" json:"max_fragments,omitempty"`
	MillisatsPerByte uint64 `protobuf:"varint,2,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *FeeFragmenterSplitFundsRequest) Reset() {
	*x = FeeFragmenterSplitFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeFragmenterSplitFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeFragmenterSplitFundsRequest) ProtoMessage() {}

func (x *FeeFragmenterSplitFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeFragmenterSplitFundsRequest.ProtoReflect.Descriptor instead.
func (*FeeFragmenterSplitFundsRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{49}
}

func (x *FeeFragmenterSplitFundsRequest) GetMaxFragments() uint32 {
	if x != nil {
		return x.MaxFragments
	}
	return 0
}

func (x *FeeFragmenterSplitFundsRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type FragmenterSplitFundsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A sequence of string messages returned during the process.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FragmenterSplitFundsReply) Reset() {
	*x = FragmenterSplitFundsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmenterSplitFundsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmenterSplitFundsReply) ProtoMessage() {}

func (x *FragmenterSplitFundsReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmenterSplitFundsReply.ProtoReflect.Descriptor instead.
func (*FragmenterSplitFundsReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{50}
}

func (x *FragmenterSplitFundsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WithdrawFeeFragmenterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address to send the funds to.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The number of millisatoshis per byte that should be paid for network fees.
	MillisatsPerByte uint64 `protobuf:"varint,2,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *WithdrawFeeFragmenterRequest) Reset() {
	*x = WithdrawFeeFragmenterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawFeeFragmenterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawFeeFragmenterRequest) ProtoMessage() {}

func (x *WithdrawFeeFragmenterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawFeeFragmenterRequest.ProtoReflect.Descriptor instead.
func (*WithdrawFeeFragmenterRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{51}
}

func (x *WithdrawFeeFragmenterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WithdrawFeeFragmenterRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type WithdrawFeeFragmenterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *WithdrawFeeFragmenterReply) Reset() {
	*x = WithdrawFeeFragmenterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawFeeFragmenterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawFeeFragmenterReply) ProtoMessage() {}

func (x *WithdrawFeeFragmenterReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawFeeFragmenterReply.ProtoReflect.Descriptor instead.
func (*WithdrawFeeFragmenterReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{52}
}

func (x *WithdrawFeeFragmenterReply) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type GetMarketFragmenterAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfAddresses int64 `protobuf:"varint,1,opt,name=num_of_addresses,json=numOfAddresses,proto3" json:"num_of_addresses,omitempty"`
}

func (x *GetMarketFragmenterAddressRequest) Reset() {
	*x = GetMarketFragmenterAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketFragmenterAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketFragmenterAddressRequest) ProtoMessage() {}

func (x *GetMarketFragmenterAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketFragmenterAddressRequest.ProtoReflect.Descriptor instead.
func (*GetMarketFragmenterAddressRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{53}
}

func (x *GetMarketFragmenterAddressRequest) GetNumOfAddresses() int64 {
	if x != nil {
		return x.NumOfAddresses
	}
	return 0
}

type GetMarketFragmenterAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressWithBlindingKey []*types.AddressWithBlindingKey `protobuf:"bytes,1,rep,name=address_with_blinding_key,json=addressWithBlindingKey,proto3" json:"address_with_blinding_key,omitempty"`
}

func (x *GetMarketFragmenterAddressReply) Reset() {
	*x = GetMarketFragmenterAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketFragmenterAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketFragmenterAddressReply) ProtoMessage() {}

func (x *GetMarketFragmenterAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketFragmenterAddressReply.ProtoReflect.Descriptor instead.
func (*GetMarketFragmenterAddressReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{54}
}

func (x *GetMarketFragmenterAddressReply) GetAddressWithBlindingKey() []*types.AddressWithBlindingKey {
	if x != nil {
		return x.AddressWithBlindingKey
	}
	return nil
}

type ListMarketFragmenterAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMarketFragmenterAddressesRequest) Reset() {
	*x = ListMarketFragmenterAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketFragmenterAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketFragmenterAddressesRequest) ProtoMessage() {}

func (x *ListMarketFragmenterAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketFragmenterAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListMarketFragmenterAddressesRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{55}
}

type ListMarketFragmenterAddressesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressWithBlindingKey []*types.AddressWithBlindingKey `protobuf:"bytes,1,rep,name=address_with_blinding_key,json=addressWithBlindingKey,proto3" json:"address_with_blinding_key,omitempty"`
}

func (x *ListMarketFragmenterAddressesReply) Reset() {
	*x = ListMarketFragmenterAddressesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketFragmenterAddressesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketFragmenterAddressesReply) ProtoMessage() {}

func (x *ListMarketFragmenterAddressesReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketFragmenterAddressesReply.ProtoReflect.Descriptor instead.
func (*ListMarketFragmenterAddressesReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{56}
}

func (x *ListMarketFragmenterAddressesReply) GetAddressWithBlindingKey() []*types.AddressWithBlindingKey {
	if x != nil {
		return x.AddressWithBlindingKey
	}
	return nil
}

type GetMarketFragmenterBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMarketFragmenterBalanceRequest) Reset() {
	*x = GetMarketFragmenterBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketFragmenterBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketFragmenterBalanceRequest) ProtoMessage() {}

func (x *GetMarketFragmenterBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketFragmenterBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetMarketFragmenterBalanceRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{57}
}

type GetMarketFragmenterBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The balance info (total, confirmed, unconfirmed) of the account grouped by
	// asset.
	Balance map[string]*wallet.BalanceInfo `protobuf:"bytes,1,rep,name=balance,proto3" json:"balance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMarketFragmenterBalanceReply) Reset() {
	*x = GetMarketFragmenterBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketFragmenterBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketFragmenterBalanceReply) ProtoMessage() {}

func (x *GetMarketFragmenterBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketFragmenterBalanceReply.ProtoReflect.Descriptor instead.
func (*GetMarketFragmenterBalanceReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{58}
}

func (x *GetMarketFragmenterBalanceReply) GetBalance() map[string]*wallet.BalanceInfo {
	if x != nil {
		return x.Balance
	}
	return nil
}

type MarketFragmenterSplitFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market to which to deposit the fragmented funds owned by the market
	// fragmenter.
	Market           *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	MillisatsPerByte uint64        `protobuf:"varint,2,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *MarketFragmenterSplitFundsRequest) Reset() {
	*x = MarketFragmenterSplitFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketFragmenterSplitFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketFragmenterSplitFundsRequest) ProtoMessage() {}

func (x *MarketFragmenterSplitFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketFragmenterSplitFundsRequest.ProtoReflect.Descriptor instead.
func (*MarketFragmenterSplitFundsRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{59}
}

func (x *MarketFragmenterSplitFundsRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *MarketFragmenterSplitFundsRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type WithdrawMarketFragmenterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address to send the funds to.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The number of millisatoshis per byte that should be paid for network fees.
	MillisatsPerByte uint64 `protobuf:"varint,2,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *WithdrawMarketFragmenterRequest) Reset() {
	*x = WithdrawMarketFragmenterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawMarketFragmenterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawMarketFragmenterRequest) ProtoMessage() {}

func (x *WithdrawMarketFragmenterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawMarketFragmenterRequest.ProtoReflect.Descriptor instead.
func (*WithdrawMarketFragmenterRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{60}
}

func (x *WithdrawMarketFragmenterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WithdrawMarketFragmenterRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type WithdrawMarketFragmenterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *WithdrawMarketFragmenterReply) Reset() {
	*x = WithdrawMarketFragmenterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawMarketFragmenterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawMarketFragmenterReply) ProtoMessage() {}

func (x *WithdrawMarketFragmenterReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawMarketFragmenterReply.ProtoReflect.Descriptor instead.
func (*WithdrawMarketFragmenterReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{61}
}

func (x *WithdrawMarketFragmenterReply) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type ListTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: request all trades related to a specific market.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The page for a paginated reply.
	Page *Page `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListTradesRequest) Reset() {
	*x = ListTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTradesRequest) ProtoMessage() {}

func (x *ListTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTradesRequest.ProtoReflect.Descriptor instead.
func (*ListTradesRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{62}
}

func (x *ListTradesRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *ListTradesRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListTradesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of info about all trades or all trades for a market depending on
	// the request.
	Trades []*TradeInfo `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *ListTradesReply) Reset() {
	*x = ListTradesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTradesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTradesReply) ProtoMessage() {}

func (x *ListTradesReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTradesReply.ProtoReflect.Descriptor instead.
func (*ListTradesReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{63}
}

func (x *ListTradesReply) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type ReloadUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadUtxosRequest) Reset() {
	*x = ReloadUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadUtxosRequest) ProtoMessage() {}

func (x *ReloadUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadUtxosRequest.ProtoReflect.Descriptor instead.
func (*ReloadUtxosRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{64}
}

type ReloadUtxosReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadUtxosReply) Reset() {
	*x = ReloadUtxosReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadUtxosReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadUtxosReply) ProtoMessage() {}

func (x *ReloadUtxosReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadUtxosReply.ProtoReflect.Descriptor instead.
func (*ReloadUtxosReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{65}
}

type ListUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: request all utxos owned by a specific wallet account.
	AccountIndex uint64 `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The page for a paginated reply.
	Page *Page `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListUtxosRequest) Reset() {
	*x = ListUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUtxosRequest) ProtoMessage() {}

func (x *ListUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUtxosRequest.ProtoReflect.Descriptor instead.
func (*ListUtxosRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{66}
}

func (x *ListUtxosRequest) GetAccountIndex() uint64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *ListUtxosRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListUtxosReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of all unspent utxos.
	Unspents []*UtxoInfo `protobuf:"bytes,1,rep,name=unspents,proto3" json:"unspents,omitempty"`
	// The list of all spent utxos.
	Spents []*UtxoInfo `protobuf:"bytes,2,rep,name=spents,proto3" json:"spents,omitempty"`
	// The list of all currently locked utxos.
	Locks []*UtxoInfo `protobuf:"bytes,3,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (x *ListUtxosReply) Reset() {
	*x = ListUtxosReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUtxosReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUtxosReply) ProtoMessage() {}

func (x *ListUtxosReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUtxosReply.ProtoReflect.Descriptor instead.
func (*ListUtxosReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{67}
}

func (x *ListUtxosReply) GetUnspents() []*UtxoInfo {
	if x != nil {
		return x.Unspents
	}
	return nil
}

func (x *ListUtxosReply) GetSpents() []*UtxoInfo {
	if x != nil {
		return x.Spents
	}
	return nil
}

func (x *ListUtxosReply) GetLocks() []*UtxoInfo {
	if x != nil {
		return x.Locks
	}
	return nil
}

type AddWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The endpoint of the external service to reach.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// The action for which the webhook should be registered.
	Action ActionType `protobuf:"varint,2,opt,name=action,proto3,enum=ActionType" json:"action,omitempty"`
	// The secret to use for signign a JWT token for an authenticated request
	// to the external service.
	Secret string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *AddWebhookRequest) Reset() {
	*x = AddWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWebhookRequest) ProtoMessage() {}

func (x *AddWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWebhookRequest.ProtoReflect.Descriptor instead.
func (*AddWebhookRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{68}
}

func (x *AddWebhookRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AddWebhookRequest) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_TRADE_SETTLED
}

func (x *AddWebhookRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type AddWebhookReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the new webhook.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddWebhookReply) Reset() {
	*x = AddWebhookReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWebhookReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWebhookReply) ProtoMessage() {}

func (x *AddWebhookReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWebhookReply.ProtoReflect.Descriptor instead.
func (*AddWebhookReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{69}
}

func (x *AddWebhookReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the webhook to remove.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveWebhookRequest) Reset() {
	*x = RemoveWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWebhookRequest) ProtoMessage() {}

func (x *RemoveWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWebhookRequest.ProtoReflect.Descriptor instead.
func (*RemoveWebhookRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{70}
}

func (x *RemoveWebhookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveWebhookReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveWebhookReply) Reset() {
	*x = RemoveWebhookReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWebhookReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWebhookReply) ProtoMessage() {}

func (x *RemoveWebhookReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWebhookReply.ProtoReflect.Descriptor instead.
func (*RemoveWebhookReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{71}
}

type ListWebhooksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action for which filtering the list of webhooks.
	Action ActionType `protobuf:"varint,1,opt,name=action,proto3,enum=ActionType" json:"action,omitempty"`
}

func (x *ListWebhooksRequest) Reset() {
	*x = ListWebhooksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebhooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhooksRequest) ProtoMessage() {}

func (x *ListWebhooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhooksRequest.ProtoReflect.Descriptor instead.
func (*ListWebhooksRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{72}
}

func (x *ListWebhooksRequest) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_TRADE_SETTLED
}

type ListWebhooksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of info about the webhooks regitered for an action.
	WebhookInfo []*WebhookInfo `protobuf:"bytes,1,rep,name=webhook_info,json=webhookInfo,proto3" json:"webhook_info,omitempty"`
}

func (x *ListWebhooksReply) Reset() {
	*x = ListWebhooksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebhooksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhooksReply) ProtoMessage() {}

func (x *ListWebhooksReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhooksReply.ProtoReflect.Descriptor instead.
func (*ListWebhooksReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{73}
}

func (x *ListWebhooksReply) GetWebhookInfo() []*WebhookInfo {
	if x != nil {
		return x.WebhookInfo
	}
	return nil
}

type ListDepositsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the wallet account for which listing the deposits.
	AccountIndex int64 `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The page for a paginated reply.
	Page *Page `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListDepositsRequest) Reset() {
	*x = ListDepositsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepositsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepositsRequest) ProtoMessage() {}

func (x *ListDepositsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepositsRequest.ProtoReflect.Descriptor instead.
func (*ListDepositsRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{74}
}

func (x *ListDepositsRequest) GetAccountIndex() int64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *ListDepositsRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListDepositsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the wallet account.
	AccountIndex int64 `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The list of info about the deposits.
	Deposits []*Deposit `protobuf:"bytes,2,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (x *ListDepositsReply) Reset() {
	*x = ListDepositsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepositsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepositsReply) ProtoMessage() {}

func (x *ListDepositsReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepositsReply.ProtoReflect.Descriptor instead.
func (*ListDepositsReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{75}
}

func (x *ListDepositsReply) GetAccountIndex() int64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *ListDepositsReply) GetDeposits() []*Deposit {
	if x != nil {
		return x.Deposits
	}
	return nil
}

type ListWithdrawalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the wallet account for which listing the withdrawals.
	AccountIndex int64 `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The page for a paginated reply.
	Page *Page `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListWithdrawalsRequest) Reset() {
	*x = ListWithdrawalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWithdrawalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWithdrawalsRequest) ProtoMessage() {}

func (x *ListWithdrawalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWithdrawalsRequest.ProtoReflect.Descriptor instead.
func (*ListWithdrawalsRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{76}
}

func (x *ListWithdrawalsRequest) GetAccountIndex() int64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *ListWithdrawalsRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListWithdrawalsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the wallet account.
	AccountIndex int64 `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The list of info about the withdrawals.
	Withdrawals []*Withdrawal `protobuf:"bytes,2,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (x *ListWithdrawalsReply) Reset() {
	*x = ListWithdrawalsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWithdrawalsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWithdrawalsReply) ProtoMessage() {}

func (x *ListWithdrawalsReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWithdrawalsReply.ProtoReflect.Descriptor instead.
func (*ListWithdrawalsReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{77}
}

func (x *ListWithdrawalsReply) GetAccountIndex() int64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *ListWithdrawalsReply) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the wallet account.
	AccountIndex uint32 `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The full derivation path.
	DerivationPath string `protobuf:"bytes,2,opt,name=derivation_path,json=derivationPath,proto3" json:"derivation_path,omitempty"`
	// The master public key.
	Xpub string `protobuf:"bytes,3,opt,name=xpub,proto3" json:"xpub,omitempty"`
	// The index of the last external address derived.
	LastExternalDerived uint32 `protobuf:"varint,4,opt,name=last_external_derived,json=lastExternalDerived,proto3" json:"last_external_derived,omitempty"`
	// The index of the last internal address derived.
	LastInternalDerived uint32 `protobuf:"varint,5,opt,name=last_internal_derived,json=lastInternalDerived,proto3" json:"last_internal_derived,omitempty"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{78}
}

func (x *AccountInfo) GetAccountIndex() uint32 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *AccountInfo) GetDerivationPath() string {
	if x != nil {
		return x.DerivationPath
	}
	return ""
}

func (x *AccountInfo) GetXpub() string {
	if x != nil {
		return x.Xpub
	}
	return ""
}

func (x *AccountInfo) GetLastExternalDerived() uint32 {
	if x != nil {
		return x.LastExternalDerived
	}
	return 0
}

func (x *AccountInfo) GetLastInternalDerived() uint32 {
	if x != nil {
		return x.LastInternalDerived
	}
	return 0
}

type MarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset pair of the market
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The percentage and fixed fees
	Fee *types.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// Whether the market is opened or closed.
	Tradable bool `protobuf:"varint,3,opt,name=tradable,proto3" json:"tradable,omitempty"`
	// The making strategy.
	StrategyType StrategyType `protobuf:"varint,4,opt,name=strategy_type,json=strategyType,proto3,enum=StrategyType" json:"strategy_type,omitempty"`
	// The index of the wallet account.
	AccountIndex uint64 `protobuf:"varint,5,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The current price in case the strategy is PLUGGABLE.
	Price *types.Price `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// The current unlocked balance.
	Balance *types.Balance `protobuf:"bytes,7,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *MarketInfo) Reset() {
	*x = MarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketInfo) ProtoMessage() {}

func (x *MarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketInfo.ProtoReflect.Descriptor instead.
func (*MarketInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{79}
}

func (x *MarketInfo) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *MarketInfo) GetFee() *types.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *MarketInfo) GetTradable() bool {
	if x != nil {
		return x.Tradable
	}
	return false
}

func (x *MarketInfo) GetStrategyType() StrategyType {
	if x != nil {
		return x.StrategyType
	}
	return StrategyType_PLUGGABLE
}

func (x *MarketInfo) GetAccountIndex() uint64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *MarketInfo) GetPrice() *types.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *MarketInfo) GetBalance() *types.Balance {
	if x != nil {
		return x.Balance
	}
	return nil
}

type UtxoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint <hash, index>
	Outpoint *TxOutpoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The unblinded value.
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The unblinded asset.
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *UtxoInfo) Reset() {
	*x = UtxoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoInfo) ProtoMessage() {}

func (x *UtxoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoInfo.ProtoReflect.Descriptor instead.
func (*UtxoInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{80}
}

func (x *UtxoInfo) GetOutpoint() *TxOutpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *UtxoInfo) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UtxoInfo) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

type TradeStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the trade.
	Status TradeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=TradeStatus" json:"status,omitempty"`
	// Whether it is failed in the current status.
	Failed bool `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *TradeStatusInfo) Reset() {
	*x = TradeStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStatusInfo) ProtoMessage() {}

func (x *TradeStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStatusInfo.ProtoReflect.Descriptor instead.
func (*TradeStatusInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{81}
}

func (x *TradeStatusInfo) GetStatus() TradeStatus {
	if x != nil {
		return x.Status
	}
	return TradeStatus_UNDEFINED
}

func (x *TradeStatusInfo) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

type SwapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proposer's quantity.
	AmountP uint64 `protobuf:"varint,1,opt,name=amount_p,json=amountP,proto3" json:"amount_p,omitempty"`
	// The proposer's asset hash.
	AssetP string `protobuf:"bytes,2,opt,name=asset_p,json=assetP,proto3" json:"asset_p,omitempty"`
	// The responder's quantity.
	AmountR uint64 `protobuf:"varint,3,opt,name=amount_r,json=amountR,proto3" json:"amount_r,omitempty"`
	// The responder's asset hash.
	AssetR string `protobuf:"bytes,4,opt,name=asset_r,json=assetR,proto3" json:"asset_r,omitempty"`
}

func (x *SwapInfo) Reset() {
	*x = SwapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInfo) ProtoMessage() {}

func (x *SwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInfo.ProtoReflect.Descriptor instead.
func (*SwapInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{82}
}

func (x *SwapInfo) GetAmountP() uint64 {
	if x != nil {
		return x.AmountP
	}
	return 0
}

func (x *SwapInfo) GetAssetP() string {
	if x != nil {
		return x.AssetP
	}
	return ""
}

func (x *SwapInfo) GetAmountR() uint64 {
	if x != nil {
		return x.AmountR
	}
	return 0
}

func (x *SwapInfo) GetAssetR() string {
	if x != nil {
		return x.AssetR
	}
	return ""
}

type SwapFailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code.
	FailureCode uint32 `protobuf:"varint,1,opt,name=failure_code,json=failureCode,proto3" json:"failure_code,omitempty"`
	// The error message.
	FailureMessage string `protobuf:"bytes,2,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *SwapFailInfo) Reset() {
	*x = SwapFailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapFailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapFailInfo) ProtoMessage() {}

func (x *SwapFailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapFailInfo.ProtoReflect.Descriptor instead.
func (*SwapFailInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{83}
}

func (x *SwapFailInfo) GetFailureCode() uint32 {
	if x != nil {
		return x.FailureCode
	}
	return 0
}

func (x *SwapFailInfo) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the trade.
	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// The info about the status of the trade.
	Status *TradeStatusInfo `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// The info about the swap.
	SwapInfo *SwapInfo `protobuf:"bytes,3,opt,name=swap_info,json=swapInfo,proto3" json:"swap_info,omitempty"`
	// The info of an eventually failed swap.
	FailInfo *SwapFailInfo `protobuf:"bytes,4,opt,name=fail_info,json=failInfo,proto3" json:"fail_info,omitempty"`
	// The collected fee on the current swap.
	MarketWithFee *types.MarketWithFee `protobuf:"bytes,5,opt,name=market_with_fee,json=marketWithFee,proto3" json:"market_with_fee,omitempty"`
	// The prices of the trade at request time.
	Price *TradePrice `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// The eventual tx url with blinders in case the trade is settled.
	TxUrl string `protobuf:"bytes,7,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	// The unix timestamp of the SwapRequest.
	RequestTimeUnix uint64 `protobuf:"varint,8,opt,name=request_time_unix,json=requestTimeUnix,proto3" json:"request_time_unix,omitempty"`
	// The unix timestamp SwapAccept.
	AcceptTimeUnix uint64 `protobuf:"varint,9,opt,name=accept_time_unix,json=acceptTimeUnix,proto3" json:"accept_time_unix,omitempty"`
	// The unix timestamp of the SwapComplete.
	CompleteTimeUnix uint64 `protobuf:"varint,10,opt,name=complete_time_unix,json=completeTimeUnix,proto3" json:"complete_time_unix,omitempty"`
	// The unix timestamp of the settlement date.
	SettleTimeUnix uint64 `protobuf:"varint,11,opt,name=settle_time_unix,json=settleTimeUnix,proto3" json:"settle_time_unix,omitempty"`
	// The unix timestamp of the expiration date.
	ExpiryTimeUnix uint64 `protobuf:"varint,12,opt,name=expiry_time_unix,json=expiryTimeUnix,proto3" json:"expiry_time_unix,omitempty"`
	// The UTC timestamp of the SwapRequest.
	RequestTimeUtc string `protobuf:"bytes,13,opt,name=request_time_utc,json=requestTimeUtc,proto3" json:"request_time_utc,omitempty"`
	// The UTC timestamp of the SwapAccept.
	AcceptTimeUtc string `protobuf:"bytes,14,opt,name=accept_time_utc,json=acceptTimeUtc,proto3" json:"accept_time_utc,omitempty"`
	// The UTC timestamp of the SwapComplete.
	CompleteTimeUtc string `protobuf:"bytes,15,opt,name=complete_time_utc,json=completeTimeUtc,proto3" json:"complete_time_utc,omitempty"`
	// The UTC timestamp of the settlement date.
	SettleTimeUtc string `protobuf:"bytes,16,opt,name=settle_time_utc,json=settleTimeUtc,proto3" json:"settle_time_utc,omitempty"`
	// The UTC timestamp of the expiration date.
	ExpiryTimeUtc string `protobuf:"bytes,17,opt,name=expiry_time_utc,json=expiryTimeUtc,proto3" json:"expiry_time_utc,omitempty"`
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{84}
}

func (x *TradeInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *TradeInfo) GetStatus() *TradeStatusInfo {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TradeInfo) GetSwapInfo() *SwapInfo {
	if x != nil {
		return x.SwapInfo
	}
	return nil
}

func (x *TradeInfo) GetFailInfo() *SwapFailInfo {
	if x != nil {
		return x.FailInfo
	}
	return nil
}

func (x *TradeInfo) GetMarketWithFee() *types.MarketWithFee {
	if x != nil {
		return x.MarketWithFee
	}
	return nil
}

func (x *TradeInfo) GetPrice() *TradePrice {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *TradeInfo) GetTxUrl() string {
	if x != nil {
		return x.TxUrl
	}
	return ""
}

func (x *TradeInfo) GetRequestTimeUnix() uint64 {
	if x != nil {
		return x.RequestTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetAcceptTimeUnix() uint64 {
	if x != nil {
		return x.AcceptTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetCompleteTimeUnix() uint64 {
	if x != nil {
		return x.CompleteTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetSettleTimeUnix() uint64 {
	if x != nil {
		return x.SettleTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetExpiryTimeUnix() uint64 {
	if x != nil {
		return x.ExpiryTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetRequestTimeUtc() string {
	if x != nil {
		return x.RequestTimeUtc
	}
	return ""
}

func (x *TradeInfo) GetAcceptTimeUtc() string {
	if x != nil {
		return x.AcceptTimeUtc
	}
	return ""
}

func (x *TradeInfo) GetCompleteTimeUtc() string {
	if x != nil {
		return x.CompleteTimeUtc
	}
	return ""
}

func (x *TradeInfo) GetSettleTimeUtc() string {
	if x != nil {
		return x.SettleTimeUtc
	}
	return ""
}

func (x *TradeInfo) GetExpiryTimeUtc() string {
	if x != nil {
		return x.ExpiryTimeUtc
	}
	return ""
}

type FeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the trade.
	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// The percentage fee applied to the trade.
	BasisPoint int64 `protobuf:"varint,2,opt,name=basis_point,json=basisPoint,proto3" json:"basis_point,omitempty"`
	// The asset in which fees are collected.
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// The amount in satoshi of the percentage fee.
	PercentageFeeAmount uint64 `protobuf:"varint,4,opt,name=percentage_fee_amount,json=percentageFeeAmount,proto3" json:"percentage_fee_amount,omitempty"`
	// The amount in satoshi of the fixed fee.
	FixedFeeAmount uint64 `protobuf:"varint,5,opt,name=fixed_fee_amount,json=fixedFeeAmount,proto3" json:"fixed_fee_amount,omitempty"`
	// The market price when the trade propoal was accepted.
	MarketPrice float32 `protobuf:"fixed32,6,opt,name=market_price,json=marketPrice,proto3" json:"market_price,omitempty"`
}

func (x *FeeInfo) Reset() {
	*x = FeeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfo) ProtoMessage() {}

func (x *FeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfo.ProtoReflect.Descriptor instead.
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{85}
}

func (x *FeeInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *FeeInfo) GetBasisPoint() int64 {
	if x != nil {
		return x.BasisPoint
	}
	return 0
}

func (x *FeeInfo) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *FeeInfo) GetPercentageFeeAmount() uint64 {
	if x != nil {
		return x.PercentageFeeAmount
	}
	return 0
}

func (x *FeeInfo) GetFixedFeeAmount() uint64 {
	if x != nil {
		return x.FixedFeeAmount
	}
	return 0
}

func (x *FeeInfo) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

type TxOutpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the transaction.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The index of the output.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TxOutpoint) Reset() {
	*x = TxOutpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutpoint) ProtoMessage() {}

func (x *TxOutpoint) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutpoint.ProtoReflect.Descriptor instead.
func (*TxOutpoint) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{86}
}

func (x *TxOutpoint) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TxOutpoint) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type TradePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasePrice  float64 `protobuf:"fixed64,1,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`
	QuotePrice float64 `protobuf:"fixed64,2,opt,name=quote_price,json=quotePrice,proto3" json:"quote_price,omitempty"`
}

func (x *TradePrice) Reset() {
	*x = TradePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePrice) ProtoMessage() {}

func (x *TradePrice) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePrice.ProtoReflect.Descriptor instead.
func (*TradePrice) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{87}
}

func (x *TradePrice) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *TradePrice) GetQuotePrice() float64 {
	if x != nil {
		return x.QuotePrice
	}
	return 0
}

type WebhookInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the webhook.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The endpoint of the external service to reach.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Whether the outgoing requests are authenticated.
	IsSecured bool `protobuf:"varint,3,opt,name=is_secured,json=isSecured,proto3" json:"is_secured,omitempty"`
}

func (x *WebhookInfo) Reset() {
	*x = WebhookInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookInfo) ProtoMessage() {}

func (x *WebhookInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookInfo.ProtoReflect.Descriptor instead.
func (*WebhookInfo) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{88}
}

func (x *WebhookInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebhookInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *WebhookInfo) GetIsSecured() bool {
	if x != nil {
		return x.IsSecured
	}
	return false
}

type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The utxo deposited.
	Utxo *UtxoInfo `protobuf:"bytes,1,opt,name=utxo,proto3" json:"utxo,omitempty"`
	// The timestamp of the deposit transaction in Unix format.
	TimestampUnix uint64 `protobuf:"varint,2,opt,name=timestamp_unix,json=timestampUnix,proto3" json:"timestamp_unix,omitempty"`
	// The timestamp of the deposit transaction in UTC format.
	TimestampUtc string `protobuf:"bytes,5,opt,name=timestamp_utc,json=timestampUtc,proto3" json:"timestamp_utc,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{89}
}

func (x *Deposit) GetUtxo() *UtxoInfo {
	if x != nil {
		return x.Utxo
	}
	return nil
}

func (x *Deposit) GetTimestampUnix() uint64 {
	if x != nil {
		return x.TimestampUnix
	}
	return 0
}

func (x *Deposit) GetTimestampUtc() string {
	if x != nil {
		return x.TimestampUtc
	}
	return ""
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the transaction included in mempool/blockchain.
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// The balance withdrawn from the wallet account.
	Balance *types.Balance `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// The address where the funds have been sent.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The timestamp of the withdrawal transaction in Unix format.
	TimestampUnix uint64 `protobuf:"varint,4,opt,name=timestamp_unix,json=timestampUnix,proto3" json:"timestamp_unix,omitempty"`
	// The timestamp of the withdrawal transaction in UTC format.
	TimestampUtc string `protobuf:"bytes,5,opt,name=timestamp_utc,json=timestampUtc,proto3" json:"timestamp_utc,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{90}
}

func (x *Withdrawal) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Withdrawal) GetBalance() *types.Balance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *Withdrawal) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Withdrawal) GetTimestampUnix() uint64 {
	if x != nil {
		return x.TimestampUnix
	}
	return 0
}

func (x *Withdrawal) GetTimestampUtc() string {
	if x != nil {
		return x.TimestampUtc
	}
	return ""
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of the page.
	PageNumber int64 `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// The size of the page, ie the max length the returning list can have.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{91}
}

func (x *Page) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *Page) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetMarketReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The marker for which returning the report of collected fees.
	Market *types.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// time_range fetch market report from time range
	TimeRange *TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *GetMarketReportRequest) Reset() {
	*x = GetMarketReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketReportRequest) ProtoMessage() {}

func (x *GetMarketReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketReportRequest.ProtoReflect.Descriptor instead.
func (*GetMarketReportRequest) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{92}
}

func (x *GetMarketReportRequest) GetMarket() *types.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *GetMarketReportRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

type GetMarketReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketReport holds info about volume and collected fees
	Report *MarketReport `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *GetMarketReportReply) Reset() {
	*x = GetMarketReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketReportReply) ProtoMessage() {}

func (x *GetMarketReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketReportReply.ProtoReflect.Descriptor instead.
func (*GetMarketReportReply) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{93}
}

func (x *GetMarketReportReply) GetReport() *MarketReport {
	if x != nil {
		return x.Report
	}
	return nil
}

type MarketReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectedFees *MarketCollectedFees `protobuf:"bytes,1,opt,name=collected_fees,json=collectedFees,proto3" json:"collected_fees,omitempty"`
	Volume        *MarketVolume        `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *MarketReport) Reset() {
	*x = MarketReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketReport) ProtoMessage() {}

func (x *MarketReport) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketReport.ProtoReflect.Descriptor instead.
func (*MarketReport) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{94}
}

func (x *MarketReport) GetCollectedFees() *MarketCollectedFees {
	if x != nil {
		return x.CollectedFees
	}
	return nil
}

func (x *MarketReport) GetVolume() *MarketVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type MarketCollectedFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAmount  uint64 `protobuf:"varint,1,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAmount uint64 `protobuf:"varint,2,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
}

func (x *MarketCollectedFees) Reset() {
	*x = MarketCollectedFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketCollectedFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketCollectedFees) ProtoMessage() {}

func (x *MarketCollectedFees) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketCollectedFees.ProtoReflect.Descriptor instead.
func (*MarketCollectedFees) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{95}
}

func (x *MarketCollectedFees) GetBaseAmount() uint64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *MarketCollectedFees) GetQuoteAmount() uint64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

type MarketVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseVolume  uint64 `protobuf:"varint,1,opt,name=base_volume,json=baseVolume,proto3" json:"base_volume,omitempty"`
	QuoteVolume uint64 `protobuf:"varint,2,opt,name=quote_volume,json=quoteVolume,proto3" json:"quote_volume,omitempty"`
}

func (x *MarketVolume) Reset() {
	*x = MarketVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketVolume) ProtoMessage() {}

func (x *MarketVolume) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketVolume.ProtoReflect.Descriptor instead.
func (*MarketVolume) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{96}
}

func (x *MarketVolume) GetBaseVolume() uint64 {
	if x != nil {
		return x.BaseVolume
	}
	return 0
}

func (x *MarketVolume) GetQuoteVolume() uint64 {
	if x != nil {
		return x.QuoteVolume
	}
	return 0
}

// TimeRange is flexible type used to determine time span for which specific
// api will fetch data, either one of predefined_period or custom_period should be provided.
type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// predefined time_period till now
	PredefinedPeriod PredefinedPeriod `protobuf:"varint,1,opt,name=predefined_period,json=predefinedPeriod,proto3,enum=PredefinedPeriod" json:"predefined_period,omitempty"`
	// granular time range
	CustomPeriod *CustomPeriod `protobuf:"bytes,2,opt,name=custom_period,json=customPeriod,proto3" json:"custom_period,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{97}
}

func (x *TimeRange) GetPredefinedPeriod() PredefinedPeriod {
	if x != nil {
		return x.PredefinedPeriod
	}
	return PredefinedPeriod_NULL
}

func (x *TimeRange) GetCustomPeriod() *CustomPeriod {
	if x != nil {
		return x.CustomPeriod
	}
	return nil
}

type CustomPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start_date in RFC3339 format
	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// end_date in RFC3339 format
	EndDate string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *CustomPeriod) Reset() {
	*x = CustomPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operator_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPeriod) ProtoMessage() {}

func (x *CustomPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_operator_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPeriod.ProtoReflect.Descriptor instead.
func (*CustomPeriod) Descriptor() ([]byte, []int) {
	return file_operator_proto_rawDescGZIP(), []int{98}
}

func (x *CustomPeriod) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CustomPeriod) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

var File_operator_proto protoreflect.FileDescriptor

var file_operator_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa6, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x40, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52,
	0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62,
	0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6b, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x66, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x17, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x46, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x33,
	0x0a, 0x10, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x35,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x4f, 0x66, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x3d, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x6e, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52,
	0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x3a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x22, 0x7d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x18,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x11,
	0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x35, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x14, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x39, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x34, 0x0a,
	0x11, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x5f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70,
	0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77,
	0x61, 0x70, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a,
	0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x46, 0x65,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x50, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x50, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x1a, 0x4d, 0x0a, 0x1f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x50, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x38, 0x0a,
	0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x42, 0x79, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x29, 0x0a, 0x13, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x20, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x5c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x22, 0x4e,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x52,
	0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x22, 0x59,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x4f, 0x66, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x72, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a,
	0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x22, 0x23, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65,
	0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x19, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x20, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xae, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x44, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x48, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x73, 0x0a, 0x1e, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x42, 0x79, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x19, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x66, 0x0a, 0x1c,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x26, 0x0a, 0x24,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x19, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x23,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x48, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x21, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x22, 0x69,
	0x0a, 0x1f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x4f,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x35, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10,
	0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x52, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x06, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x55, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x6c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22,
	0x21, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x3a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x55, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52,
	0x08, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2d, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x22,
	0xd7, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x70, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x70, 0x75,
	0x62, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x0a, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5f, 0x0a, 0x08, 0x55, 0x74, 0x78, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x4f, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x72, 0x0a, 0x08, 0x53, 0x77,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x22, 0x5a,
	0x0a, 0x0c, 0x53, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x05, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x46,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78,
	0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x78, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x74, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74,
	0x63, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x74, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x22, 0xdc, 0x01, 0x0a, 0x07, 0x46, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x0a, 0x54, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x4c, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x58,
	0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64, 0x22, 0x74, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x74, 0x78, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x74,
	0x78, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x74, 0x63, 0x22, 0xab,
	0x01, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x74, 0x63, 0x22, 0x44, 0x0a, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x64, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x72, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x46, 0x65, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x13, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x48, 0x0a, 0x0c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x2a, 0x3b, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x5d, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x05, 0x2a, 0x5f, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f,
	0x57, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x03, 0x2a, 0x77, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x32, 0xd8, 0x17, 0x0a, 0x08,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12,
	0x18, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46,
	0x65, 0x65, 0x12, 0x13, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x46, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09,
	0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x4e, 0x65, 0x77, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4e,
	0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x46,
	0x65, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70,
	0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x21, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x1c,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x22, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x17, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x1f, 0x2e, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x55, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x25,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x22, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x12, 0x13, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x11, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x2e,
	0x41, 0x64, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x15, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x12, 0x14, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12,
	0x17, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x64, 0x65, 0x78, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x74, 0x64, 0x65, 0x78, 0x2d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_operator_proto_rawDescOnce sync.Once
	file_operator_proto_rawDescData = file_operator_proto_rawDesc
)

func file_operator_proto_rawDescGZIP() []byte {
	file_operator_proto_rawDescOnce.Do(func() {
		file_operator_proto_rawDescData = protoimpl.X.CompressGZIP(file_operator_proto_rawDescData)
	})
	return file_operator_proto_rawDescData
}

var file_operator_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_operator_proto_msgTypes = make([]protoimpl.MessageInfo, 102)
var file_operator_proto_goTypes = []interface{}{
	(StrategyType)(0),                            // 0: StrategyType
	(TradeStatus)(0),                             // 1: TradeStatus
	(ActionType)(0),                              // 2: ActionType
	(PredefinedPeriod)(0),                        // 3: PredefinedPeriod
	(*GetInfoRequest)(nil),                       // 4: GetInfoRequest
	(*GetInfoReply)(nil),                         // 5: GetInfoReply
	(*GetFeeAddressRequest)(nil),                 // 6: GetFeeAddressRequest
	(*GetFeeAddressReply)(nil),                   // 7: GetFeeAddressReply
	(*ListFeeAddressesRequest)(nil),              // 8: ListFeeAddressesRequest
	(*ListFeeAddressesReply)(nil),                // 9: ListFeeAddressesReply
	(*GetFeeBalanceRequest)(nil),                 // 10: GetFeeBalanceRequest
	(*GetFeeBalanceReply)(nil),                   // 11: GetFeeBalanceReply
	(*ClaimFeeDepositsRequest)(nil),              // 12: ClaimFeeDepositsRequest
	(*ClaimFeeDepositsReply)(nil),                // 13: ClaimFeeDepositsReply
	(*WithdrawFeeRequest)(nil),                   // 14: WithdrawFeeRequest
	(*WithdrawFeeReply)(nil),                     // 15: WithdrawFeeReply
	(*NewMarketRequest)(nil),                     // 16: NewMarketRequest
	(*NewMarketReply)(nil),                       // 17: NewMarketReply
	(*GetMarketInfoRequest)(nil),                 // 18: GetMarketInfoRequest
	(*GetMarketInfoReply)(nil),                   // 19: GetMarketInfoReply
	(*GetMarketAddressRequest)(nil),              // 20: GetMarketAddressRequest
	(*GetMarketAddressReply)(nil),                // 21: GetMarketAddressReply
	(*ListMarketAddressesRequest)(nil),           // 22: ListMarketAddressesRequest
	(*ListMarketAddressesReply)(nil),             // 23: ListMarketAddressesReply
	(*GetMarketBalanceRequest)(nil),              // 24: GetMarketBalanceRequest
	(*GetMarketBalanceReply)(nil),                // 25: GetMarketBalanceReply
	(*ClaimMarketDepositsRequest)(nil),           // 26: ClaimMarketDepositsRequest
	(*ClaimMarketDepositsReply)(nil),             // 27: ClaimMarketDepositsReply
	(*OpenMarketRequest)(nil),                    // 28: OpenMarketRequest
	(*OpenMarketReply)(nil),                      // 29: OpenMarketReply
	(*CloseMarketRequest)(nil),                   // 30: CloseMarketRequest
	(*CloseMarketReply)(nil),                     // 31: CloseMarketReply
	(*ListMarketsRequest)(nil),                   // 32: ListMarketsRequest
	(*ListMarketsReply)(nil),                     // 33: ListMarketsReply
	(*DropMarketRequest)(nil),                    // 34: DropMarketRequest
	(*DropMarketReply)(nil),                      // 35: DropMarketReply
	(*GetMarketCollectedSwapFeesRequest)(nil),    // 36: GetMarketCollectedSwapFeesRequest
	(*GetMarketCollectedSwapFeesReply)(nil),      // 37: GetMarketCollectedSwapFeesReply
	(*WithdrawMarketRequest)(nil),                // 38: WithdrawMarketRequest
	(*WithdrawMarketReply)(nil),                  // 39: WithdrawMarketReply
	(*UpdateMarketPercentageFeeRequest)(nil),     // 40: UpdateMarketPercentageFeeRequest
	(*UpdateMarketFixedFeeRequest)(nil),          // 41: UpdateMarketFixedFeeRequest
	(*UpdateMarketFeeReply)(nil),                 // 42: UpdateMarketFeeReply
	(*UpdateMarketPriceRequest)(nil),             // 43: UpdateMarketPriceRequest
	(*UpdateMarketPriceReply)(nil),               // 44: UpdateMarketPriceReply
	(*UpdateMarketStrategyRequest)(nil),          // 45: UpdateMarketStrategyRequest
	(*UpdateMarketStrategyReply)(nil),            // 46: UpdateMarketStrategyReply
	(*GetFeeFragmenterAddressRequest)(nil),       // 47: GetFeeFragmenterAddressRequest
	(*GetFeeFragmenterAddressReply)(nil),         // 48: GetFeeFragmenterAddressReply
	(*ListFeeFragmenterAddressesRequest)(nil),    // 49: ListFeeFragmenterAddressesRequest
	(*ListFeeFragmenterAddressesReply)(nil),      // 50: ListFeeFragmenterAddressesReply
	(*GetFeeFragmenterBalanceRequest)(nil),       // 51: GetFeeFragmenterBalanceRequest
	(*GetFeeFragmenterBalanceReply)(nil),         // 52: GetFeeFragmenterBalanceReply
	(*FeeFragmenterSplitFundsRequest)(nil),       // 53: FeeFragmenterSplitFundsRequest
	(*FragmenterSplitFundsReply)(nil),            // 54: FragmenterSplitFundsReply
	(*WithdrawFeeFragmenterRequest)(nil),         // 55: WithdrawFeeFragmenterRequest
	(*WithdrawFeeFragmenterReply)(nil),           // 56: WithdrawFeeFragmenterReply
	(*GetMarketFragmenterAddressRequest)(nil),    // 57: GetMarketFragmenterAddressRequest
	(*GetMarketFragmenterAddressReply)(nil),      // 58: GetMarketFragmenterAddressReply
	(*ListMarketFragmenterAddressesRequest)(nil), // 59: ListMarketFragmenterAddressesRequest
	(*ListMarketFragmenterAddressesReply)(nil),   // 60: ListMarketFragmenterAddressesReply
	(*GetMarketFragmenterBalanceRequest)(nil),    // 61: GetMarketFragmenterBalanceRequest
	(*GetMarketFragmenterBalanceReply)(nil),      // 62: GetMarketFragmenterBalanceReply
	(*MarketFragmenterSplitFundsRequest)(nil),    // 63: MarketFragmenterSplitFundsRequest
	(*WithdrawMarketFragmenterRequest)(nil),      // 64: WithdrawMarketFragmenterRequest
	(*WithdrawMarketFragmenterReply)(nil),        // 65: WithdrawMarketFragmenterReply
	(*ListTradesRequest)(nil),                    // 66: ListTradesRequest
	(*ListTradesReply)(nil),                      // 67: ListTradesReply
	(*ReloadUtxosRequest)(nil),                   // 68: ReloadUtxosRequest
	(*ReloadUtxosReply)(nil),                     // 69: ReloadUtxosReply
	(*ListUtxosRequest)(nil),                     // 70: ListUtxosRequest
	(*ListUtxosReply)(nil),                       // 71: ListUtxosReply
	(*AddWebhookRequest)(nil),                    // 72: AddWebhookRequest
	(*AddWebhookReply)(nil),                      // 73: AddWebhookReply
	(*RemoveWebhookRequest)(nil),                 // 74: RemoveWebhookRequest
	(*RemoveWebhookReply)(nil),                   // 75: RemoveWebhookReply
	(*ListWebhooksRequest)(nil),                  // 76: ListWebhooksRequest
	(*ListWebhooksReply)(nil),                    // 77: ListWebhooksReply
	(*ListDepositsRequest)(nil),                  // 78: ListDepositsRequest
	(*ListDepositsReply)(nil),                    // 79: ListDepositsReply
	(*ListWithdrawalsRequest)(nil),               // 80: ListWithdrawalsRequest
	(*ListWithdrawalsReply)(nil),                 // 81: ListWithdrawalsReply
	(*AccountInfo)(nil),                          // 82: AccountInfo
	(*MarketInfo)(nil),                           // 83: MarketInfo
	(*UtxoInfo)(nil),                             // 84: UtxoInfo
	(*TradeStatusInfo)(nil),                      // 85: TradeStatusInfo
	(*SwapInfo)(nil),                             // 86: SwapInfo
	(*SwapFailInfo)(nil),                         // 87: SwapFailInfo
	(*TradeInfo)(nil),                            // 88: TradeInfo
	(*FeeInfo)(nil),                              // 89: FeeInfo
	(*TxOutpoint)(nil),                           // 90: TxOutpoint
	(*TradePrice)(nil),                           // 91: TradePrice
	(*WebhookInfo)(nil),                          // 92: WebhookInfo
	(*Deposit)(nil),                              // 93: Deposit
	(*Withdrawal)(nil),                           // 94: Withdrawal
	(*Page)(nil),                                 // 95: Page
	(*GetMarketReportRequest)(nil),               // 96: GetMarketReportRequest
	(*GetMarketReportReply)(nil),                 // 97: GetMarketReportReply
	(*MarketReport)(nil),                         // 98: MarketReport
	(*MarketCollectedFees)(nil),                  // 99: MarketCollectedFees
	(*MarketVolume)(nil),                         // 100: MarketVolume
	(*TimeRange)(nil),                            // 101: TimeRange
	(*CustomPeriod)(nil),                         // 102: CustomPeriod
	nil,                                          // 103: GetMarketCollectedSwapFeesReply.TotalCollectedFeesPerAssetEntry
	nil,                                          // 104: GetFeeFragmenterBalanceReply.BalanceEntry
	nil,                                          // 105: GetMarketFragmenterBalanceReply.BalanceEntry
	(*types.AddressWithBlindingKey)(nil),         // 106: AddressWithBlindingKey
	(*types.Market)(nil),                         // 107: Market
	(*types.Balance)(nil),                        // 108: Balance
	(*types.Fixed)(nil),                          // 109: Fixed
	(*types.MarketWithFee)(nil),                  // 110: MarketWithFee
	(*types.Price)(nil),                          // 111: Price
	(*types.Fee)(nil),                            // 112: Fee
	(*wallet.BalanceInfo)(nil),                   // 113: BalanceInfo
}
var file_operator_proto_depIdxs = []int32{
	82,  // 0: GetInfoReply.account_info:type_name -> AccountInfo
	106, // 1: GetFeeAddressReply.address_with_blinding_key:type_name -> AddressWithBlindingKey
	106, // 2: ListFeeAddressesReply.address_with_blinding_key:type_name -> AddressWithBlindingKey
	90,  // 3: ClaimFeeDepositsRequest.outpoints:type_name -> TxOutpoint
	107, // 4: NewMarketRequest.market:type_name -> Market
	107, // 5: GetMarketInfoRequest.market:type_name -> Market
	83,  // 6: GetMarketInfoReply.info:type_name -> MarketInfo
	107, // 7: GetMarketAddressRequest.market:type_name -> Market
	106, // 8: GetMarketAddressReply.address_with_blinding_key:type_name -> AddressWithBlindingKey
	107, // 9: ListMarketAddressesRequest.market:type_name -> Market
	106, // 10: ListMarketAddressesReply.address_with_blinding_key:type_name -> AddressWithBlindingKey
	107, // 11: GetMarketBalanceRequest.market:type_name -> Market
	108, // 12: GetMarketBalanceReply.available_balance:type_name -> Balance
	108, // 13: GetMarketBalanceReply.total_balance:type_name -> Balance
	107, // 14: ClaimMarketDepositsRequest.market:type_name -> Market
	90,  // 15: ClaimMarketDepositsRequest.outpoints:type_name -> TxOutpoint
	107, // 16: OpenMarketRequest.market:type_name -> Market
	107, // 17: CloseMarketRequest.market:type_name -> Market
	83,  // 18: ListMarketsReply.markets:type_name -> MarketInfo
	107, // 19: DropMarketRequest.market:type_name -> Market
	107, // 20: GetMarketCollectedSwapFeesRequest.market:type_name -> Market
	95,  // 21: GetMarketCollectedSwapFeesRequest.page:type_name -> Page
	89,  // 22: GetMarketCollectedSwapFeesReply.collected_fees:type_name -> FeeInfo
	103, // 23: GetMarketCollectedSwapFeesReply.total_collected_fees_per_asset:type_name -> GetMarketCollectedSwapFeesReply.TotalCollectedFeesPerAssetEntry
	107, // 24: WithdrawMarketRequest.market:type_name -> Market
	108, // 25: WithdrawMarketRequest.balance_to_withdraw:type_name -> Balance
	107, // 26: UpdateMarketPercentageFeeRequest.market:type_name -> Market
	107, // 27: UpdateMarketFixedFeeRequest.market:type_name -> Market
	109, // 28: UpdateMarketFixedFeeRequest.fixed:type_name -> Fixed
	110, // 29: UpdateMarketFeeReply.market_with_fee:type_name -> MarketWithFee
	107, // 30: UpdateMarketPriceRequest.market:type_name -> Market
	111, // 31: UpdateMarketPriceRequest.price:type_name -> Price
	107, // 32: UpdateMarketStrategyRequest.market:type_name -> Market
	0,   // 33: UpdateMarketStrategyRequest.strategy_type:type_name -> StrategyType
	106, // 34: GetFeeFragmenterAddressReply.address_with_blinding_key:type_name -> AddressWithBlindingKey
	106, // 35: ListFeeFragmenterAddressesReply.address_with_blinding_key:type_name -> AddressWithBlindingKey
	104, // 36: GetFeeFragmenterBalanceReply.balance:type_name -> GetFeeFragmenterBalanceReply.BalanceEntry
	106, // 37: GetMarketFragmenterAddressReply.address_with_blinding_key:type_name -> AddressWithBlindingKey
	106, // 38: ListMarketFragmenterAddressesReply.address_with_blinding_key:type_name -> AddressWithBlindingKey
	105, // 39: GetMarketFragmenterBalanceReply.balance:type_name -> GetMarketFragmenterBalanceReply.BalanceEntry
	107, // 40: MarketFragmenterSplitFundsRequest.market:type_name -> Market
	107, // 41: ListTradesRequest.market:type_name -> Market
	95,  // 42: ListTradesRequest.page:type_name -> Page
	88,  // 43: ListTradesReply.trades:type_name -> TradeInfo
	95,  // 44: ListUtxosRequest.page:type_name -> Page
	84,  // 45: ListUtxosReply.unspents:type_name -> UtxoInfo
	84,  // 46: ListUtxosReply.spents:type_name -> UtxoInfo
	84,  // 47: ListUtxosReply.locks:type_name -> UtxoInfo
	2,   // 48: AddWebhookRequest.action:type_name -> ActionType
	2,   // 49: ListWebhooksRequest.action:type_name -> ActionType
	92,  // 50: ListWebhooksReply.webhook_info:type_name -> WebhookInfo
	95,  // 51: ListDepositsRequest.page:type_name -> Page
	93,  // 52: ListDepositsReply.deposits:type_name -> Deposit
	95,  // 53: ListWithdrawalsRequest.page:type_name -> Page
	94,  // 54: ListWithdrawalsReply.withdrawals:type_name -> Withdrawal
	107, // 55: MarketInfo.market:type_name -> Market
	112, // 56: MarketInfo.fee:type_name -> Fee
	0,   // 57: MarketInfo.strategy_type:type_name -> StrategyType
	111, // 58: MarketInfo.price:type_name -> Price
	108, // 59: MarketInfo.balance:type_name -> Balance
	90,  // 60: UtxoInfo.outpoint:type_name -> TxOutpoint
	1,   // 61: TradeStatusInfo.status:type_name -> TradeStatus
	85,  // 62: TradeInfo.status:type_name -> TradeStatusInfo
	86,  // 63: TradeInfo.swap_info:type_name -> SwapInfo
	87,  // 64: TradeInfo.fail_info:type_name -> SwapFailInfo
	110, // 65: TradeInfo.market_with_fee:type_name -> MarketWithFee
	91,  // 66: TradeInfo.price:type_name -> TradePrice
	84,  // 67: Deposit.utxo:type_name -> UtxoInfo
	108, // 68: Withdrawal.balance:type_name -> Balance
	107, // 69: GetMarketReportRequest.market:type_name -> Market
	101, // 70: GetMarketReportRequest.time_range:type_name -> TimeRange
	98,  // 71: GetMarketReportReply.report:type_name -> MarketReport
	99,  // 72: MarketReport.collected_fees:type_name -> MarketCollectedFees
	100, // 73: MarketReport.volume:type_name -> MarketVolume
	3,   // 74: TimeRange.predefined_period:type_name -> PredefinedPeriod
	102, // 75: TimeRange.custom_period:type_name -> CustomPeriod
	113, // 76: GetFeeFragmenterBalanceReply.BalanceEntry.value:type_name -> BalanceInfo
	113, // 77: GetMarketFragmenterBalanceReply.BalanceEntry.value:type_name -> BalanceInfo
	4,   // 78: Operator.GetInfo:input_type -> GetInfoRequest
	6,   // 79: Operator.GetFeeAddress:input_type -> GetFeeAddressRequest
	8,   // 80: Operator.ListFeeAddresses:input_type -> ListFeeAddressesRequest
	10,  // 81: Operator.GetFeeBalance:input_type -> GetFeeBalanceRequest
	12,  // 82: Operator.ClaimFeeDeposits:input_type -> ClaimFeeDepositsRequest
	14,  // 83: Operator.WithdrawFee:input_type -> WithdrawFeeRequest
	16,  // 84: Operator.NewMarket:input_type -> NewMarketRequest
	18,  // 85: Operator.GetMarketInfo:input_type -> GetMarketInfoRequest
	20,  // 86: Operator.GetMarketAddress:input_type -> GetMarketAddressRequest
	22,  // 87: Operator.ListMarketAddresses:input_type -> ListMarketAddressesRequest
	24,  // 88: Operator.GetMarketBalance:input_type -> GetMarketBalanceRequest
	26,  // 89: Operator.ClaimMarketDeposits:input_type -> ClaimMarketDepositsRequest
	28,  // 90: Operator.OpenMarket:input_type -> OpenMarketRequest
	30,  // 91: Operator.CloseMarket:input_type -> CloseMarketRequest
	34,  // 92: Operator.DropMarket:input_type -> DropMarketRequest
	36,  // 93: Operator.GetMarketCollectedSwapFees:input_type -> GetMarketCollectedSwapFeesRequest
	38,  // 94: Operator.WithdrawMarket:input_type -> WithdrawMarketRequest
	40,  // 95: Operator.UpdateMarketPercentageFee:input_type -> UpdateMarketPercentageFeeRequest
	41,  // 96: Operator.UpdateMarketFixedFee:input_type -> UpdateMarketFixedFeeRequest
	43,  // 97: Operator.UpdateMarketPrice:input_type -> UpdateMarketPriceRequest
	45,  // 98: Operator.UpdateMarketStrategy:input_type -> UpdateMarketStrategyRequest
	47,  // 99: Operator.GetFeeFragmenterAddress:input_type -> GetFeeFragmenterAddressRequest
	49,  // 100: Operator.ListFeeFragmenterAddresses:input_type -> ListFeeFragmenterAddressesRequest
	51,  // 101: Operator.GetFeeFragmenterBalance:input_type -> GetFeeFragmenterBalanceRequest
	53,  // 102: Operator.FeeFragmenterSplitFunds:input_type -> FeeFragmenterSplitFundsRequest
	55,  // 103: Operator.WithdrawFeeFragmenter:input_type -> WithdrawFeeFragmenterRequest
	57,  // 104: Operator.GetMarketFragmenterAddress:input_type -> GetMarketFragmenterAddressRequest
	59,  // 105: Operator.ListMarketFragmenterAddresses:input_type -> ListMarketFragmenterAddressesRequest
	61,  // 106: Operator.GetMarketFragmenterBalance:input_type -> GetMarketFragmenterBalanceRequest
	63,  // 107: Operator.MarketFragmenterSplitFunds:input_type -> MarketFragmenterSplitFundsRequest
	64,  // 108: Operator.WithdrawMarketFragmenter:input_type -> WithdrawMarketFragmenterRequest
	32,  // 109: Operator.ListMarkets:input_type -> ListMarketsRequest
	66,  // 110: Operator.ListTrades:input_type -> ListTradesRequest
	68,  // 111: Operator.ReloadUtxos:input_type -> ReloadUtxosRequest
	70,  // 112: Operator.ListUtxos:input_type -> ListUtxosRequest
	72,  // 113: Operator.AddWebhook:input_type -> AddWebhookRequest
	74,  // 114: Operator.RemoveWebhook:input_type -> RemoveWebhookRequest
	76,  // 115: Operator.ListWebhooks:input_type -> ListWebhooksRequest
	78,  // 116: Operator.ListDeposits:input_type -> ListDepositsRequest
	80,  // 117: Operator.ListWithdrawals:input_type -> ListWithdrawalsRequest
	96,  // 118: Operator.GetMarketReport:input_type -> GetMarketReportRequest
	5,   // 119: Operator.GetInfo:output_type -> GetInfoReply
	7,   // 120: Operator.GetFeeAddress:output_type -> GetFeeAddressReply
	9,   // 121: Operator.ListFeeAddresses:output_type -> ListFeeAddressesReply
	11,  // 122: Operator.GetFeeBalance:output_type -> GetFeeBalanceReply
	13,  // 123: Operator.ClaimFeeDeposits:output_type -> ClaimFeeDepositsReply
	15,  // 124: Operator.WithdrawFee:output_type -> WithdrawFeeReply
	17,  // 125: Operator.NewMarket:output_type -> NewMarketReply
	19,  // 126: Operator.GetMarketInfo:output_type -> GetMarketInfoReply
	21,  // 127: Operator.GetMarketAddress:output_type -> GetMarketAddressReply
	23,  // 128: Operator.ListMarketAddresses:output_type -> ListMarketAddressesReply
	25,  // 129: Operator.GetMarketBalance:output_type -> GetMarketBalanceReply
	27,  // 130: Operator.ClaimMarketDeposits:output_type -> ClaimMarketDepositsReply
	29,  // 131: Operator.OpenMarket:output_type -> OpenMarketReply
	31,  // 132: Operator.CloseMarket:output_type -> CloseMarketReply
	35,  // 133: Operator.DropMarket:output_type -> DropMarketReply
	37,  // 134: Operator.GetMarketCollectedSwapFees:output_type -> GetMarketCollectedSwapFeesReply
	39,  // 135: Operator.WithdrawMarket:output_type -> WithdrawMarketReply
	42,  // 136: Operator.UpdateMarketPercentageFee:output_type -> UpdateMarketFeeReply
	42,  // 137: Operator.UpdateMarketFixedFee:output_type -> UpdateMarketFeeReply
	44,  // 138: Operator.UpdateMarketPrice:output_type -> UpdateMarketPriceReply
	46,  // 139: Operator.UpdateMarketStrategy:output_type -> UpdateMarketStrategyReply
	48,  // 140: Operator.GetFeeFragmenterAddress:output_type -> GetFeeFragmenterAddressReply
	50,  // 141: Operator.ListFeeFragmenterAddresses:output_type -> ListFeeFragmenterAddressesReply
	52,  // 142: Operator.GetFeeFragmenterBalance:output_type -> GetFeeFragmenterBalanceReply
	54,  // 143: Operator.FeeFragmenterSplitFunds:output_type -> FragmenterSplitFundsReply
	56,  // 144: Operator.WithdrawFeeFragmenter:output_type -> WithdrawFeeFragmenterReply
	58,  // 145: Operator.GetMarketFragmenterAddress:output_type -> GetMarketFragmenterAddressReply
	60,  // 146: Operator.ListMarketFragmenterAddresses:output_type -> ListMarketFragmenterAddressesReply
	62,  // 147: Operator.GetMarketFragmenterBalance:output_type -> GetMarketFragmenterBalanceReply
	54,  // 148: Operator.MarketFragmenterSplitFunds:output_type -> FragmenterSplitFundsReply
	65,  // 149: Operator.WithdrawMarketFragmenter:output_type -> WithdrawMarketFragmenterReply
	33,  // 150: Operator.ListMarkets:output_type -> ListMarketsReply
	67,  // 151: Operator.ListTrades:output_type -> ListTradesReply
	69,  // 152: Operator.ReloadUtxos:output_type -> ReloadUtxosReply
	71,  // 153: Operator.ListUtxos:output_type -> ListUtxosReply
	73,  // 154: Operator.AddWebhook:output_type -> AddWebhookReply
	75,  // 155: Operator.RemoveWebhook:output_type -> RemoveWebhookReply
	77,  // 156: Operator.ListWebhooks:output_type -> ListWebhooksReply
	79,  // 157: Operator.ListDeposits:output_type -> ListDepositsReply
	81,  // 158: Operator.ListWithdrawals:output_type -> ListWithdrawalsReply
	97,  // 159: Operator.GetMarketReport:output_type -> GetMarketReportReply
	119, // [119:160] is the sub-list for method output_type
	78,  // [78:119] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_operator_proto_init() }
func file_operator_proto_init() {
	if File_operator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_operator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeeAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeeAddressesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimFeeDepositsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimFeeDepositsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawFeeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketAddressesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimMarketDepositsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimMarketDepositsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseMarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropMarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketCollectedSwapFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketCollectedSwapFeesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawMarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketPercentageFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketFixedFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketFeeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketPriceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeFragmenterAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeFragmenterAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeeFragmenterAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeeFragmenterAddressesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeFragmenterBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeFragmenterBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeFragmenterSplitFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmenterSplitFundsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawFeeFragmenterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawFeeFragmenterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketFragmenterAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketFragmenterAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketFragmenterAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketFragmenterAddressesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketFragmenterBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketFragmenterBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketFragmenterSplitFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawMarketFragmenterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawMarketFragmenterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTradesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadUtxosReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUtxosReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWebhookReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWebhookReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebhooksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebhooksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDepositsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDepositsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWithdrawalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWithdrawalsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapFailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketCollectedFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operator_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operator_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   102,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_operator_proto_goTypes,
		DependencyIndexes: file_operator_proto_depIdxs,
		EnumInfos:         file_operator_proto_enumTypes,
		MessageInfos:      file_operator_proto_msgTypes,
	}.Build()
	File_operator_proto = out.File
	file_operator_proto_rawDesc = nil
	file_operator_proto_goTypes = nil
	file_operator_proto_depIdxs = nil
}
