// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: tdex-daemon/v1/types.proto

package tdex_daemonv1

import (
	v1 "github.com/tdex-network/tdex-daemon/api-spec/protobuf/gen/tdex/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StrategyType int32

const (
	StrategyType_STRATEGY_TYPE_PLUGGABLE  StrategyType = 0
	StrategyType_STRATEGY_TYPE_BALANCED   StrategyType = 1
	StrategyType_STRATEGY_TYPE_UNBALANCED StrategyType = 2
)

// Enum value maps for StrategyType.
var (
	StrategyType_name = map[int32]string{
		0: "STRATEGY_TYPE_PLUGGABLE",
		1: "STRATEGY_TYPE_BALANCED",
		2: "STRATEGY_TYPE_UNBALANCED",
	}
	StrategyType_value = map[string]int32{
		"STRATEGY_TYPE_PLUGGABLE":  0,
		"STRATEGY_TYPE_BALANCED":   1,
		"STRATEGY_TYPE_UNBALANCED": 2,
	}
)

func (x StrategyType) Enum() *StrategyType {
	p := new(StrategyType)
	*p = x
	return p
}

func (x StrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_tdex_daemon_v1_types_proto_enumTypes[0].Descriptor()
}

func (StrategyType) Type() protoreflect.EnumType {
	return &file_tdex_daemon_v1_types_proto_enumTypes[0]
}

func (x StrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrategyType.Descriptor instead.
func (StrategyType) EnumDescriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{0}
}

type TradeStatus int32

const (
	TradeStatus_TRADE_STATUS_UNDEFINED TradeStatus = 0
	TradeStatus_TRADE_STATUS_REQUEST   TradeStatus = 1
	TradeStatus_TRADE_STATUS_ACCEPT    TradeStatus = 2
	TradeStatus_TRADE_STATUS_COMPLETE  TradeStatus = 3
	TradeStatus_TRADE_STATUS_SETTLED   TradeStatus = 4
	TradeStatus_TRADE_STATUS_EXPIRED   TradeStatus = 5
)

// Enum value maps for TradeStatus.
var (
	TradeStatus_name = map[int32]string{
		0: "TRADE_STATUS_UNDEFINED",
		1: "TRADE_STATUS_REQUEST",
		2: "TRADE_STATUS_ACCEPT",
		3: "TRADE_STATUS_COMPLETE",
		4: "TRADE_STATUS_SETTLED",
		5: "TRADE_STATUS_EXPIRED",
	}
	TradeStatus_value = map[string]int32{
		"TRADE_STATUS_UNDEFINED": 0,
		"TRADE_STATUS_REQUEST":   1,
		"TRADE_STATUS_ACCEPT":    2,
		"TRADE_STATUS_COMPLETE":  3,
		"TRADE_STATUS_SETTLED":   4,
		"TRADE_STATUS_EXPIRED":   5,
	}
)

func (x TradeStatus) Enum() *TradeStatus {
	p := new(TradeStatus)
	*p = x
	return p
}

func (x TradeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tdex_daemon_v1_types_proto_enumTypes[1].Descriptor()
}

func (TradeStatus) Type() protoreflect.EnumType {
	return &file_tdex_daemon_v1_types_proto_enumTypes[1]
}

func (x TradeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeStatus.Descriptor instead.
func (TradeStatus) EnumDescriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{1}
}

type ActionType int32

const (
	ActionType_ACTION_TYPE_TRADE_SETTLED       ActionType = 0
	ActionType_ACTION_TYPE_ACCOUNT_LOW_BALANCE ActionType = 1
	ActionType_ACTION_TYPE_ACCOUNT_WITHDRAW    ActionType = 2
	ActionType_ACTION_TYPE_ALL_ACTIONS         ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_TYPE_TRADE_SETTLED",
		1: "ACTION_TYPE_ACCOUNT_LOW_BALANCE",
		2: "ACTION_TYPE_ACCOUNT_WITHDRAW",
		3: "ACTION_TYPE_ALL_ACTIONS",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_TRADE_SETTLED":       0,
		"ACTION_TYPE_ACCOUNT_LOW_BALANCE": 1,
		"ACTION_TYPE_ACCOUNT_WITHDRAW":    2,
		"ACTION_TYPE_ALL_ACTIONS":         3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_tdex_daemon_v1_types_proto_enumTypes[2].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_tdex_daemon_v1_types_proto_enumTypes[2]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{2}
}

type PredefinedPeriod int32

const (
	PredefinedPeriod_PREDEFINED_PERIOD_UNSPECIFIED       PredefinedPeriod = 0
	PredefinedPeriod_PREDEFINED_PERIOD_LAST_HOUR         PredefinedPeriod = 1
	PredefinedPeriod_PREDEFINED_PERIOD_LAST_DAY          PredefinedPeriod = 2
	PredefinedPeriod_PREDEFINED_PERIOD_LAST_WEEK         PredefinedPeriod = 3
	PredefinedPeriod_PREDEFINED_PERIOD_LAST_MONTH        PredefinedPeriod = 4
	PredefinedPeriod_PREDEFINED_PERIOD_LAST_THREE_MONTHS PredefinedPeriod = 5
	PredefinedPeriod_PREDEFINED_PERIOD_YEAR_TO_DATE      PredefinedPeriod = 6
	PredefinedPeriod_PREDEFINED_PERIOD_LAST_YEAR         PredefinedPeriod = 7
	PredefinedPeriod_PREDEFINED_PERIOD_ALL               PredefinedPeriod = 8
)

// Enum value maps for PredefinedPeriod.
var (
	PredefinedPeriod_name = map[int32]string{
		0: "PREDEFINED_PERIOD_UNSPECIFIED",
		1: "PREDEFINED_PERIOD_LAST_HOUR",
		2: "PREDEFINED_PERIOD_LAST_DAY",
		3: "PREDEFINED_PERIOD_LAST_WEEK",
		4: "PREDEFINED_PERIOD_LAST_MONTH",
		5: "PREDEFINED_PERIOD_LAST_THREE_MONTHS",
		6: "PREDEFINED_PERIOD_YEAR_TO_DATE",
		7: "PREDEFINED_PERIOD_LAST_YEAR",
		8: "PREDEFINED_PERIOD_ALL",
	}
	PredefinedPeriod_value = map[string]int32{
		"PREDEFINED_PERIOD_UNSPECIFIED":       0,
		"PREDEFINED_PERIOD_LAST_HOUR":         1,
		"PREDEFINED_PERIOD_LAST_DAY":          2,
		"PREDEFINED_PERIOD_LAST_WEEK":         3,
		"PREDEFINED_PERIOD_LAST_MONTH":        4,
		"PREDEFINED_PERIOD_LAST_THREE_MONTHS": 5,
		"PREDEFINED_PERIOD_YEAR_TO_DATE":      6,
		"PREDEFINED_PERIOD_LAST_YEAR":         7,
		"PREDEFINED_PERIOD_ALL":               8,
	}
)

func (x PredefinedPeriod) Enum() *PredefinedPeriod {
	p := new(PredefinedPeriod)
	*p = x
	return p
}

func (x PredefinedPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PredefinedPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_tdex_daemon_v1_types_proto_enumTypes[3].Descriptor()
}

func (PredefinedPeriod) Type() protoreflect.EnumType {
	return &file_tdex_daemon_v1_types_proto_enumTypes[3]
}

func (x PredefinedPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PredefinedPeriod.Descriptor instead.
func (PredefinedPeriod) EnumDescriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{3}
}

type TimeFrame int32

const (
	TimeFrame_TIME_FRAME_HOUR       TimeFrame = 0
	TimeFrame_TIME_FRAME_FOUR_HOURS TimeFrame = 1
	TimeFrame_TIME_FRAME_DAY        TimeFrame = 2
	TimeFrame_TIME_FRAME_WEEK       TimeFrame = 3
	TimeFrame_TIME_FRAME_MONTH      TimeFrame = 4
)

// Enum value maps for TimeFrame.
var (
	TimeFrame_name = map[int32]string{
		0: "TIME_FRAME_HOUR",
		1: "TIME_FRAME_FOUR_HOURS",
		2: "TIME_FRAME_DAY",
		3: "TIME_FRAME_WEEK",
		4: "TIME_FRAME_MONTH",
	}
	TimeFrame_value = map[string]int32{
		"TIME_FRAME_HOUR":       0,
		"TIME_FRAME_FOUR_HOURS": 1,
		"TIME_FRAME_DAY":        2,
		"TIME_FRAME_WEEK":       3,
		"TIME_FRAME_MONTH":      4,
	}
)

func (x TimeFrame) Enum() *TimeFrame {
	p := new(TimeFrame)
	*p = x
	return p
}

func (x TimeFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_tdex_daemon_v1_types_proto_enumTypes[4].Descriptor()
}

func (TimeFrame) Type() protoreflect.EnumType {
	return &file_tdex_daemon_v1_types_proto_enumTypes[4]
}

func (x TimeFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeFrame.Descriptor instead.
func (TimeFrame) EnumDescriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{4}
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the wallet account.
	AccountIndex uint32 `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The full derivation path.
	DerivationPath string `protobuf:"bytes,2,opt,name=derivation_path,json=derivationPath,proto3" json:"derivation_path,omitempty"`
	// The master public key.
	Xpub string `protobuf:"bytes,3,opt,name=xpub,proto3" json:"xpub,omitempty"`
	// The index of the last external address derived.
	LastExternalDerived uint32 `protobuf:"varint,4,opt,name=last_external_derived,json=lastExternalDerived,proto3" json:"last_external_derived,omitempty"`
	// The index of the last internal address derived.
	LastInternalDerived uint32 `protobuf:"varint,5,opt,name=last_internal_derived,json=lastInternalDerived,proto3" json:"last_internal_derived,omitempty"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *AccountInfo) GetAccountIndex() uint32 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *AccountInfo) GetDerivationPath() string {
	if x != nil {
		return x.DerivationPath
	}
	return ""
}

func (x *AccountInfo) GetXpub() string {
	if x != nil {
		return x.Xpub
	}
	return ""
}

func (x *AccountInfo) GetLastExternalDerived() uint32 {
	if x != nil {
		return x.LastExternalDerived
	}
	return 0
}

func (x *AccountInfo) GetLastInternalDerived() uint32 {
	if x != nil {
		return x.LastInternalDerived
	}
	return 0
}

type MarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset pair of the market
	Market *v1.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The percentage and fixed fees
	Fee *v1.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// Whether the market is opened or closed.
	Tradable bool `protobuf:"varint,3,opt,name=tradable,proto3" json:"tradable,omitempty"`
	// The making strategy.
	StrategyType StrategyType `protobuf:"varint,4,opt,name=strategy_type,json=strategyType,proto3,enum=tdex_daemon.v1.StrategyType" json:"strategy_type,omitempty"`
	// The index of the wallet account.
	AccountIndex uint64 `protobuf:"varint,5,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	// The current price in case the strategy is PLUGGABLE.
	Price *v1.Price `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// The current unlocked balance.
	Balance *v1.Balance `protobuf:"bytes,7,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *MarketInfo) Reset() {
	*x = MarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketInfo) ProtoMessage() {}

func (x *MarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketInfo.ProtoReflect.Descriptor instead.
func (*MarketInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *MarketInfo) GetMarket() *v1.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *MarketInfo) GetFee() *v1.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *MarketInfo) GetTradable() bool {
	if x != nil {
		return x.Tradable
	}
	return false
}

func (x *MarketInfo) GetStrategyType() StrategyType {
	if x != nil {
		return x.StrategyType
	}
	return StrategyType_STRATEGY_TYPE_PLUGGABLE
}

func (x *MarketInfo) GetAccountIndex() uint64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *MarketInfo) GetPrice() *v1.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *MarketInfo) GetBalance() *v1.Balance {
	if x != nil {
		return x.Balance
	}
	return nil
}

type UtxoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint <hash, index>
	Outpoint *Outpoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The unblinded value.
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The unblinded asset.
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *UtxoInfo) Reset() {
	*x = UtxoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoInfo) ProtoMessage() {}

func (x *UtxoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoInfo.ProtoReflect.Descriptor instead.
func (*UtxoInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *UtxoInfo) GetOutpoint() *Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *UtxoInfo) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UtxoInfo) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

type TradeStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the trade.
	Status TradeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=tdex_daemon.v1.TradeStatus" json:"status,omitempty"`
	// Whether it is failed in the current status.
	Failed bool `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *TradeStatusInfo) Reset() {
	*x = TradeStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStatusInfo) ProtoMessage() {}

func (x *TradeStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStatusInfo.ProtoReflect.Descriptor instead.
func (*TradeStatusInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *TradeStatusInfo) GetStatus() TradeStatus {
	if x != nil {
		return x.Status
	}
	return TradeStatus_TRADE_STATUS_UNDEFINED
}

func (x *TradeStatusInfo) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

type SwapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proposer's quantity.
	AmountP uint64 `protobuf:"varint,1,opt,name=amount_p,json=amountP,proto3" json:"amount_p,omitempty"`
	// The proposer's asset hash.
	AssetP string `protobuf:"bytes,2,opt,name=asset_p,json=assetP,proto3" json:"asset_p,omitempty"`
	// The responder's quantity.
	AmountR uint64 `protobuf:"varint,3,opt,name=amount_r,json=amountR,proto3" json:"amount_r,omitempty"`
	// The responder's asset hash.
	AssetR string `protobuf:"bytes,4,opt,name=asset_r,json=assetR,proto3" json:"asset_r,omitempty"`
}

func (x *SwapInfo) Reset() {
	*x = SwapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInfo) ProtoMessage() {}

func (x *SwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInfo.ProtoReflect.Descriptor instead.
func (*SwapInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *SwapInfo) GetAmountP() uint64 {
	if x != nil {
		return x.AmountP
	}
	return 0
}

func (x *SwapInfo) GetAssetP() string {
	if x != nil {
		return x.AssetP
	}
	return ""
}

func (x *SwapInfo) GetAmountR() uint64 {
	if x != nil {
		return x.AmountR
	}
	return 0
}

func (x *SwapInfo) GetAssetR() string {
	if x != nil {
		return x.AssetR
	}
	return ""
}

type SwapFailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code.
	FailureCode uint32 `protobuf:"varint,1,opt,name=failure_code,json=failureCode,proto3" json:"failure_code,omitempty"`
	// The error message.
	FailureMessage string `protobuf:"bytes,2,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *SwapFailInfo) Reset() {
	*x = SwapFailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapFailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapFailInfo) ProtoMessage() {}

func (x *SwapFailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapFailInfo.ProtoReflect.Descriptor instead.
func (*SwapFailInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *SwapFailInfo) GetFailureCode() uint32 {
	if x != nil {
		return x.FailureCode
	}
	return 0
}

func (x *SwapFailInfo) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the trade.
	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// The info about the status of the trade.
	Status *TradeStatusInfo `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// The info about the swap.
	SwapInfo *SwapInfo `protobuf:"bytes,3,opt,name=swap_info,json=swapInfo,proto3" json:"swap_info,omitempty"`
	// The info of an eventually failed swap.
	FailInfo *SwapFailInfo `protobuf:"bytes,4,opt,name=fail_info,json=failInfo,proto3" json:"fail_info,omitempty"`
	// The collected fee on the current swap.
	MarketWithFee *v1.MarketWithFee `protobuf:"bytes,5,opt,name=market_with_fee,json=marketWithFee,proto3" json:"market_with_fee,omitempty"`
	// The prices of the trade at request time.
	Price *TradePrice `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// The eventual tx url with blinders in case the trade is settled.
	TxUrl string `protobuf:"bytes,7,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	// The unix timestamp of the SwapRequest.
	RequestTimeUnix uint64 `protobuf:"varint,8,opt,name=request_time_unix,json=requestTimeUnix,proto3" json:"request_time_unix,omitempty"`
	// The unix timestamp SwapAccept.
	AcceptTimeUnix uint64 `protobuf:"varint,9,opt,name=accept_time_unix,json=acceptTimeUnix,proto3" json:"accept_time_unix,omitempty"`
	// The unix timestamp of the SwapComplete.
	CompleteTimeUnix uint64 `protobuf:"varint,10,opt,name=complete_time_unix,json=completeTimeUnix,proto3" json:"complete_time_unix,omitempty"`
	// The unix timestamp of the settlement date.
	SettleTimeUnix uint64 `protobuf:"varint,11,opt,name=settle_time_unix,json=settleTimeUnix,proto3" json:"settle_time_unix,omitempty"`
	// The unix timestamp of the expiration date.
	ExpiryTimeUnix uint64 `protobuf:"varint,12,opt,name=expiry_time_unix,json=expiryTimeUnix,proto3" json:"expiry_time_unix,omitempty"`
	// The UTC timestamp of the SwapRequest.
	RequestTimeUtc string `protobuf:"bytes,13,opt,name=request_time_utc,json=requestTimeUtc,proto3" json:"request_time_utc,omitempty"`
	// The UTC timestamp of the SwapAccept.
	AcceptTimeUtc string `protobuf:"bytes,14,opt,name=accept_time_utc,json=acceptTimeUtc,proto3" json:"accept_time_utc,omitempty"`
	// The UTC timestamp of the SwapComplete.
	CompleteTimeUtc string `protobuf:"bytes,15,opt,name=complete_time_utc,json=completeTimeUtc,proto3" json:"complete_time_utc,omitempty"`
	// The UTC timestamp of the settlement date.
	SettleTimeUtc string `protobuf:"bytes,16,opt,name=settle_time_utc,json=settleTimeUtc,proto3" json:"settle_time_utc,omitempty"`
	// The UTC timestamp of the expiration date.
	ExpiryTimeUtc string `protobuf:"bytes,17,opt,name=expiry_time_utc,json=expiryTimeUtc,proto3" json:"expiry_time_utc,omitempty"`
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *TradeInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *TradeInfo) GetStatus() *TradeStatusInfo {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TradeInfo) GetSwapInfo() *SwapInfo {
	if x != nil {
		return x.SwapInfo
	}
	return nil
}

func (x *TradeInfo) GetFailInfo() *SwapFailInfo {
	if x != nil {
		return x.FailInfo
	}
	return nil
}

func (x *TradeInfo) GetMarketWithFee() *v1.MarketWithFee {
	if x != nil {
		return x.MarketWithFee
	}
	return nil
}

func (x *TradeInfo) GetPrice() *TradePrice {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *TradeInfo) GetTxUrl() string {
	if x != nil {
		return x.TxUrl
	}
	return ""
}

func (x *TradeInfo) GetRequestTimeUnix() uint64 {
	if x != nil {
		return x.RequestTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetAcceptTimeUnix() uint64 {
	if x != nil {
		return x.AcceptTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetCompleteTimeUnix() uint64 {
	if x != nil {
		return x.CompleteTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetSettleTimeUnix() uint64 {
	if x != nil {
		return x.SettleTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetExpiryTimeUnix() uint64 {
	if x != nil {
		return x.ExpiryTimeUnix
	}
	return 0
}

func (x *TradeInfo) GetRequestTimeUtc() string {
	if x != nil {
		return x.RequestTimeUtc
	}
	return ""
}

func (x *TradeInfo) GetAcceptTimeUtc() string {
	if x != nil {
		return x.AcceptTimeUtc
	}
	return ""
}

func (x *TradeInfo) GetCompleteTimeUtc() string {
	if x != nil {
		return x.CompleteTimeUtc
	}
	return ""
}

func (x *TradeInfo) GetSettleTimeUtc() string {
	if x != nil {
		return x.SettleTimeUtc
	}
	return ""
}

func (x *TradeInfo) GetExpiryTimeUtc() string {
	if x != nil {
		return x.ExpiryTimeUtc
	}
	return ""
}

type FeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the trade.
	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// The percentage fee applied to the trade.
	BasisPoint int64 `protobuf:"varint,2,opt,name=basis_point,json=basisPoint,proto3" json:"basis_point,omitempty"`
	// The asset in which fees are collected.
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// The amount in satoshi of the percentage fee.
	PercentageFeeAmount uint64 `protobuf:"varint,4,opt,name=percentage_fee_amount,json=percentageFeeAmount,proto3" json:"percentage_fee_amount,omitempty"`
	// The amount in satoshi of the fixed fee.
	FixedFeeAmount uint64 `protobuf:"varint,5,opt,name=fixed_fee_amount,json=fixedFeeAmount,proto3" json:"fixed_fee_amount,omitempty"`
	// The market price when the trade propoal was accepted.
	MarketPrice float32 `protobuf:"fixed32,6,opt,name=market_price,json=marketPrice,proto3" json:"market_price,omitempty"`
}

func (x *FeeInfo) Reset() {
	*x = FeeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfo) ProtoMessage() {}

func (x *FeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfo.ProtoReflect.Descriptor instead.
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *FeeInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *FeeInfo) GetBasisPoint() int64 {
	if x != nil {
		return x.BasisPoint
	}
	return 0
}

func (x *FeeInfo) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *FeeInfo) GetPercentageFeeAmount() uint64 {
	if x != nil {
		return x.PercentageFeeAmount
	}
	return 0
}

func (x *FeeInfo) GetFixedFeeAmount() uint64 {
	if x != nil {
		return x.FixedFeeAmount
	}
	return 0
}

func (x *FeeInfo) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

type BalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The balance of the wallet
	TotalBalance uint64 `protobuf:"varint,1,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
	// The confirmed balance of a wallet(with >= 1 confirmations)
	ConfirmedBalance uint64 `protobuf:"varint,2,opt,name=confirmed_balance,json=confirmedBalance,proto3" json:"confirmed_balance,omitempty"`
	// The unconfirmed balance of a wallet(with 0 confirmations)
	UnconfirmedBalance uint64 `protobuf:"varint,3,opt,name=unconfirmed_balance,json=unconfirmedBalance,proto3" json:"unconfirmed_balance,omitempty"`
}

func (x *BalanceInfo) Reset() {
	*x = BalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceInfo) ProtoMessage() {}

func (x *BalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceInfo.ProtoReflect.Descriptor instead.
func (*BalanceInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *BalanceInfo) GetTotalBalance() uint64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

func (x *BalanceInfo) GetConfirmedBalance() uint64 {
	if x != nil {
		return x.ConfirmedBalance
	}
	return 0
}

func (x *BalanceInfo) GetUnconfirmedBalance() uint64 {
	if x != nil {
		return x.UnconfirmedBalance
	}
	return 0
}

type TxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset being spent
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// The value of the output being spent.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The confidential address of the output being spent.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *TxOutput) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TxOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TxOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AddressWithBlindingKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The confidential address encoded using a blech32 format.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The blinding private key for the given address encoded in hex format
	Blinding string `protobuf:"bytes,2,opt,name=blinding,proto3" json:"blinding,omitempty"`
}

func (x *AddressWithBlindingKey) Reset() {
	*x = AddressWithBlindingKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressWithBlindingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressWithBlindingKey) ProtoMessage() {}

func (x *AddressWithBlindingKey) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressWithBlindingKey.ProtoReflect.Descriptor instead.
func (*AddressWithBlindingKey) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{10}
}

func (x *AddressWithBlindingKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressWithBlindingKey) GetBlinding() string {
	if x != nil {
		return x.Blinding
	}
	return ""
}

type Outpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the transaction.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The index of the output.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Outpoint) Reset() {
	*x = Outpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outpoint) ProtoMessage() {}

func (x *Outpoint) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outpoint.ProtoReflect.Descriptor instead.
func (*Outpoint) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{11}
}

func (x *Outpoint) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Outpoint) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type TradePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasePrice  float64 `protobuf:"fixed64,1,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`
	QuotePrice float64 `protobuf:"fixed64,2,opt,name=quote_price,json=quotePrice,proto3" json:"quote_price,omitempty"`
}

func (x *TradePrice) Reset() {
	*x = TradePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePrice) ProtoMessage() {}

func (x *TradePrice) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePrice.ProtoReflect.Descriptor instead.
func (*TradePrice) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{12}
}

func (x *TradePrice) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *TradePrice) GetQuotePrice() float64 {
	if x != nil {
		return x.QuotePrice
	}
	return 0
}

type WebhookInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the webhook.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The endpoint of the external service to reach.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Whether the outgoing requests are authenticated.
	IsSecured bool `protobuf:"varint,3,opt,name=is_secured,json=isSecured,proto3" json:"is_secured,omitempty"`
	// The type of the action.
	ActionType ActionType `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3,enum=tdex_daemon.v1.ActionType" json:"action_type,omitempty"`
}

func (x *WebhookInfo) Reset() {
	*x = WebhookInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookInfo) ProtoMessage() {}

func (x *WebhookInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookInfo.ProtoReflect.Descriptor instead.
func (*WebhookInfo) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{13}
}

func (x *WebhookInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebhookInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *WebhookInfo) GetIsSecured() bool {
	if x != nil {
		return x.IsSecured
	}
	return false
}

func (x *WebhookInfo) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ACTION_TYPE_TRADE_SETTLED
}

type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The utxo deposited.
	Utxo *UtxoInfo `protobuf:"bytes,1,opt,name=utxo,proto3" json:"utxo,omitempty"`
	// The timestamp of the deposit transaction in Unix format.
	TimestampUnix uint64 `protobuf:"varint,2,opt,name=timestamp_unix,json=timestampUnix,proto3" json:"timestamp_unix,omitempty"`
	// The timestamp of the deposit transaction in UTC format.
	TimestampUtc string `protobuf:"bytes,5,opt,name=timestamp_utc,json=timestampUtc,proto3" json:"timestamp_utc,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{14}
}

func (x *Deposit) GetUtxo() *UtxoInfo {
	if x != nil {
		return x.Utxo
	}
	return nil
}

func (x *Deposit) GetTimestampUnix() uint64 {
	if x != nil {
		return x.TimestampUnix
	}
	return 0
}

func (x *Deposit) GetTimestampUtc() string {
	if x != nil {
		return x.TimestampUtc
	}
	return ""
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the transaction included in mempool/blockchain.
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// The balance withdrawn from the wallet account.
	Balance *v1.Balance `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// The address where the funds have been sent.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The timestamp of the withdrawal transaction in Unix format.
	TimestampUnix uint64 `protobuf:"varint,4,opt,name=timestamp_unix,json=timestampUnix,proto3" json:"timestamp_unix,omitempty"`
	// The timestamp of the withdrawal transaction in UTC format.
	TimestampUtc string `protobuf:"bytes,5,opt,name=timestamp_utc,json=timestampUtc,proto3" json:"timestamp_utc,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{15}
}

func (x *Withdrawal) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Withdrawal) GetBalance() *v1.Balance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *Withdrawal) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Withdrawal) GetTimestampUnix() uint64 {
	if x != nil {
		return x.TimestampUnix
	}
	return 0
}

func (x *Withdrawal) GetTimestampUtc() string {
	if x != nil {
		return x.TimestampUtc
	}
	return ""
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of the page.
	PageNumber int64 `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// The size of the page, ie the max length the returning list can have.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{16}
}

func (x *Page) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *Page) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type MarketReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCollectedFees *MarketCollectedFees `protobuf:"bytes,1,opt,name=total_collected_fees,json=totalCollectedFees,proto3" json:"total_collected_fees,omitempty"`
	TotalVolume        *MarketVolume        `protobuf:"bytes,2,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	GroupedVolume      []*MarketVolume      `protobuf:"bytes,3,rep,name=grouped_volume,json=groupedVolume,proto3" json:"grouped_volume,omitempty"`
}

func (x *MarketReport) Reset() {
	*x = MarketReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketReport) ProtoMessage() {}

func (x *MarketReport) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketReport.ProtoReflect.Descriptor instead.
func (*MarketReport) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{17}
}

func (x *MarketReport) GetTotalCollectedFees() *MarketCollectedFees {
	if x != nil {
		return x.TotalCollectedFees
	}
	return nil
}

func (x *MarketReport) GetTotalVolume() *MarketVolume {
	if x != nil {
		return x.TotalVolume
	}
	return nil
}

func (x *MarketReport) GetGroupedVolume() []*MarketVolume {
	if x != nil {
		return x.GroupedVolume
	}
	return nil
}

type MarketCollectedFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAmount  uint64 `protobuf:"varint,1,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAmount uint64 `protobuf:"varint,2,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	// start_date in RFC3339 format of the aggregated volume calculation
	StartDate string `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// end_date in RFC3339 format of the aggregated volume calculation
	EndDate string `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *MarketCollectedFees) Reset() {
	*x = MarketCollectedFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketCollectedFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketCollectedFees) ProtoMessage() {}

func (x *MarketCollectedFees) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketCollectedFees.ProtoReflect.Descriptor instead.
func (*MarketCollectedFees) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{18}
}

func (x *MarketCollectedFees) GetBaseAmount() uint64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *MarketCollectedFees) GetQuoteAmount() uint64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

func (x *MarketCollectedFees) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MarketCollectedFees) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type MarketVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseVolume  uint64 `protobuf:"varint,1,opt,name=base_volume,json=baseVolume,proto3" json:"base_volume,omitempty"`
	QuoteVolume uint64 `protobuf:"varint,2,opt,name=quote_volume,json=quoteVolume,proto3" json:"quote_volume,omitempty"`
	// start_date in RFC3339 format of the aggregated volume calculation
	StartDate string `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// end_date in RFC3339 format of the aggregated volume calculation
	EndDate string `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *MarketVolume) Reset() {
	*x = MarketVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketVolume) ProtoMessage() {}

func (x *MarketVolume) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketVolume.ProtoReflect.Descriptor instead.
func (*MarketVolume) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{19}
}

func (x *MarketVolume) GetBaseVolume() uint64 {
	if x != nil {
		return x.BaseVolume
	}
	return 0
}

func (x *MarketVolume) GetQuoteVolume() uint64 {
	if x != nil {
		return x.QuoteVolume
	}
	return 0
}

func (x *MarketVolume) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MarketVolume) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// TimeRange is flexible type used to determine time span for which specific
// api will fetch data, either one of predefined_period or custom_period should be provided.
type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// predefined time_period till now
	PredefinedPeriod PredefinedPeriod `protobuf:"varint,1,opt,name=predefined_period,json=predefinedPeriod,proto3,enum=tdex_daemon.v1.PredefinedPeriod" json:"predefined_period,omitempty"`
	// custom time range
	CustomPeriod *CustomPeriod `protobuf:"bytes,2,opt,name=custom_period,json=customPeriod,proto3" json:"custom_period,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{20}
}

func (x *TimeRange) GetPredefinedPeriod() PredefinedPeriod {
	if x != nil {
		return x.PredefinedPeriod
	}
	return PredefinedPeriod_PREDEFINED_PERIOD_UNSPECIFIED
}

func (x *TimeRange) GetCustomPeriod() *CustomPeriod {
	if x != nil {
		return x.CustomPeriod
	}
	return nil
}

type CustomPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start_date in RFC3339 format
	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// end_date in RFC3339 format
	EndDate string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *CustomPeriod) Reset() {
	*x = CustomPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tdex_daemon_v1_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPeriod) ProtoMessage() {}

func (x *CustomPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_tdex_daemon_v1_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPeriod.ProtoReflect.Descriptor instead.
func (*CustomPeriod) Descriptor() ([]byte, []int) {
	return file_tdex_daemon_v1_types_proto_rawDescGZIP(), []int{21}
}

func (x *CustomPeriod) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CustomPeriod) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

var File_tdex_daemon_v1_types_proto protoreflect.FileDescriptor

var file_tdex_daemon_v1_types_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x64, 0x65, 0x78, 0x2d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x64,
	0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x74, 0x64,
	0x65, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x78, 0x70, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78,
	0x70, 0x75, 0x62, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x0a,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x41, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x6c, 0x0a, 0x08, 0x55, 0x74, 0x78,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x64, 0x65,
	0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x72, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x22, 0x5a, 0x0a, 0x0c, 0x53,
	0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x80, 0x06, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x39, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x52, 0x0d, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x65,
	0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x78, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x74, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x74, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x22, 0xdc, 0x01, 0x0a, 0x07, 0x46,
	0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x75,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x08,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e,
	0x0a, 0x16, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x34,
	0x0a, 0x08, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x4c, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x07, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x74, 0x78, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x75, 0x74, 0x78, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x74, 0x63,
	0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12,
	0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69,
	0x78, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75,
	0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x55, 0x74, 0x63, 0x22, 0x44, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xeb, 0x01, 0x0a,
	0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x64,
	0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x64, 0x65,
	0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4d, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0x48, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x2a, 0x65, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x47,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0xab, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x8f,
	0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03,
	0x2a, 0xc2, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x45, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x45, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x45,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x45,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52,
	0x45, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23,
	0x50, 0x52, 0x45, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x53, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x45, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f,
	0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x45,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52,
	0x45, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x08, 0x2a, 0x7a, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10,
	0x04, 0x42, 0xcd, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x64, 0x65, 0x78, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x74, 0x64, 0x65, 0x78, 0x2d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2d,
	0x73, 0x70, 0x65, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x74, 0x64, 0x65, 0x78, 0x2d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x74, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x54, 0x64, 0x65, 0x78, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x54, 0x64, 0x65, 0x78, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x54, 0x64, 0x65, 0x78, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0e, 0x54, 0x64, 0x65, 0x78, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tdex_daemon_v1_types_proto_rawDescOnce sync.Once
	file_tdex_daemon_v1_types_proto_rawDescData = file_tdex_daemon_v1_types_proto_rawDesc
)

func file_tdex_daemon_v1_types_proto_rawDescGZIP() []byte {
	file_tdex_daemon_v1_types_proto_rawDescOnce.Do(func() {
		file_tdex_daemon_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_tdex_daemon_v1_types_proto_rawDescData)
	})
	return file_tdex_daemon_v1_types_proto_rawDescData
}

var file_tdex_daemon_v1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_tdex_daemon_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_tdex_daemon_v1_types_proto_goTypes = []interface{}{
	(StrategyType)(0),              // 0: tdex_daemon.v1.StrategyType
	(TradeStatus)(0),               // 1: tdex_daemon.v1.TradeStatus
	(ActionType)(0),                // 2: tdex_daemon.v1.ActionType
	(PredefinedPeriod)(0),          // 3: tdex_daemon.v1.PredefinedPeriod
	(TimeFrame)(0),                 // 4: tdex_daemon.v1.TimeFrame
	(*AccountInfo)(nil),            // 5: tdex_daemon.v1.AccountInfo
	(*MarketInfo)(nil),             // 6: tdex_daemon.v1.MarketInfo
	(*UtxoInfo)(nil),               // 7: tdex_daemon.v1.UtxoInfo
	(*TradeStatusInfo)(nil),        // 8: tdex_daemon.v1.TradeStatusInfo
	(*SwapInfo)(nil),               // 9: tdex_daemon.v1.SwapInfo
	(*SwapFailInfo)(nil),           // 10: tdex_daemon.v1.SwapFailInfo
	(*TradeInfo)(nil),              // 11: tdex_daemon.v1.TradeInfo
	(*FeeInfo)(nil),                // 12: tdex_daemon.v1.FeeInfo
	(*BalanceInfo)(nil),            // 13: tdex_daemon.v1.BalanceInfo
	(*TxOutput)(nil),               // 14: tdex_daemon.v1.TxOutput
	(*AddressWithBlindingKey)(nil), // 15: tdex_daemon.v1.AddressWithBlindingKey
	(*Outpoint)(nil),               // 16: tdex_daemon.v1.Outpoint
	(*TradePrice)(nil),             // 17: tdex_daemon.v1.TradePrice
	(*WebhookInfo)(nil),            // 18: tdex_daemon.v1.WebhookInfo
	(*Deposit)(nil),                // 19: tdex_daemon.v1.Deposit
	(*Withdrawal)(nil),             // 20: tdex_daemon.v1.Withdrawal
	(*Page)(nil),                   // 21: tdex_daemon.v1.Page
	(*MarketReport)(nil),           // 22: tdex_daemon.v1.MarketReport
	(*MarketCollectedFees)(nil),    // 23: tdex_daemon.v1.MarketCollectedFees
	(*MarketVolume)(nil),           // 24: tdex_daemon.v1.MarketVolume
	(*TimeRange)(nil),              // 25: tdex_daemon.v1.TimeRange
	(*CustomPeriod)(nil),           // 26: tdex_daemon.v1.CustomPeriod
	(*v1.Market)(nil),              // 27: tdex.v1.Market
	(*v1.Fee)(nil),                 // 28: tdex.v1.Fee
	(*v1.Price)(nil),               // 29: tdex.v1.Price
	(*v1.Balance)(nil),             // 30: tdex.v1.Balance
	(*v1.MarketWithFee)(nil),       // 31: tdex.v1.MarketWithFee
}
var file_tdex_daemon_v1_types_proto_depIdxs = []int32{
	27, // 0: tdex_daemon.v1.MarketInfo.market:type_name -> tdex.v1.Market
	28, // 1: tdex_daemon.v1.MarketInfo.fee:type_name -> tdex.v1.Fee
	0,  // 2: tdex_daemon.v1.MarketInfo.strategy_type:type_name -> tdex_daemon.v1.StrategyType
	29, // 3: tdex_daemon.v1.MarketInfo.price:type_name -> tdex.v1.Price
	30, // 4: tdex_daemon.v1.MarketInfo.balance:type_name -> tdex.v1.Balance
	16, // 5: tdex_daemon.v1.UtxoInfo.outpoint:type_name -> tdex_daemon.v1.Outpoint
	1,  // 6: tdex_daemon.v1.TradeStatusInfo.status:type_name -> tdex_daemon.v1.TradeStatus
	8,  // 7: tdex_daemon.v1.TradeInfo.status:type_name -> tdex_daemon.v1.TradeStatusInfo
	9,  // 8: tdex_daemon.v1.TradeInfo.swap_info:type_name -> tdex_daemon.v1.SwapInfo
	10, // 9: tdex_daemon.v1.TradeInfo.fail_info:type_name -> tdex_daemon.v1.SwapFailInfo
	31, // 10: tdex_daemon.v1.TradeInfo.market_with_fee:type_name -> tdex.v1.MarketWithFee
	17, // 11: tdex_daemon.v1.TradeInfo.price:type_name -> tdex_daemon.v1.TradePrice
	2,  // 12: tdex_daemon.v1.WebhookInfo.action_type:type_name -> tdex_daemon.v1.ActionType
	7,  // 13: tdex_daemon.v1.Deposit.utxo:type_name -> tdex_daemon.v1.UtxoInfo
	30, // 14: tdex_daemon.v1.Withdrawal.balance:type_name -> tdex.v1.Balance
	23, // 15: tdex_daemon.v1.MarketReport.total_collected_fees:type_name -> tdex_daemon.v1.MarketCollectedFees
	24, // 16: tdex_daemon.v1.MarketReport.total_volume:type_name -> tdex_daemon.v1.MarketVolume
	24, // 17: tdex_daemon.v1.MarketReport.grouped_volume:type_name -> tdex_daemon.v1.MarketVolume
	3,  // 18: tdex_daemon.v1.TimeRange.predefined_period:type_name -> tdex_daemon.v1.PredefinedPeriod
	26, // 19: tdex_daemon.v1.TimeRange.custom_period:type_name -> tdex_daemon.v1.CustomPeriod
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_tdex_daemon_v1_types_proto_init() }
func file_tdex_daemon_v1_types_proto_init() {
	if File_tdex_daemon_v1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tdex_daemon_v1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapFailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressWithBlindingKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketCollectedFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tdex_daemon_v1_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tdex_daemon_v1_types_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tdex_daemon_v1_types_proto_goTypes,
		DependencyIndexes: file_tdex_daemon_v1_types_proto_depIdxs,
		EnumInfos:         file_tdex_daemon_v1_types_proto_enumTypes,
		MessageInfos:      file_tdex_daemon_v1_types_proto_msgTypes,
	}.Build()
	File_tdex_daemon_v1_types_proto = out.File
	file_tdex_daemon_v1_types_proto_rawDesc = nil
	file_tdex_daemon_v1_types_proto_goTypes = nil
	file_tdex_daemon_v1_types_proto_depIdxs = nil
}
