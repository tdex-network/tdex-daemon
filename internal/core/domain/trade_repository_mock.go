// Code generated by mockery v2.10.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockTradeRepository is an autogenerated mock type for the TradeRepository type
type MockTradeRepository struct {
	mock.Mock
}

// GetAllTrades provides a mock function with given fields: ctx
func (_m *MockTradeRepository) GetAllTrades(ctx context.Context) ([]*Trade, error) {
	ret := _m.Called(ctx)

	var r0 []*Trade
	if rf, ok := ret.Get(0).(func(context.Context) []*Trade); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTradesByMarket provides a mock function with given fields: ctx, marketQuoteAsset
func (_m *MockTradeRepository) GetAllTradesByMarket(ctx context.Context, marketQuoteAsset string) ([]*Trade, error) {
	ret := _m.Called(ctx, marketQuoteAsset)

	var r0 []*Trade
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Trade); ok {
		r0 = rf(ctx, marketQuoteAsset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, marketQuoteAsset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTradesByMarketAndPage provides a mock function with given fields: ctx, marketQuoteAsset, page
func (_m *MockTradeRepository) GetAllTradesByMarketAndPage(ctx context.Context, marketQuoteAsset string, page Page) ([]*Trade, error) {
	ret := _m.Called(ctx, marketQuoteAsset, page)

	var r0 []*Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, Page) []*Trade); ok {
		r0 = rf(ctx, marketQuoteAsset, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, Page) error); ok {
		r1 = rf(ctx, marketQuoteAsset, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTradesForPage provides a mock function with given fields: ctx, page
func (_m *MockTradeRepository) GetAllTradesForPage(ctx context.Context, page Page) ([]*Trade, error) {
	ret := _m.Called(ctx, page)

	var r0 []*Trade
	if rf, ok := ret.Get(0).(func(context.Context, Page) []*Trade); ok {
		r0 = rf(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Page) error); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompletedTradesByMarket provides a mock function with given fields: ctx, marketQuoteAsset
func (_m *MockTradeRepository) GetCompletedTradesByMarket(ctx context.Context, marketQuoteAsset string) ([]*Trade, error) {
	ret := _m.Called(ctx, marketQuoteAsset)

	var r0 []*Trade
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Trade); ok {
		r0 = rf(ctx, marketQuoteAsset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, marketQuoteAsset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompletedTradesByMarketAndPage provides a mock function with given fields: ctx, marketQuoteAsset, page
func (_m *MockTradeRepository) GetCompletedTradesByMarketAndPage(ctx context.Context, marketQuoteAsset string, page Page) ([]*Trade, error) {
	ret := _m.Called(ctx, marketQuoteAsset, page)

	var r0 []*Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, Page) []*Trade); ok {
		r0 = rf(ctx, marketQuoteAsset, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, Page) error); ok {
		r1 = rf(ctx, marketQuoteAsset, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateTrade provides a mock function with given fields: ctx, tradeID
func (_m *MockTradeRepository) GetOrCreateTrade(ctx context.Context, tradeID *uuid.UUID) (*Trade, error) {
	ret := _m.Called(ctx, tradeID)

	var r0 *Trade
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *Trade); ok {
		r0 = rf(ctx, tradeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = rf(ctx, tradeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradeBySwapAcceptID provides a mock function with given fields: ctx, swapAcceptID
func (_m *MockTradeRepository) GetTradeBySwapAcceptID(ctx context.Context, swapAcceptID string) (*Trade, error) {
	ret := _m.Called(ctx, swapAcceptID)

	var r0 *Trade
	if rf, ok := ret.Get(0).(func(context.Context, string) *Trade); ok {
		r0 = rf(ctx, swapAcceptID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, swapAcceptID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradeByTxID provides a mock function with given fields: ctx, txID
func (_m *MockTradeRepository) GetTradeByTxID(ctx context.Context, txID string) (*Trade, error) {
	ret := _m.Called(ctx, txID)

	var r0 *Trade
	if rf, ok := ret.Get(0).(func(context.Context, string) *Trade); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrade provides a mock function with given fields: ctx, tradeID, updateFn
func (_m *MockTradeRepository) UpdateTrade(ctx context.Context, tradeID *uuid.UUID, updateFn func(*Trade) (*Trade, error)) error {
	ret := _m.Called(ctx, tradeID, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, func(*Trade) (*Trade, error)) error); ok {
		r0 = rf(ctx, tradeID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
