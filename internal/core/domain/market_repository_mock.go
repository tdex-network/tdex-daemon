// Code generated by mockery v2.10.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMarketRepository is an autogenerated mock type for the MarketRepository type
type MockMarketRepository struct {
	mock.Mock
}

// CloseMarket provides a mock function with given fields: ctx, accountIndex
func (_m *MockMarketRepository) CloseMarket(ctx context.Context, accountIndex int) error {
	ret := _m.Called(ctx, accountIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, accountIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMarket provides a mock function with given fields: ctx, accountIndex
func (_m *MockMarketRepository) DeleteMarket(ctx context.Context, accountIndex int) error {
	ret := _m.Called(ctx, accountIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, accountIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMarkets provides a mock function with given fields: ctx
func (_m *MockMarketRepository) GetAllMarkets(ctx context.Context) ([]Market, error) {
	ret := _m.Called(ctx)

	var r0 []Market
	if rf, ok := ret.Get(0).(func(context.Context) []Market); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestMarket provides a mock function with given fields: ctx
func (_m *MockMarketRepository) GetLatestMarket(ctx context.Context) (*Market, int, error) {
	ret := _m.Called(ctx)

	var r0 *Market
	if rf, ok := ret.Get(0).(func(context.Context) *Market); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Market)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMarketByAccount provides a mock function with given fields: ctx, accountIndex
func (_m *MockMarketRepository) GetMarketByAccount(ctx context.Context, accountIndex int) (*Market, error) {
	ret := _m.Called(ctx, accountIndex)

	var r0 *Market
	if rf, ok := ret.Get(0).(func(context.Context, int) *Market); ok {
		r0 = rf(ctx, accountIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, accountIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketByAssets provides a mock function with given fields: ctx, baseAsset, quoteAsset
func (_m *MockMarketRepository) GetMarketByAssets(ctx context.Context, baseAsset string, quoteAsset string) (*Market, int, error) {
	ret := _m.Called(ctx, baseAsset, quoteAsset)

	var r0 *Market
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Market); ok {
		r0 = rf(ctx, baseAsset, quoteAsset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Market)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, string) int); ok {
		r1 = rf(ctx, baseAsset, quoteAsset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, baseAsset, quoteAsset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrCreateMarket provides a mock function with given fields: ctx, market
func (_m *MockMarketRepository) GetOrCreateMarket(ctx context.Context, market *Market) (*Market, error) {
	ret := _m.Called(ctx, market)

	var r0 *Market
	if rf, ok := ret.Get(0).(func(context.Context, *Market) *Market); ok {
		r0 = rf(ctx, market)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Market) error); ok {
		r1 = rf(ctx, market)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradableMarkets provides a mock function with given fields: ctx
func (_m *MockMarketRepository) GetTradableMarkets(ctx context.Context) ([]Market, error) {
	ret := _m.Called(ctx)

	var r0 []Market
	if rf, ok := ret.Get(0).(func(context.Context) []Market); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenMarket provides a mock function with given fields: ctx, accountIndex
func (_m *MockMarketRepository) OpenMarket(ctx context.Context, accountIndex int) error {
	ret := _m.Called(ctx, accountIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, accountIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMarket provides a mock function with given fields: ctx, accountIndex, updateFn
func (_m *MockMarketRepository) UpdateMarket(ctx context.Context, accountIndex int, updateFn func(*Market) (*Market, error)) error {
	ret := _m.Called(ctx, accountIndex, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func(*Market) (*Market, error)) error); ok {
		r0 = rf(ctx, accountIndex, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePrices provides a mock function with given fields: ctx, accountIndex, prices
func (_m *MockMarketRepository) UpdatePrices(ctx context.Context, accountIndex int, prices Prices) error {
	ret := _m.Called(ctx, accountIndex, prices)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, Prices) error); ok {
		r0 = rf(ctx, accountIndex, prices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
