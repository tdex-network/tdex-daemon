// Code generated by mockery v2.10.0. DO NOT EDIT.

package ports

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/tdex-network/tdex-daemon/internal/core/domain"
)

// MockRepoManager is an autogenerated mock type for the RepoManager type
type MockRepoManager struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockRepoManager) Close() {
	_m.Called()
}

// DepositRepository provides a mock function with given fields:
func (_m *MockRepoManager) DepositRepository() domain.DepositRepository {
	ret := _m.Called()

	var r0 domain.DepositRepository
	if rf, ok := ret.Get(0).(func() domain.DepositRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.DepositRepository)
		}
	}

	return r0
}

// MarketRepository provides a mock function with given fields:
func (_m *MockRepoManager) MarketRepository() domain.MarketRepository {
	ret := _m.Called()

	var r0 domain.MarketRepository
	if rf, ok := ret.Get(0).(func() domain.MarketRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MarketRepository)
		}
	}

	return r0
}

// NewPricesTransaction provides a mock function with given fields:
func (_m *MockRepoManager) NewPricesTransaction() Transaction {
	ret := _m.Called()

	var r0 Transaction
	if rf, ok := ret.Get(0).(func() Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Transaction)
		}
	}

	return r0
}

// NewTransaction provides a mock function with given fields:
func (_m *MockRepoManager) NewTransaction() Transaction {
	ret := _m.Called()

	var r0 Transaction
	if rf, ok := ret.Get(0).(func() Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Transaction)
		}
	}

	return r0
}

// NewUnspentsTransaction provides a mock function with given fields:
func (_m *MockRepoManager) NewUnspentsTransaction() Transaction {
	ret := _m.Called()

	var r0 Transaction
	if rf, ok := ret.Get(0).(func() Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Transaction)
		}
	}

	return r0
}

// RunPricesTransaction provides a mock function with given fields: ctx, readOnly, handler
func (_m *MockRepoManager) RunPricesTransaction(ctx context.Context, readOnly bool, handler func(context.Context) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(ctx, readOnly, handler)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, bool, func(context.Context) (interface{}, error)) interface{}); ok {
		r0 = rf(ctx, readOnly, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, func(context.Context) (interface{}, error)) error); ok {
		r1 = rf(ctx, readOnly, handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunTransaction provides a mock function with given fields: ctx, readOnly, handler
func (_m *MockRepoManager) RunTransaction(ctx context.Context, readOnly bool, handler func(context.Context) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(ctx, readOnly, handler)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, bool, func(context.Context) (interface{}, error)) interface{}); ok {
		r0 = rf(ctx, readOnly, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, func(context.Context) (interface{}, error)) error); ok {
		r1 = rf(ctx, readOnly, handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunUnspentsTransaction provides a mock function with given fields: ctx, readOnly, handler
func (_m *MockRepoManager) RunUnspentsTransaction(ctx context.Context, readOnly bool, handler func(context.Context) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(ctx, readOnly, handler)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, bool, func(context.Context) (interface{}, error)) interface{}); ok {
		r0 = rf(ctx, readOnly, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, func(context.Context) (interface{}, error)) error); ok {
		r1 = rf(ctx, readOnly, handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TradeRepository provides a mock function with given fields:
func (_m *MockRepoManager) TradeRepository() domain.TradeRepository {
	ret := _m.Called()

	var r0 domain.TradeRepository
	if rf, ok := ret.Get(0).(func() domain.TradeRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.TradeRepository)
		}
	}

	return r0
}

// UnspentRepository provides a mock function with given fields:
func (_m *MockRepoManager) UnspentRepository() domain.UnspentRepository {
	ret := _m.Called()

	var r0 domain.UnspentRepository
	if rf, ok := ret.Get(0).(func() domain.UnspentRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.UnspentRepository)
		}
	}

	return r0
}

// VaultRepository provides a mock function with given fields:
func (_m *MockRepoManager) VaultRepository() domain.VaultRepository {
	ret := _m.Called()

	var r0 domain.VaultRepository
	if rf, ok := ret.Get(0).(func() domain.VaultRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.VaultRepository)
		}
	}

	return r0
}

// WithdrawalRepository provides a mock function with given fields:
func (_m *MockRepoManager) WithdrawalRepository() domain.WithdrawalRepository {
	ret := _m.Called()

	var r0 domain.WithdrawalRepository
	if rf, ok := ret.Get(0).(func() domain.WithdrawalRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.WithdrawalRepository)
		}
	}

	return r0
}
