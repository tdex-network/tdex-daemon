package swap

import (
	"crypto/rand"
	"testing"

	"github.com/stretchr/testify/require"
)

const USDT = "2dcf5a8834645654911964ec3602426fd3b9b4017554d3f9c19403e7fc1411d3"
const LBTC = "5ac9f65c0efcc4775e0baec4ec03abdde22473cd3cf33c0419ca290e0751b225"
const altcoin = "913df69e031ee10891afb44c0c3019ca6c43ab7b453534b642650f594ff38578"
const initialPsbtOfAlice = "cHNldP8BALgCAAAAAAHtRVE1BkOnL3GYKskZnbmT/4wjiX+golY/TSLwpcWruQEAAAAA/////wIBJbJRBw4pyhkEPPM8zXMk4t2rA+zErgted8T8Dlz2yVoBAAAAAABMS0AAFgAUxSjK7gBSAGV8BLXF9qMLPT5R5XkB0xEU/OcDlMH501R1AbS5029CAjbsZBmRVFZkNIhazy0BAAANnXmIRAAAFgAUxSjK7gBSAGV8BLXF9qMLPT5R5XkAAAAAAAEBQgHTERT85wOUwfnTVHUBtLnTb0ICNuxkGZFUVmQ0iFrPLQEAAA2kdavwAAAWABTFKMruAFIAZXwEtcX2ows9PlHleQAAAA=="
const initialPsetOfAliceLegacyInputs = ""

func TestSwapRequest(t *testing.T) {
	t.Run("v1", func(t *testing.T) {
		t.Run("valid", func(t *testing.T) {
			tests := []struct {
				name string
				opts RequestOpts
			}{
				{
					"unconfidential swap",
					RequestOpts{
						AssetToSend:     USDT,
						AmountToSend:    30000000000,
						AssetToReceive:  LBTC,
						AmountToReceive: 5000000,
						Transaction:     initialPsbtOfAlice,
					},
				},
				{
					"confidential swap",
					RequestOpts{
						AssetToSend:     LBTC,
						AmountToSend:    100000000,
						AssetToReceive:  altcoin,
						AmountToReceive: 10000000000,
						Transaction:     initialPsetOfAliceLegacyInputs,
						InputBlindingKeys: map[string][]byte{
							"0014c0fdf9e9bfb0d08fab79291c9b242a924e44cd37": randomBytes(32),
							"00140d3467d97303ce649745f1231caa11d597d92b53": randomBytes(32),
						},
						OutputBlindingKeys: map[string][]byte{
							"00140d3467d97303ce649745f1231caa11d597d92b53": randomBytes(32),
						},
					},
				},
			}
			for _, tt := range tests {
				t.Run(tt.name, func(t *testing.T) {
					message, err := Request(tt.opts)
					require.NoError(t, err)
					require.NotNil(t, message)
				})
			}
		})

		t.Run("invalid", func(t *testing.T) {
			tests := []struct {
				name string
				opts RequestOpts
			}{
				{
					"missing transaction",
					RequestOpts{
						AssetToSend:     LBTC,
						AmountToSend:    100000000,
						AssetToReceive:  altcoin,
						AmountToReceive: 10000000000,
						Transaction:     "",
					},
				},
				{
					"missing input blinding keys",
					RequestOpts{
						AssetToSend:     LBTC,
						AmountToSend:    100000000,
						AssetToReceive:  altcoin,
						AmountToReceive: 10000000000,
						Transaction:     initialPsetOfAliceLegacyInputs,
						InputBlindingKeys: map[string][]byte{
							"0014c0fdf9e9bfb0d08fab79291c9b242a924e44cd37": randomBytes(32),
						},
					},
				},
				{
					"missing output blinding keys",
					RequestOpts{
						AssetToSend:     LBTC,
						AmountToSend:    100000000,
						AssetToReceive:  altcoin,
						AmountToReceive: 10000000000,
						Transaction:     initialPsetOfAliceLegacyInputs,
						InputBlindingKeys: map[string][]byte{
							"0014c0fdf9e9bfb0d08fab79291c9b242a924e44cd37": randomBytes(32),
							"00140d3467d97303ce649745f1231caa11d597d92b53": randomBytes(32),
						},
						OutputBlindingKeys: map[string][]byte{
							"0014c0fdf9e9bfb0d08fab79291c9b242a924e44cd37": randomBytes(32),
						},
					},
				},
			}
			for _, tt := range tests {
				t.Run(tt.name, func(t *testing.T) {
					message, err := Request(tt.opts)
					require.Error(t, err)
					require.Nil(t, message)
				})
			}
		})
	})
}

func randomBytes(len int) []byte {
	b := make([]byte, len)
	//nolint
	rand.Read(b)
	return b
}
